{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Apuntes y pr\u00e1cticas del m\u00f3dulo Despliegue de aplicaciones web de 2\u00ba de DAW</p> <ol> <li>Introducci\u00f3n</li> <li>Arquitectura web - Implantaci\u00f3n y admnistraci\u00f3n de servidores web</li> <li>Servidores de aplicaciones</li> <li>Servicios de red implicados en el despliegue de aplicaciones web</li> <li>Control de versiones</li> <li>Contenedores</li> <li>CI/CD (Integraci\u00f3n y despliegue continuo)</li> </ol>"},{"location":"ArqWeb/","title":"Arquitectura Web. Implantaci\u00f3n y administraci\u00f3n de servidores web","text":""},{"location":"ArqWeb/#introduccion","title":"Introducci\u00f3n","text":"<p>Con la evoluci\u00f3n y el acceso libre a Internet, uno de los principales alicientes que han surgido es la publicaci\u00f3n de p\u00e1ginas web donde se pueden almacenar unos contenidos bastante atractivos para nosotros y que, al mismo tiempo, pueden ser consultados desde cualquier del mundo para todos. </p> <p>Cabe decir que, con la popularizaci\u00f3n de Internet, tanto empresas como usuarios han visto la necesidad de establecer un punto desde donde anunciar sus productos, o bien, a t\u00edtulo particular, dar publicidad a las aficiones o capacidades personales mediante la publicaci\u00f3n de p\u00e1ginas web. </p> <p>Las p\u00e1ginas web, en su mayor\u00eda en formato HTML, requieren ser alojadas en m\u00e1quinas que dispongan de espacio en disco para almacenar archivos HTML, im\u00e1genes, bloques de c\u00f3digo o archivos de v\u00eddeo en directorios espec\u00edficos y, al mismo tiempo, deben ser capaces de entender todo tipo de extensi\u00f3n de los archivos que son enviados en ambos sentidos de la comunicaci\u00f3n. </p> <p></p> <p>Paralelamente, no podemos dejar de lado la importancia de las medidas de seguridad ante los peligros existentes en Internet. Para ello, las p\u00e1ginas deber\u00e1n estar dise\u00f1adas considerando la incorporaci\u00f3n de protocolos de comunicaci\u00f3n seguros como, por ejemplo, los desarrollados con el protocolo seguro de transferencia de hipertexto (HTTPS, Hyper Text Transfer Protocol secure) que utilizan claves y estrategias de cifrado propias de las herramientas del protocolo de capa de conexi\u00f3n segura (SSL, secure sockets layer). </p> <p>Las m\u00e1quinas que alojan las p\u00e1ginas web reciben la categor\u00eda de servidores web. Desde el punto de vista de los servidores, los requerimientos m\u00e1s relevantes son el espacio de disco necesario para poder almacenar la estructura de la p\u00e1gina web y una buena conexi\u00f3n de red para que el consumo de la unidad de procesamiento central (CPU, central processing unit ) sea bastante bajo. </p> <p>El funcionamiento de los servidores web es especial ya que, como si se tratara de un diente de sierra, tienen consumos de recursos puntuales porque podemos estar un tiempo sin peticiones y, de repente, tener una avalancha de peticiones. Esto hace que los servidores web suelan tener un n\u00famero bajo de procesos en espera. A medida que resultan necesarios, se van arrancando nuevos. </p> <p>Cabe decir que no todas las peticiones consumen el mismo, y, por ejemplo, aquellas p\u00e1ginas web que ejecuten programas de interacci\u00f3n con el usuario o requieran cifrado (HTTPS) consumen m\u00e1s recursos que otras p\u00e1ginas web con menos interacci\u00f3n. </p>"},{"location":"ArqWeb/#que-es-un-servidor-web","title":"\u00bfQu\u00e9 es un servidor web?","text":"<p>Los servidores web sirven para almacenar contenidos de Internet y facilitar su disponibilidad de forma constante y segura. Cuando visitas una p\u00e1gina web desde tu navegador, es en realidad un servidor web el que env\u00eda los componentes individuales de dicha p\u00e1gina directamente a tu ordenador. Esto quiere decir que para que una p\u00e1gina web sea accesible en cualquier momento, el servidor web debe estar permanentemente online. </p> <p></p> <p>Toda p\u00e1gina accesible en Internet necesita un servidor especial para sus contenidos web. A menudo, las grandes empresas y organizaciones cuentan con un servidor web propio para disponer sus contenidos en Intranet e Internet. Sin embargo, la mayor\u00eda de administradores recurren a los centros de datos de proveedores de alojamiento web para sus proyectos. Independientemente de si tienes un servidor web propio o de si alquilas uno externo, siempre necesitar\u00e1s un software para gestionar los datos de tu p\u00e1gina y mantenerla actualizada. En este sentido, tienes la posibilidad de elegir entre varias soluciones de software para servidores web dise\u00f1adas para diferentes aplicaciones y sistemas operativos. </p>"},{"location":"ArqWeb/#tecnologia-de-servidores-web","title":"Tecnolog\u00eda de servidores web","text":"<p>Principalmente, el software de un servidor HTTP es el encargado de proporcionar los datos para la visualizaci\u00f3n del contenido web. </p> <p>Para abrir una p\u00e1gina web, el usuario solo tiene que escribir el URL correspondiente en la barra de direcciones de su navegador web. El navegador env\u00eda una solicitud al servidor web, quien responde, por ejemplo, entregando una p\u00e1gina HTML. Esta puede estar alojada como un documento est\u00e1tico en el host o ser generada de forma din\u00e1mica, lo que significa que el servidor web tiene que ejecutar un c\u00f3digo de programa (p. ej., Java o PHP) antes de tramitar su respuesta. </p> <p>El navegador interpreta la respuesta, lo que suele generar autom\u00e1ticamente m\u00e1s solicitudes al servidor a prop\u00f3sito de, por ejemplo, im\u00e1genes integradas o archivos CSS (hojas de estilos). </p> <p></p> <p>El protocolo utilizado para la transmisi\u00f3n es HTTP (o su variante cifrada HTTPS), que se basa, a su vez, en los protocolos de red IP y TCP (y muy rara vez en UDP). Un servidor web puede entregar los contenidos simult\u00e1neamente a varios ordenadores o navegadores web. La cantidad de solicitudes (requests) y la velocidad con la que pueden ser procesadas depende, entre otras cosas, del hardware y la carga (n\u00famero de solicitudes) del host. Sin embargo, la complejidad del contenido tambi\u00e9n juega un papel importante: los contenidos web din\u00e1micos necesitan m\u00e1s recursos que los contenidos est\u00e1ticos. </p> <p></p> <p>La selecci\u00f3n del equipo adecuado para el servidor y la decisi\u00f3n de si este debe ser dedicado, virtual o en la nube, se debe hacer pensando siempre en evitar sobrecargas en el servidor. Aunque se haya encontrado un servidor web que se adapta perfectamente a las necesidades del proyecto, siempre se corre el riesgo de que se presenten fallos en \u00e9l como consecuencia de imprecisiones t\u00e9cnicas o cortes de energ\u00eda en el centro de datos del host. Aunque no es muy frecuente, durante un per\u00edodo de inactividad de este tipo (downtime), la web no estar\u00e1 disponible. </p>"},{"location":"ArqWeb/#otras-funciones-de-los-servidores-web","title":"Otras funciones de los servidores web","text":"<p>Aunque su principal funci\u00f3n es la transferencia de contenido web, muchos programas de servidor web ofrecen caracter\u00edsticas adicionales: </p> Seguridad Cifrado de la comunicaci\u00f3n entre el servidor web y el cliente v\u00eda HTTPS Autenticaci\u00f3n del usuario Autenticaci\u00f3n HTTP para \u00e1reas espec\u00edficas de una aplicaci\u00f3n web Redirecci\u00f3n Redirecci\u00f3n de una solicitud de documento por medio de Rewrite Engine Redirecci\u00f3n Almacenamiento en cach\u00e9 de documentos din\u00e1micos para la respuesta eficiente de solicitudes y para evitar una sobrecarga del servidor web Asignaci\u00f3n de cookies Env\u00edo y procesamiento de cookies HTTP <p>Adem\u00e1s del software del servidor, un host puede contener otro tipo de programas, como por ejemplo un servidor FTP para la carga de archivos o un servidor de base de datos para contenidos din\u00e1micos. En general, existen diferentes tipos de servidores web que pueden ser utilizados para numerosos prop\u00f3sitos, por ejemplo, los servidores de correo, los servidores de juegos o los servidores proxy. </p>"},{"location":"ArqWeb/#el-protocolo-http","title":"El protocolo HTTP","text":""},{"location":"ArqWeb/#historia","title":"Historia","text":"<p>El protocolo de transferencia de hipertexto (HTTP, Hypertext Transfer Protocol) es el motor que da vida a Internet, ya que es la base para la web (www, world wide web). </p> <p>Desde un punto de vista hist\u00f3rico, la web fue creada en 1989 en el Consejo Europeo para la Investigaci\u00f3n Nuclear (CERN, Centro Europeene pour la Recherche Nucl\u00e9aire), con sede en Ginebra, justo en la frontera entre Suiza y Francia. Cabe decir que este organismo dispon\u00eda (y dispone) de una amplia plantilla de cient\u00edficos de diferentes pa\u00edses de Europa que trabajan en sus aceleradores de part\u00edculas. En consecuencia, muchos equipos de trabajadores est\u00e1n integrados por miembros de nacionalidades diferentes. Adem\u00e1s, muchos de los experimentos que se realizan destacan por su complejidad y requieren a\u00f1os y a\u00f1os de planificaci\u00f3n y de construcci\u00f3n de equipamientos. </p> <p>Fue a ra\u00edz de la necesidad de disponer de m\u00faltiples grupos de cient\u00edficos repartidos por el mundo y colaborando entre ellos (envi\u00e1ndose informes, dibujos, esquemas, fotos y todo tipo de documentos) que naci\u00f3 la web. </p> <p></p> <p>Es en los inicios del protocolo HTTP, a mediados del a\u00f1o 1990, cuando encontramos la versi\u00f3n 0.9. Esta versi\u00f3n ten\u00eda como \u00fanica finalidad transferir datos por Internet en forma de p\u00e1ginas web escritas en lenguaje de marcado de hipertexto (HTML, HyperText Markup Language). A partir de la versi\u00f3n 1.0 del protocolo surgi\u00f3 la posibilidad de transferir mensajes con encabezados que describ\u00edan el contenido de los mensajes. </p>"},{"location":"ArqWeb/#versiones","title":"Versiones","text":""},{"location":"ArqWeb/#la-primera-version-http1","title":"La primera versi\u00f3n: HTTP/1","text":"<p>La historia de HTTP empez\u00f3 en 1989, cuando Tim Berners-Lee y su equipo del CERN (Suiza) empezaron a desarrollar la World Wide Web. La versi\u00f3n inicial de HTTP fue bautizada con el n\u00famero de versi\u00f3n 0.9, consist\u00eda en una sola l\u00ednea y solo permit\u00eda solicitar un archivo HTML del servidor cada vez. </p> <p>El servidor entonces no hac\u00eda m\u00e1s que transferir el archivo solicitado, de manera que esta versi\u00f3n del protocolo solo pod\u00eda manejar archivos HTML.</p>"},{"location":"ArqWeb/#el-primer-estandar-oficial-http11","title":"El primer est\u00e1ndar oficial: HTTP/1.1","text":"<p>HTTP/1.1 aclar\u00f3 ambig\u00fcedades y a\u00f1adi\u00f3 numerosas mejoras: </p> <ul> <li> <p>Una conexi\u00f3n pod\u00eda ser reutilizada, ahorrando as\u00ed el tiempo de re-abrirla repetidas veces. </p> </li> <li> <p>Enrutamiento('Pipelining' en ingl\u00e9s) se a\u00f1adi\u00f3 a la especificaci\u00f3n, permitiendo realizar una segunda petici\u00f3n de datos, antes de que fuera respondida la primera, disminuyendo de este modo la latencia de la comunicaci\u00f3n. </p> </li> <li> <p>Se permiti\u00f3 que las respuestas a peticiones, pod\u00edan ser divididas en sub-partes. </p> </li> <li> <p>La negociaci\u00f3n de contenido, incluyendo el lenguaje, el tipo de codificaci\u00f3n, o tipos, se a\u00f1adieron a la especificaci\u00f3n, permitiendo que servidor y cliente, acordasen el contenido m\u00e1s adecuado a intercambiarse. </p> </li> <li> <p>Gracias a la cabecera, Host, pudo ser posible alojar varios dominios en la misma direcci\u00f3n IP. </p> </li> </ul>"},{"location":"ArqWeb/#un-protocolo-de-mayor-rendimiento-http2","title":"Un protocolo de mayor rendimiento HTTP/2","text":"<p>Seg\u00fan pasaban los a\u00f1os, las p\u00e1ginas web se volv\u00edan cada vez m\u00e1s amplias y complejas. Para cargar una web moderna en el navegador, este tiene que solicitar muchos megabytes de datos y enviar hasta cien solicitudes HTTP. HTTP/1.1 est\u00e1 pensado para procesar solicitudes una tras otra en una misma conexi\u00f3n, de manera que cuanto m\u00e1s compleja sea una p\u00e1gina web, m\u00e1s tardar\u00e1 en cargarse y mostrarse. </p> <p>Por esta raz\u00f3n, Google desarroll\u00f3 un nuevo y experimental protocolo, el SPDY o Speedy, que despert\u00f3 un gran inter\u00e9s entre los desarrolladores y permiti\u00f3 que en 2015 se publicara la versi\u00f3n HTTP/2 del protocolo. Este est\u00e1ndar incluye m\u00faltiples mejoras que tienen como objetivo acelerar la carga de las p\u00e1ginas web. </p> <p>La versi\u00f3n HTTP/2 se extendi\u00f3 r\u00e1pidamente y las p\u00e1ginas web con mucho tr\u00e1fico fueron de las primeras en adoptarla. Actualmente (con fecha de enero de 2020), seg\u00fan W3Techs, un 42 % de las p\u00e1ginas web utilizan la versi\u00f3n HTTP/2. </p> <p></p>"},{"location":"ArqWeb/#el-futuro-http3","title":"El futuro: HTTP/3","text":"<p>Un punto d\u00e9bil de todas las versiones de HTTP usadas hasta ahora es el protocolo de control de transmisi\u00f3n (TCP) en el que se basan. Este protocolo requiere que el receptor de cada paquete de datos confirme la recepci\u00f3n antes de que pueda enviarse el siguiente paquete. De este modo, basta con que se pierda un paquete para que todos los dem\u00e1s tengan que esperar a que dicho paquete sea transmitido de nuevo. </p> <p>Para evitarlos, la nueva versi\u00f3n HTTP/3 no funcionar\u00e1 con TCP, sino con UDP, que no aplica este tipo de medidas correctivas. A partir de UDP, se ha creado el protocolo QUIC (Quick UDP Internet Connections), que ser\u00e1 la base de HTTP/3.</p>"},{"location":"ArqWeb/#funcionamiento-del-protocolo-http","title":"Funcionamiento del protocolo HTTP","text":"<p>Ya hemos comentado que el protocolo HTTP tiene un funcionamiento bastante sencillo basado en el env\u00edo de mensajes entre cliente y servidor. </p> <p>Gr\u00e1ficamente podemos resumir el proceso de comunicaci\u00f3n HTTP como sigue: </p> <p></p> <ol> <li> <p>Un usuario accede a una URL, seleccionando un enlace de un documento HTML o introduci\u00e9ndola directamente en el campo correspondiente del cliente Web. </p> </li> <li> <p>El cliente Web descodifica la URL, separando sus diferentes partes: el protocolo de acceso, la direcci\u00f3n DNS o IP del servidor, el posible puerto opcional (el valor por defecto es 80) y el objeto requerido del servidor. <code>http://direccion[:puerto][path]</code></p> <p><code>Ejemplo: http://www.miweb.com/documento.html</code></p> </li> <li> <p>Se abre una conexi\u00f3n TCP/IP con el servidor, llamando al puerto TCP correspondiente. En ese momento, se realiza la petici\u00f3n HTTP. Para ello, se env\u00eda el comando necesario (GET, POST, HEAD,...), la direcci\u00f3n del objeto requerido (el contenido de la URL que sigue a la direcci\u00f3n del servidor), la versi\u00f3n del protocolo HTTP empleada y un conjunto variable de informaci\u00f3n, que incluye datos sobre las capacidades del navegador (browser), datos opcionales para el servidor, etc. </p> </li> <li> <p>El servidor devuelve la respuesta al cliente. Consiste en un c\u00f3digo de estado y el tipo de dato MIME de la informaci\u00f3n de retorno, seguido de la propia informaci\u00f3n. </p> </li> <li> <p>Se cierra la conexi\u00f3n TCP. Este proceso se repite en cada acceso al servidor HTTP. Por ejemplo, si se recoge un documento HTML en cuyo interior est\u00e1n insertadas 2 im\u00e1genes y 1 v\u00eddeo, el proceso anterior se repite cuatro veces, una para el documento HTML y tres m\u00e1s para los recursos (la dos im\u00e1genes y el v\u00eddeo). </p> </li> </ol>"},{"location":"ArqWeb/#comandos-o-metodos-http","title":"Comandos o m\u00e9todos HTTP","text":"<p>HTTP define un conjunto de m\u00e9todos de petici\u00f3n para indicar la acci\u00f3n que se desea realizar para un recurso determinado. </p> <p></p> <p>El est\u00e1ndar HTTP/1.0 recoge \u00fanicamente tres comandos, que representan las operaciones de recepci\u00f3n y env\u00edo de informaci\u00f3n y chequeo de estado: </p> <ul> <li> <p>GET: se utiliza para solicitar cualquier tipo de informaci\u00f3n o recurso al servidor. Cada vez que se pulsa sobre un enlace o se teclea directamente a una URL se usa este comando. Como resultado, el servidor HTTP enviar\u00e1 el recurso correspondiente. </p> </li> <li> <p>HEAD: se utiliza para solicitar informaci\u00f3n sobre el recurso: su tama\u00f1o, su tipo, su fecha de modificaci\u00f3n\u2026 Es usado por los gestores de cach\u00e9s de p\u00e1ginas o los servidores proxy, para conocer cu\u00e1ndo es necesario actualizar la copia que se mantiene del recurso. Con HEAD se podr\u00e1 comprobar la \u00faltima fecha de modificaci\u00f3n de un recurso antes de traer una nueva copia del mismo. </p> </li> <li> <p>POST: sirve para enviar informaci\u00f3n al servidor, por ejemplo, los datos contenidos en un formulario. El servidor pasar\u00e1 esta informaci\u00f3n a un proceso encargado de su tratamiento. </p> </li> </ul> <p>La versi\u00f3n 1.1 del protocolo incorpora unos pocos comandos m\u00e1s como son: OPTIONS, PUT, DELETE, TRACE y CONNECT. Veamos algunos de ellos: </p> <ul> <li> <p>OPTIONS: Devuelve los m\u00e9todos HTTP que el servidor soporta para una URL espec\u00edfica. Esto puede ser utilizado para comprobar la funcionalidad de un servidor web mediante petici\u00f3n en lugar de un recurso espec\u00edfico. </p> </li> <li> <p>DELETE: sirve para eliminar un recurso especificado en la URL, aunque pocas veces sera permitido por un servidor web. </p> </li> <li> <p>TRACE: comando que permite hacer un sondeo para saber todos los dispositivos de la red por los que pasa nuestra petici\u00f3n. As\u00ed podremos descubrir si la petici\u00f3n pasa a trav\u00e9s dispositivos intermedios o proxys antes de llegar al servidor Web. </p> </li> <li> <p>PUT: puede verse como el comando inverso a GET. Nos permite escribir datos en el servidor o, lo que es lo mismo, poner un recurso en la URL que se especifique. Si el recurso no existe lo crea sino lo reemplaza. La diferencia con POST puede ser algo confusa; mientras que POST est\u00e1 orientado a la creaci\u00f3n de nuevos contenidos, PUT est\u00e1 m\u00e1s orientado a la actualizaci\u00f3n de los mismos (aunque tambi\u00e9n podr\u00eda crearlos). </p> </li> </ul> <p>HTTP/2 no incluye m\u00e9todos nuevos. </p>"},{"location":"ArqWeb/#ejemplo-de-peticion-y-respuesta","title":"Ejemplo de petici\u00f3n y respuesta","text":"<p>Una solicitud HTTP es un conjunto de l\u00edneas que el navegador env\u00eda al servidor. Incluye: </p> <ul> <li> <p>El recurso solicitado, el m\u00e9todo que se aplicar\u00e1 y la versi\u00f3n del protocolo utilizada. </p> </li> <li> <p>Los campos del encabezado de solicitud: es un conjunto de l\u00edneas opcionales que permiten aportar informaci\u00f3n adicional sobre la solicitud y/o el cliente (navegador, sistema operativo, etc.). Cada una de estas l\u00edneas est\u00e1 formada por un nombre que describe el tipo de encabezado, seguido de dos puntos (:) y el valor del encabezado. </p> </li> <li> <p>El cuerpo de la solicitud: es un conjunto de l\u00edneas opcionales que deben estar separadas de las l\u00edneas precedentes por una l\u00ednea en blanco y que, por ejemplo, permiten la transmisi\u00f3n de datos al servidor de un formulario a trav\u00e9s del m\u00e9todo POST. </p> </li> </ul> <p></p> <p>La sintaxis de una respuesta HTTP es un conjunto de l\u00edneas que el servidor env\u00eda al navegador. Incluye: </p> <p></p> <ul> <li> <p>Una l\u00ednea de estado donde figura el versi\u00f3n del protocolo usada, un c\u00f3digo de estado/error y un texto con el significado de dicho c\u00f3digo. </p> </li> <li> <p>Los posibles c\u00f3digos de estado se identifican con n\u00fameros de tres cifras y se clasifican en cinco grupos seg\u00fan sean informativos (1xx), de \u00e9xito en la solicitud (2xx), para redireccionar la solicitud (3xx), por error generado en el cliente (4xx) o bien por errores generados en el servidor (5xx) \u2192 C\u00f3digos de estado/error </p> </li> <li> <p>Los campos del encabezado de la respuesta. Conjunto de lineas opcionales que aportan informaci\u00f3n adicional sobre la respuesta y/o el servidor. </p> </li> <li> <p>El cuerpo de la respuesta que contiene el recurso (objeto) solicitado</p> </li> </ul>"},{"location":"ArqWeb/#cabeceras-http","title":"Cabeceras HTTP","text":"<p>Las cabeceras HTTP son los par\u00e1metros que se env\u00edan en una petici\u00f3n o respuesta HTTP al cliente o al servidor para proporcionar informaci\u00f3n esencial sobre la transacci\u00f3n en curso. Estas cabeceras proporcionan informaci\u00f3n mediante la sintaxis 'Cabecera: Valor' y son enviadas autom\u00e1ticamente por el navegador o el servidor Web.  \u2192 Cabeceras HTTP </p>"},{"location":"ArqWeb/#tipos-mime","title":"Tipos MIME","text":"<p>El protocolo HTTP fue dise\u00f1ado para transportar por red ficheros en formato ASCII, formados por texto plano. Con el paso del tiempo, surgi\u00f3 la necesidad de incluir diferentes tipos de ficheros no ASCII en las aplicaciones por Internet (im\u00e1genes, v\u00eddeos, sonidos, etc.) y, como consecuencia de ello, fue necesario buscar una soluci\u00f3n: hab\u00eda que transformar estos formatos a tipo ASCII (u otros juegos de caracteres compatibles) para su correcta recepci\u00f3n en el navegador web. </p> <p>Este problema ya hab\u00eda surgido en las aplicaciones de correo electr\u00f3nico, cuando se necesit\u00f3 enviar por MAIL ficheros no formados por texto plano, y por tanto, no compatibles con los juegos de caracteres permitidos. </p> <p>Para solucionar este problema se crearon los tipos MIME (Multipurpose Internet Mail Extensions), especificaciones para dar formato a mensajes no-ASCII, de forma que pudieran ser enviados por Internet e interpretados correctamente por los programas de correo locales. </p> <p>Tipos de medios de Internet, previamente conocido como \"tipos \" o \"tipos de contenido\", es un est\u00e1ndar dise\u00f1ado para indicar el tipo de informaci\u00f3n que presenta un archivo o un conjunto de datos. En , este identificador puede ser \u00fatil para conocer el tipo de un archivo antes de descarcarglo y tener acceso a \u00e9l. Es una buena p\u0155actica proveer informaci\u00f3n de tipos de medios siempre que sea posible, como en el caso de los elementos que cuentan con atributos como type, enctype, formenctype y accept. </p> <p></p> <p>Todo identificador de tipo de medio de Internet debe ajustarse al siguiente formato: </p> <p>As\u00ed pues, el \"tipo\" y el \"subtipo\" deben estar presentes en cualquier tipo de medio de Internet. En la lista siguiente hay algunos ejemplos que contienen cada una da las partes delineadas anteriormente. </p>"},{"location":"ArqWeb/#https","title":"HTTPS","text":"<p>El Protocolo seguro de transferencia de hipertexto (en ingl\u00e9s, Hypertext Transfer Protocol Secure o HTTPS) es un protocolo de aplicaci\u00f3n basado en el protocolo HTTP, destinado a la transferencia segura de datos de hipertexto, es decir, es la versi\u00f3n segura de HTTP. </p> <p>La web es insegura por naturaleza. Cuando se dise\u00f1aron los protocolos en los que est\u00e1 basada (TCP/IP) no se tuvieron en cuenta muchos de los problemas que tiene la Internet moderna. Y el protocolo HTTP, para transferir p\u00e1ginas web, no a\u00f1adi\u00f3 nada al respecto tampoco hasta mucho despu\u00e9s, con la introducci\u00f3n del protocolo HTTPS (la \"ese\" es de \"Seguro\") all\u00e1 por 1994 por la empresa Netscape. El protocolo HTTPS original utilizaba SSL (Secure Sockets Layer) como protocolo seguro de intercambio de claves y cifrado, pero en la actualidad est\u00e1 obsoleto y se emplea TLS (Transport Layer Security, que va por su versi\u00f3n 1.3). El est\u00e1ndar de HTTP sobre TLS, en realidad, no se configur\u00f3 hasta mayo del a\u00f1o 2000. </p> <p>Tradicionalmente, los navegadores le han indicado a sus usuarios que se estaban conectando a un sitio seguro utilizando un iconito, generalmente uno con un candado. </p> <p>Seg\u00fan el navegador el aspecto cambia un poco, pero todos muestran el proverbial \"candadito\" al lado de la direcci\u00f3n: </p> <p></p> <p>Es decir, lo importante aqu\u00ed es que hasta ahora los navegadores consideran HTTP como la norma, y HTTPS como la excepci\u00f3n, y por eso lo marcan de esta manera. </p>"},{"location":"ArqWeb/#funcionamiento-de-https","title":"Funcionamiento de HTTPS","text":""},{"location":"ArqWeb/#servidores-web-apache-vs-nginx","title":"Servidores web: Apache vs Nginx","text":"<p>Cuando vamos a poner en marcha un servidor web, lo primero que necesitamos es utilizar un sistema operativo sobre el cual vamos a ejecutar los diferentes servicios, sistema operativo que en m\u00e1s del 95% de las ocasiones suele ser un sistema Linux, as\u00ed como un software que se encargue de la gesti\u00f3n de las bases de datos, MySQL habitualmente, y un software para gestionar el contenido din\u00e1micos de las webs, que suele ser PHP. Adem\u00e1s de este software esencial, otra de las partes m\u00e1s importantes del servidor suele ser la elecci\u00f3n del servidor web, y aqu\u00ed es donde entran las dudas. </p> <p>Cuando buscamos montar una web podemos elegir una gran cantidad de servidores web diferentes, desde Apache y Nginx, los m\u00e1s conocidos y utilizados con m\u00e1s de un 85% de uso entre ambos, hasta otros servidores menos conocidos como Microsoft IIS (si usamos un servidor Windows), LiteSpeed, Node.js, etc. </p> <p>Los dos servidores m\u00e1s utilizados para montar p\u00e1ginas web hoy en d\u00eda son Apache y Nginx, sin embargo, es imposible decir que uno es mejor que otro ya que cada uno de ellos tiene sus propias fortalezas y debilidades y puede mejorar mejor bajo ciertas circunstancias o simplemente ser m\u00e1s sencillo de utilizar. </p> <p>Nginx est\u00e1 orientado a mejorar el rendimiento, soportando mayores cargas de tr\u00e1fico y usuarios que Apache (Problema C10K), adem\u00e1s de ofrecer otras funcionalidades como hacer de proxy. En sus or\u00edgenes era especialmente eficiente ofreciendo contenido est\u00e1tico.</p> <p> </p> <p>Despu\u00e9s de ser lanzado, Nginx fue usado principalmente para servir archivos est\u00e1ticos y como un balanceador de carga o proxy inverso en frente de instalaciones Apache.</p> <p>Ejemplos de servicios de despliegue de p\u00e1ginas est\u00e1ticas:</p> <ul> <li>Netlify</li> <li>Surge</li> <li>GitHub Pages</li> <li>GitLab Pages</li> <li>Firebase</li> <li>Vercel</li> <li>Neocities</li> </ul> <p>Mientras evolucionaba la red, y la necesidad de exprimir hasta la \u00faltima gota de la velocidad y eficiencia de uso de hardware con este, m\u00e1s sitios empezaron a reemplazar Apache con Nginx por completo, gracias a un software mucho m\u00e1s maduro.</p> <p></p>"},{"location":"ArqWeb/#razones-para-usar-nginx","title":"Razones para usar Nginx","text":"<ol> <li> <p>Es ligero</p> <p>Nginx reduce el consumo de RAM. </p> </li> <li> <p>Es multiplataforma y f\u00e1cil de instalar </p> <p>La mayor\u00eda de las grandes distribuciones de GNU/Linux, tienen Nginx en sus repositorios. </p> </li> <li> <p>\u00a1Se puede usar junto a Apache! </p> <p>S\u00ed, como lo lees, algunas empresas solo usan Nginx para servir contenido est\u00e1tico y Apache para el contenido din\u00e1mico. </p> </li> <li> <p>Cach\u00e9</p> <p>Puedes usar Nginx como cach\u00e9, con algo de configuraci\u00f3n, permitiendo mejorar la eficiencia de tu aplicaci\u00f3n sin tocar la programaci\u00f3n de la misma. </p> </li> <li> <p>Balanceador de carga </p> <p>Este servidor web puede funcionar como balanceador de carga, distribuyendo el tr\u00e1fico entre varios servidores, permitiendo mayor escalabilidad. </p> </li> <li> <p>Soporte comunitario y profesional </p> <p>Nginx, Inc est\u00e1 detr\u00e1s del desarrollo de Nginx, adem\u00e1s de la comunidad en general, permitiendo tener un soporte tanto profesional como comunitario. </p> </li> <li> <p>Compatibilidad con las aplicaciones web m\u00e1s populares</p> <p>Nginx es compatible con una gran cantidad de CMS existentes en el mercado, y hay un muchos tutoriales y documentaci\u00f3n para instalar estos bajo Nginx, como por ejemplo: Wordpress, Joomla, Drupal, phpBB \u00a1y m\u00e1s! </p> </li> </ol>"},{"location":"P1.1/","title":"Pr\u00e0ctica 2.1 \u2013 Instalaci\u00f3n y configuraci\u00f3n de servidor web Nginx","text":""},{"location":"P1.1/#instalacion-servidor-web-nginx","title":"Instalaci\u00f3n servidor web Nginx","text":"<p>Para instalar el servidor nginx en nuestra Debian, primero actualizamos los repositorios y despu\u00e9s instalamos el paquete correspondiente: </p> <pre><code>sudo apt update\n\nsudo apt install nginx\n</code></pre> <p>Comprobamos que nginx se ha instalado y que est\u00e1 funcionando correctamente: </p> <pre><code>systemctl status nginx\n</code></pre> <p>Info</p> <p>Esta pr\u00e1ctica se ha hecho con Nginx 1.18.0</p>"},{"location":"P1.1/#creacion-de-las-carpeta-del-sitio-web","title":"Creaci\u00f3n de las carpeta del sitio web","text":"<p>Igual que ocurre en Apache, todos los archivos que formar\u00e1n parte de un sitio web que servir\u00e1 nginx se organizar\u00e1n en carpetas. Estas carpetas, t\u00edpicamente est\u00e1n dentro de <code>/var/www</code>. </p> <p>As\u00ed pues, vamos a crear la carpeta de nuestro sitio web o dominio: </p> <p><pre><code>sudo mkdir -p /var/www/nombre_web/html\n</code></pre> Donde el nombre de dominio puede ser la palabra que quer\u00e1is, sin espacios. </p> <p>Ah\u00ed, dentro de esa carpeta html, deb\u00e9is clonar el siguiente repositorio:</p> <p><code>https://github.com/cloudacademy/static-website-example</code></p> <p>Adem\u00e1s, haremos que el propietario de esta carpeta y todo lo que haya dentro sea el usuario <code>www-data</code>, t\u00edpicamente el usuario del servicio web.</p> <pre><code>sudo chown -R www-data:www-data /var/www/nombre_web/html\n</code></pre> <p>Y le daremos los permisos adecuados para que no nos de un error de acceso no autorizado al entrar en el sitio web: </p> <p><pre><code>sudo chmod -R 755 /var/www/nombre_web\n</code></pre> Para comprobar que el servidor est\u00e1 funcionando y sirviendo p\u00e1ginas correctamente, pod\u00e9is acceder desde vuestro cliente a: </p> <p><pre><code>http://IP-maq-virtual\n</code></pre> Y os deber\u00e1 aparecer algo as\u00ed: </p> <p></p> <p>Lo que demuestra que todo es correcto hasta ahora. </p>"},{"location":"P1.1/#configuracion-de-servidor-web-nginx","title":"Configuraci\u00f3n de servidor web NGINX","text":"<p>En Nginx hay dos rutas importantes. La primera de ellas es <code>sites-available</code>, que contiene los archivos de configuraci\u00f3n de los hosts virtuales o bloques disponibles en el servidor. Es decir, cada uno de los sitios webs que alberga el servido. La otra es <code>sites-enabled</code>, que contiene los archivos de configuraci\u00f3n de los sitios habilitados, es decir, los que funcionan en ese momento. </p> <p>Dentro de <code>sites-available</code> hay un archivo de configuraci\u00f3n por defecto (default), que es la p\u00e1gina que se muestra si accedemos al servidor sin indicar ning\u00fan sitio web o cuando el sitio web no es encontrado en el servidor (debido a una mala configuraci\u00f3n por ejemplo). Esta es la p\u00e1gina que nos ha aparecido en el apartado anterior. </p> <p>Para que Nginx presente el contenido de nuestra web, es necesario crear un bloque de servidor con las directivas correctas. En vez de modificar el archivo de configuraci\u00f3n predeterminado directamente, crearemos uno nuevo en <code>/etc/nginx/sites-available/nombre_web</code>: </p> <pre><code>sudo nano /etc/nginx/sites-available/vuestro_dominio \n</code></pre> <p>Y el contenido de ese archivo de configuraci\u00f3n: </p> <pre><code>server {\n        listen 80;\n        listen [::]:80;\n        root /ruta/absoluta/archivo/index;\n        index index.html index.htm index.nginx-debian.html;\n        server_name nombre_web;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p>Aqu\u00ed la directiva root debe ir seguida de la ruta absoluta absoluta d\u00f3nde se encuentre el archivo index.html de nuestra p\u00e1gina web, que se encuentra entre todos los que hab\u00e9is descomprimido. </p> <p>Aqu\u00ed ten\u00e9is un ejemplo de un sitio webs con su ruta (directorios que hay) antes del archivo index.html: </p> <p></p> <p>Info</p> <p>Ruta \u2192 /var/www/ejemplo2/html/2016_soft_landing</p> <p>Y crearemos un archivo simb\u00f3lico entre este archivo y el de sitios que est\u00e1n habilitados, para que se d\u00e9 de alta autom\u00e1ticamente. </p> <pre><code>sudo ln -s /etc/nginx/sites-available/nombre_web /etc/nginx/sites-enabled/\n</code></pre> <p>Y reiniciamos el servidor para aplicar la configuraci\u00f3n: </p> <pre><code>sudo systemctl restart nginx\n</code></pre>"},{"location":"P1.1/#comprobaciones","title":"Comprobaciones","text":""},{"location":"P1.1/#comprobacion-del-correcto-funcionamiento","title":"Comprobaci\u00f3n del correcto funcionamiento","text":"<p>Como a\u00fan no poseemos un servidor DNS que traduzca los nombres a IPs, debemos hacerlo de forma manual. Vamos a editar el archivo <code>/etc/hosts</code> de nuestra m\u00e1quina anfitriona para que asocie la IP de la m\u00e1quina virtual, a nuestro <code>server_name</code>.</p> <p>Este archivo, en Linux, est\u00e1 en: <code>/etc/hosts</code></p> <p>Y en Windows: <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></p> <p>Y deberemos a\u00f1adirle la l\u00ednea:</p> <p><code>192.168.X.X nombre_web</code></p> <p>donde deb\u00e9is sustituir la IP por la que tenga vuestra m\u00e1quina virtual.</p>"},{"location":"P1.1/#comprobar-registros-del-servidor","title":"Comprobar registros del servidor","text":"<p>Comprobad que las peticiones se est\u00e1n registrando correctamente en los archivos de logs, tanto las correctas como las err\u00f3neas: </p> <ul> <li> <p><code>/var/log/nginx/access.log</code>: cada solicitud a su servidor web se registra en este archivo de registro, a menos que Nginx est\u00e9 configurado para hacer algo diferente. </p> </li> <li> <p><code>/var/log/nginx/error.log</code>: cualquier error de Nginx se asentar\u00e1 en este registro.</p> </li> </ul> <p>Info</p> <p>Si no os aparece nada en los logs, podr\u00eda pasar que el navegador ha cacheado la p\u00e1gina web y que, por tanto, ya no est\u00e1 obteniendo la p\u00e1gina del navegador sino de la propia memoria. Para solucionar esto, pod\u00e9is acceder con el modo privado del navegador y ya os deber\u00eda registrar esa actividad en los logs.</p>"},{"location":"P1.1/#ftp","title":"FTP","text":"<p>Si queremos tener varios dominios o sitios web en el mismo servidor nginx (es decir, que tendr\u00e1n la misma IP) debemos repetir todo el proceso anterior con el nuevo nombre de dominio que queramos configurar.</p>"},{"location":"P1.1/#como-transferir-archivos-desde-nuestra-maquina-localanfitrion-a-nuestra-maquina-virtual-debianservidor-remoto","title":"\u00bfC\u00f3mo transferir archivos desde nuestra m\u00e1quina local/anfitri\u00f3n a nuestra m\u00e1quina virtual Debian/servidor remoto?","text":"<p>A d\u00eda de hoy el proceso m\u00e1s sencillo y seguro es a trav\u00e9s de Github como hemos visto antes. No obstante, el curr\u00edculum de la Conseller\u00eda d'Educaci\u00f3 me obliga a ense\u00f1aros un m\u00e9todo un tanto obsoleto a d\u00eda de hoy, as\u00ed que vamos a ello, os presento al FTP.</p> <p>El FTP es un protocolo de transferencia de archivos entre sistemas conectados a una red TCP. Como su nombre indica, se trata de un protocolo que permite transferir archivos directamente de un dispositivo a otro. Actualmente, es un protocolo que poco a poco va abandon\u00e1ndose, pero ha estado vigente m\u00e1s de 50 a\u00f1os.</p> <p>El protocolo FTP tal cual es un protocolo inseguro, ya que su informaci\u00f3n no viaja cifrada. Sin embargo, en 2001 esto se solucion\u00f3 con el protocolo SFTP, que le a\u00f1ade una capa SSH para hacerlo m\u00e1s seguro y privado.</p> <p>SFTP no es m\u00e1s que el mismo protocolo FTP pero implementado por un canal seguro. Son las siglas de SSH File Transfer Protocol y consiste en una extensi\u00f3n de Secure Shell Protocol (SSH) creada para poder hacer transmisiones de archivos.</p> <p>La seguridad que nos aporta SFTP es importante para la transferencia de archivos porque, si no disponemos de ella, los archivos viajar\u00e1n tal cual por la red, sin ning\u00fan tipo de encriptaci\u00f3n. As\u00ed pues, usando FTP tradicional, si alg\u00fan agente consigue escuchar las transferencias, podr\u00eda ocurrir que la informaci\u00f3n quedase al descubierto. Esto ser\u00eda especialmente importante si los archivos que subimos contienen informaci\u00f3n confidencial o datos personales.</p> <p>Dado que usar SFTP aporta mayor seguridad a las transmisiones, es recomendable utilizarlo, m\u00e1s a\u00fan sabiendo que realmente no hay mucha dificultad en establecer las conexiones por el protocolo seguro.</p>"},{"location":"P1.1/#configurar-servidor-sftp-en-debian","title":"Configurar servidor SFTP en Debian","text":"<p>En primer lugar, lo instalaremos desde los repositorios:</p> <p><pre><code>sudo apt-get update\nsudo apt-get install vsftpd\n</code></pre> Ahora vamos a crear una carpeta en nuestro home en Debian:</p> <pre><code>mkdir /home/nombre_usuario/ftp\n</code></pre> <p>En la configuraci\u00f3n de vsftpd indicaremos que este ser\u00e1 el directorio al cual vsftpd se cambia despu\u00e9s de conectarse el usuario.</p> <p>Ahora vamos a crear los certificados de seguridad necesarios para aportar la capa de cifrado a nuestra conexi\u00f3n (algo parecido a HTTPS)</p> <pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem\n</code></pre> <p>Y una vez realizados estos pasos, procedemos a realizar la configuraci\u00f3n de vsftpd propiamente dicha. Se trata, con el editor de texto que m\u00e1s os guste, de editar el archivo de configuraci\u00f3n de este servicio, por ejemplo con nano:</p> <pre><code>sudo nano /etc/vsftpd.conf\n</code></pre> <p>En primer lugar, buscaremos las siguientes l\u00edneas del archivo y las eliminaremos por completo:</p> <pre><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n</code></pre> <p>Tras ello, a\u00f1adiremos estas l\u00edneas en su lugar</p> <pre><code>rsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\nlocal_root=/home/nombre_usuario/ftp\n</code></pre> <p>Y, tras guardar los cambios, reiniciamos el servicio para que coja la nueva configuraci\u00f3n:</p> <pre><code>sudo systemctl restart --now vsftpd\n</code></pre> <p>Tarea</p> <p>Configura un nuevo dominio (nombre web) para el .zip con el nuevo sitio web que os proporcionado. En este caso deb\u00e9is transferir los archivos a vuestra Debian mediante SFTP.</p> <p>Tras acabar esta configuraci\u00f3n, ya podremos acceder a nuestro servidor mediante un cliente FTP adecuado, como por ejemplo Filezilla de dos formas, a saber:</p> <ul> <li> <p>Mediante el puerto por defecto del protocolo inseguro FTP, el 21, pero utilizando certificados que cifran el intercambio de datos convirti\u00e9ndolo as\u00ed en seguro</p> </li> <li> <p>Haciendo uso del protocolo SFTP, dedicado al intercambio de datos mediante una conexi\u00f3n similar a SSH, utilizando de hecho el puerto 22.</p> </li> </ul> <p>Tras descargar el cliente FTP en nuestro ordenador, introducimos los datos necesarios para conectarnos a nuestro servidor FTP en Debian:</p> <p></p> <ul> <li>La IP de Debian (recuadro rojo)</li> <li>El nombre de usuario de Debian (recuadro verde)</li> <li>La contrase\u00f1a de ese usuario (recuadro fucsia)</li> <li>El puerto de conexi\u00f3n, que ser\u00e1 el 21 para conectarnos utilizando los certificados generados previamente (recuadro marr\u00f3n)</li> </ul> <p>Tras darle al bot\u00f3n de Conexi\u00f3n r\u00e1pida, nos saltar\u00e1 un aviso a prop\u00f3sito del certificado, le damos a aceptar puesto que no entra\u00f1a peligro ya que lo hemos genrado nosotros mismos:</p> <p></p> <p>Nos conectaremos directamente a la carpeta que le hab\u00edamos indicado en el archivo de configuraci\u00f3n <code>/home/raul/ftp</code></p> <p>Una vez conectados, buscamos la carpeta de nuestro ordenador donde hemos descargado el .zip (en la parte izquierda de la pantalla) y en la parte derecha de la pantalla, buscamos la carpeta donde queremos subirla. Con un doble click o utilizando bot\u00f3n derecho &gt; subir, la subimos al servidor.</p> <p></p> <p>Si lo que quisi\u00e9ramos es conectarnos por SFTP, exactamente igual de v\u00e1lido, har\u00edamos:</p> <p></p> <p>Fij\u00e1os que al utilizar las claves de SSH que ya estamos utilizando desde la Pr\u00e1ctica 1, no se debe introducir la contrase\u00f1a, \u00fanicamente el nombre de usuario.</p> <p>Puesto que nos estamos conectando usando las claves FTP, nos sale el mismo aviso que nos sal\u00eda al conectarnos por primera vez por SSH a nuestra Debian, que aceptamos porque sabemos que no entra\u00f1a ning\u00fan peligro en este caso:</p> <p></p> <p></p> <p>Y vemos que al ser una especie de conexi\u00f3n SSH, nos conecta al <code>home</code> del usuario, en lugar de a la carpeta <code>ftp</code>. A partir de aqu\u00ed ya proceder\u00edamos igual que en el otro caso.</p> <p>Recordemos que debemos tener nuestro sitio web en la carpeta <code>/var/www</code> y darle los permisos adecuados, de forma similiar a c\u00f3mo hemos hecho con el otro sitio web. </p> <p>El comando que nos permite descomprimir un .zip en un directorio concreto es:</p> <pre><code>unzip archivo.zip -d /nombre/directorio\n</code></pre> <p>Si no tuvier\u00e1is unzip instalado, lo instal\u00e1is:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install unzip\n</code></pre>"},{"location":"P1.1/#cuestiones-finales","title":"Cuestiones finales","text":"<p>Cuesti\u00f3n 1</p> <p>\u00bfQu\u00e9 pasa si no hago el link simb\u00f3lico entre <code>sites-available</code> y <code>sites-enabled</code> de mi sitio web?</p> <p>Cuesti\u00f3n 2</p> <p>\u00bfQu\u00e9 pasa si no le doy los permisos adecuados a <code>/var/www/nombre_web</code>? </p>"},{"location":"P1.1/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Configuraci\u00f3n correcta del servidor web 1 puntos Comprobaci\u00f3n del correcto funcionamento del primer sitio web 3 puntos Configuraci\u00f3n correcta y comprobaci\u00f3n del funcionamento de una segunda web 2 puntos Cuestiones finales 2 puntos Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 2 puntos"},{"location":"P1.2/","title":"Pr\u00e1ctica 2.2 \u2013 Autenticaci\u00f3n en Nginx","text":""},{"location":"P1.2/#requisitos-antes-de-comenzar-la-practica","title":"Requisitos antes de comenzar la pr\u00e1ctica","text":"<p>Atenci\u00f3n, muy importante antes de empezar</p> <ul> <li>La pr\u00e1ctica 2.1 ha de estar funcionando correctamente</li> <li>No empezar la pr\u00e1ctica antes de tener la 2.1 funcionando y comprobada</li> </ul>"},{"location":"P1.2/#introduccion","title":"Introducci\u00f3n","text":"<p>En el contexto de una transacci\u00f3n HTTP, la autenticaci\u00f3n de acceso b\u00e1sica es un m\u00e9todo dise\u00f1ado para permitir a un navegador web, u otro programa cliente, proveer credenciales en la forma de usuario y contrase\u00f1a cuando se le solicita una p\u00e1gina al servidor. </p> <p>La autenticaci\u00f3n b\u00e1sica, como su nombre lo indica, es la forma m\u00e1s b\u00e1sica de autenticaci\u00f3n disponible para las aplicaciones Web. Fue definida por primera vez en la especificaci\u00f3n HTTP en s\u00ed y no es de ninguna manera elegante, pero cumple su funci\u00f3n. </p> <p>Este tipo de autenticaci\u00f3n es el tipo m\u00e1s simple disponible pero adolece de importantes problemas de seguridad que no la hacen recomendable en muchas situaciones. No requiere el uso ni de cookies, ni de identificadores de sesi\u00f3n, ni de p\u00e1gina de ingreso. </p>"},{"location":"P1.2/#paquetes-necesarios","title":"Paquetes necesarios","text":"<p>Para esta pr\u00e1ctica podemos utilizar la herramienta openssl para crear las contrase\u00f1as. </p> <p>En primer lugar debemos comprobar si el paquete est\u00e1 instalado: </p> <pre><code>dpkg -l | grep openssl\n</code></pre> <p>Y si no lo estuviera, instalarlo. </p>"},{"location":"P1.2/#creacion-de-usuarios-y-contrasenas-para-el-acceso-web","title":"Creaci\u00f3n de usuarios y contrase\u00f1as para el acceso web","text":"<p>Crearemos un archivo oculto llamado \u201c.htpasswd\u201d en el directorio de configuraci\u00f3n <code>/etc/nginx</code> donde guardar nuestros usuarios y contrase\u00f1as (la -c es para crear el archivo): </p> <pre><code>sudo sh -c \"echo -n 'vuestro_nombre:' &gt;&gt; /etc/nginx/.htpasswd\"\n</code></pre> <p>Ahora crearemos un pasword cifrado para el usuario: </p> <pre><code>sudo sh -c \"openssl passwd -apr1 &gt;&gt; /etc/nginx/.htpasswd\"\n</code></pre> <p>Este proceso se podr\u00e1 repetir para tantos usuarios como haga falta. </p> <ul> <li>Crea dos usuarios, uno con tu nombre y otro con tu primer apellido</li> <li>Comprueba que el usuario y la contrase\u00f1a aparecen cifrados en el fichero: </li> </ul> <pre><code>cat /etc/nginx/.htpasswd\n</code></pre>"},{"location":"P1.2/#configurando-el-servidor-nginx-para-usar-autenticacion-basica","title":"Configurando el servidor Nginx para usar autenticaci\u00f3n b\u00e1sica","text":"<p>Editaremos la configuraci\u00f3n del server block sobre el cual queremos aplicar la restricci\u00f3n de acceso. Utilizaremos para esta autenticaci\u00f3n el sitio web de Perfect Learn:  </p> <p>Info</p> <p>Recuerda que un server block es cada uno de los dominios (<code>server {...}</code> dentro del archivo de configuraci\u00f3n) de alguno de los sitios web que hay en el seridor.</p> <p></p> <pre><code>sudo nano /etc/nginx/sites-available/nombre_web\n</code></pre> <p>Debemos decidir qu\u00e9 recursos estar\u00e1n protegidos. Nginx permite a\u00f1adir restricciones a nivel de servidor o en un location (directorio o archivo) espec\u00edfico. Para nuestro ejemplo, vamos a proteger el document root (la ra\u00edz, la p\u00e1gina principal) de nuestro sitio. </p> <p>Utilizaremos la directiva <code>auth_basic</code> dentro del location y le pondremos el nombre a nuestro dominio que ser\u00e1 mostrado al usuario al solicitar las credenciales. Por \u00faltimo, configuramos Nginx para que utilice el fichero que previamente hemos creado con la directiva <code>auth_basic_user_file</code> : </p> <p><pre><code>server {\n        listen 80;\n        listen [::]:80;\n\nroot /var/www/webraul/html/simple-static-website;\n        index index.html index.htm index.nginx-debian.html;\n\nserver_name nombre_web;\n\nlocation / {\n        auth_basic  \"\u00c1rea restringida\";\n        auth_basic_user_file    /etc/nginx/.htpasswd;\n            try_files $uri $uri/ =404;\n        }\n}\n</code></pre> Una vez terminada la configuraci\u00f3n, reiniciamos el servicio para que aplique nuestra pol\u00edtica de acceso. </p> <pre><code>sudo systemctl restart nginx\n</code></pre>"},{"location":"P1.2/#probando-la-nueva-configuracion","title":"Probando la nueva configuraci\u00f3n","text":"<p>Comprobaci\u00f3n 1</p> <p>Comprueba desde tu m\u00e1quina f\u00edsica/anfitri\u00f3n que puedes acceder a <code>http://nombre-sitio-web</code> y que se te solicita autenticaci\u00f3n</p> <p>Comprobaci\u00f3n 2</p> <p>Comprueba que si decides cancelar la autenticaci\u00f3n, se te negar\u00e1 el acceso al sitio con un error. \u00bfQu\u00e9 error es?</p> <p>Cuidado</p> <p>Una vez os autentic\u00e1is con \u00e9xito, el navegador guardar\u00e1 esta autencaci\u00f3n exitosa y no volver\u00e1 a pediros usuario/contrase\u00f1a. </p> <p>Llegados a ese punto, si quer\u00e9is volver a probar a autenticaros, tendr\u00e9is que abriros una Nueva ventana privada del navegador.</p>"},{"location":"P1.2/#tareas","title":"Tareas","text":"<p>Tarea 1</p> <ul> <li> <p>Intenta entrar primero con un usuario err\u00f3neo y luego con otro correcto. Puedes ver todos los sucesos y registros en los logs access.log y error.log </p> </li> <li> <p>Adjunta una captura de pantalla de los logs donde se vea que intentas entrar primero con un usuario inv\u00e1lido y con otro v\u00e1lido. Indica d\u00f3nde podemos ver los errores de usuario inv\u00e1lido o no encontrado, as\u00ed como donde podemos ver el n\u00famero de error que os aparec\u00eda antes</p> </li> </ul> <p>Cuando hemos configurado el siguiente bloque: </p> <pre><code>location / {\n        auth_basic  \"\u00c0rea restringida\";\n        auth_basic_user_file    /etc/nginx/.htpasswd;\n            try_files $uri $uri/ =404;\n        }\n</code></pre> <p>La autenticaci\u00f3n se aplica al directorio/archivo que le indicamos en la declaraci\u00f3n del <code>location</code> y que en este caso el ra\u00edz <code>/</code>.</p> <p>As\u00ed pues, esta restricci\u00f3n se aplica al directorio ra\u00edz o base donde residen los archivos del sitio web y que es: </p> <pre><code>/var/www/webraul/html/simple-static-website\n</code></pre> <p>Y a todos los archivos que hay dentro, ya que no hemos especificado ninguno en concreto. </p> <p>Ahora bien, vamos a probar a aplicar autenticaci\u00f3n s\u00f3lo a una parte de la web. Vamos a intentar que s\u00f3lo se necesite autenticac\u00ed\u00f3n para entrar a la parte de portfolio: </p> <p></p> <p>Esta secci\u00f3n se corresponde con el archivo <code>contact.html</code> dentro del directorio ra\u00edz. </p> <p>Tarea 2</p> <p>Borra las dos l\u00edneas que hacen referencia a la autenticaci\u00f3n b\u00e1sica en el location del directorio ra\u00edz. Tras ello, a\u00f1ade un nuevo location debajo con la autenticaci\u00f3n b\u00e1sica para el archivo/secci\u00f3n <code>contact.html</code> \u00fanicamente. </p> <p>Warning</p> <p>Fij\u00e1os que deb\u00e9is tener cuidado porque la \u00faltima l\u00ednea del archivo ha de ser <code>}</code> que cierra la primera l\u00ednea <code>server {</code> del archivo.</p>"},{"location":"P1.2/#combinacion-de-la-autenticacion-basica-con-la-restriccion-de-acceso-por-ip","title":"Combinaci\u00f3n de la autenticaci\u00f3n b\u00e1sica con la restricci\u00f3n de acceso por IP","text":"<p>La autenticaci\u00f3n b\u00e1sica HTTP puede ser combinada de forma efectiva con la restricci\u00f3n de acceso por direcci\u00f3n IP. Se pueden implementar dos escenario: </p> <ul> <li> <p>Un usuario debe estar ambas cosas, autenticado y tener una IP v\u00e1lida</p> </li> <li> <p>Un usuario debe o bien estar autenticado, o bien tener una IP v\u00e1lida </p> </li> </ul> <p>Veamos c\u00f3mo lo har\u00edamos:</p> <ol> <li> <p>Como permitir o denegar acceso sobre una IP concreta (directivas allow y deny, respectivamente). Dentro del block server o archivo de configuraci\u00f3n del dominio web, que recordad est\u00e1 en el directorio sites-available: </p> <p></p> <p>El acceso se garantizar\u00e1 ala IP <code>192.168.1.1/24</code>, excluyendo a la direcci\u00f3n <code>192.168.1.2</code>.</p> <p>Hay que tener en cuenta que las directivas allow y deny se ir\u00e1n aplicando en el orden en el que aparecen el archivo.</p> <p>Aqu\u00ed aplican sobre la <code>location /api</code> (esto es s\u00f3lo un ejemplo de un hipot\u00e9tico directorio o archivo), pero podr\u00edan aplicar sobre cualquiera, incluida todo el sitio web, la location ra\u00edz <code>/</code>.</p> <p>La \u00faltima directiva <code>deny all</code> quiere decir que por defecto denegaremos el acceso a todo el mundo. Por eso hay que poner los allow y deny m\u00e1s espec\u00edficos justo antes de esta, porque al evaluarse en orden de aparici\u00f3n, si los pusi\u00e9ramos debajo se denegar\u00eda el acceso a todo el mundo, puesto que <code>deny all</code> ser\u00eda lo primero que se evaluar\u00eda. </p> </li> <li> <p>Combinar la restricci\u00f3n IP y la autenticaci\u00f3n HTTP con la directiva satisfy. </p> <p>Si establecemos el valor de la directiva a \u201call\u201d, el acceso se permite si el cliente satisface ambas condiciones (IP y usario v\u00e1lido). Si lo establecemos a \u201cany\u201d, el acceso se permite si se satisface al menos una de las dos condiciones.</p> <p></p> </li> </ol>"},{"location":"P1.2/#tareas_1","title":"Tareas","text":"<p>Tarea 1</p> <p>Configura Nginx para que no deje acceder con la IP de la m\u00e1quina anfitriona al directorio ra\u00edz de una de tus dos webs. Modifica su server block o archivo de configuraci\u00f3n. Comprueba como se deniega el acceso: </p> <ul> <li> <p>Muestra la p\u00e1gina de error en el navegador </p> </li> <li> <p>Muestra el mensaje de error de error.log </p> </li> </ul> <p>Tarea 2</p> <p>Configura Nginx para que desde tu m\u00e1quina anfitriona se tenga que tener tanto una IP v\u00e1lida como un usuario v\u00e1lido, ambas cosas a la vez, y comprueba que s\u00ed puede acceder sin problemas</p>"},{"location":"P1.2/#cuestiones-finales","title":"Cuestiones finales","text":"<p>Cuesti\u00f3n 1</p> <p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio <code>web_muy_guay</code> de mi sitio web, equivoc\u00e1ndome al poner el usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>    location /web_muy_guay {\n    #...\nsatisfy all;    deny  172.1.10.6;\n    allow 172.1.10.15;\n    allow 172.1.3.14;\n    deny  all;\n    auth_basic \"Cuesti\u00f3n final 1\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>Cuesti\u00f3n 2</p> <p>ask \"Cuesti\u00f3n 1\" Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio <code>web_muy_guay</code> de mi sitio web, introduciendo correctamente usuari y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>    location /web_muy_guay {\n    #...\nsatisfy all;    deny  all;\n    deny  172.1.10.6;\n    allow 172.1.10.15;\n    allow 172.1.3.14;\n\nauth_basic \"Cuesti\u00f3n final 2: The revenge\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>Cuesti\u00f3n 3</p> <p>Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio <code>web_muy_guay</code> de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder?\u00bfPor qu\u00e9?</p> <pre><code>    location /web_muy_guay {\n    #...\nsatisfy any;    deny  172.1.10.6;\n    deny 172.1.10.15;\n    allow 172.1.3.14;\n\nauth_basic \"Cuesti\u00f3n final 3: The final combat\";\n    auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>Cuesti\u00f3n 4</p> <p>A lo mejor no sab\u00e9is que tengo una web para documentar todas mis excursiones espaciales con Jeff, es esta: Jeff Bezos y yo</p> <p>Supongamos que quiero restringir el acceso al directorio de proyectos porque es muy secreto, eso quiere decir a\u00f1adir autenticaci\u00f3n b\u00e1sica a la URL:Proyectos</p> <p>Completa la configuraci\u00f3n para conseguirlo:</p> <pre><code>    server {\n        listen 80;\n        listen [::]:80;\n        root /var/www/freewebsitetemplates.com/preview/space-science;\n        index index.html index.htm index.nginx-debian.html;\n        server_name freewebsitetemplates.com www.freewebsitetemplates.com;\n        location              {\n\ntry_files $uri $uri/ =404;\n        }\n}\n</code></pre>"},{"location":"P1.2/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Configuraci\u00f3n correcta de la autorizaci\u00f3n b\u00e1sica de Nginx, comprobaci\u00f3n e identificaci\u00f3n del error 2 puntos Capturas correctas del log 1 puntos Configuraci\u00f3n correcta de la autorizaci\u00f3n b\u00e1sica en <code>contact</code> 1.5 puntos Correcta configuraci\u00f3n y comprobaci\u00f3n de las tareas de autenticaci\u00f3n b\u00e1sica y restricci\u00f3n por IP 1.5 puntos Cuestiones finales 2 puntos Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 2 puntos"},{"location":"P1.3/","title":"Pr\u00e1ctica 2.3 \u2013 Proxy inverso con Nginx","text":""},{"location":"P1.3/#requisitos-antes-de-comenzar-la-practica","title":"Requisitos antes de comenzar  la pr\u00e1ctica","text":"<p>Atenci\u00f3n, importante antes de comenzar</p> <ul> <li>La pr\u00e1ctica 2.1 ha de estar funcionando correctamente</li> <li>No comenzar la pr\u00e1ctica antes de tener la 2.1 funcionando y comprobada</li> </ul>"},{"location":"P1.3/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"P1.3/#que-es-un-servidor-proxy","title":"\u00bfQu\u00e9 es un servidor proxy?","text":"<p>Un proxy de reenv\u00edo, a menudo llamado proxy, servidor proxy o proxy web, es un servidor que se encuentra frente a un grupo de m\u00e1quinas cliente. Cuando esas m\u00e1quinas realizan solicitudes a sitios y servicios en Internet, el servidor proxy intercepta esas solicitudes y luego se comunica con los servidores web en nombre de esos clientes, como un intermediario. </p> <p>Por ejemplo, tomemos como ejemplo 3 m\u00e1quinas involucradas en una comunicaci\u00f3n t\u00edpica de proxy de reenv\u00edo: </p> <ul> <li> <p>A: Esta es la m\u00e1quina del hogar de un usuario. </p> </li> <li> <p>B: este es un servidor proxy de reenv\u00edo </p> </li> <li> <p>C: este es el servidor de origen de un sitio web (donde se almacenan los datos del sitio web) </p> </li> </ul> <p></p> <p>En una comunicaci\u00f3n est\u00e1ndar por Internet, la m\u00e1quina A se comunicar\u00eda directamente con la m\u00e1quina C, con el cliente enviando solicitudes al servidor de origen y el servidor de origen respondiendo al cliente. Cuando hay un proxy de reenv\u00edo, A enviar\u00e1 solicitudes a B, que luego reenviar\u00e1 la solicitud a C. C enviar\u00e1 una respuesta a B, que reenviar\u00e1 la respuesta a A. </p> <p>\u00bfPor qu\u00e9 agregar este intermediario adicional a nuestra actividad en Internet? </p> <p></p> <p>Hay algunas razones por las que uno podr\u00eda querer usar un proxy de reenv\u00edo: </p> <ul> <li> <p>Para evitar restricciones de navegaci\u00f3n estatales o institucionales: algunos gobiernos, escuelas y otras organizaciones usan firewalls para dar a sus usuarios acceso a una versi\u00f3n limitada de Internet. Se puede usar un proxy de reenv\u00edo para sortear estas restricciones, ya que permiten que el usuario se conecte al proxy en lugar de directamente a los sitios que est\u00e1 visitando. </p> </li> <li> <p>Para bloquear el acceso a cierto contenido: a la inversa, los proxies tambi\u00e9n se pueden configurar para bloquear el acceso de un grupo de usuarios a ciertos sitios. Por ejemplo, una red escolar puede estar configurada para conectarse a la web a trav\u00e9s de un proxy que habilita reglas de filtrado de contenido, neg\u00e1ndose a reenviar respuestas de Facebook y otros sitios de redes sociales. </p> </li> <li> <p>Para proteger su identidad en l\u00ednea: en algunos casos, los usuarios habituales de Internet simplemente desean un mayor anonimato en l\u00ednea, pero en otros casos, los usuarios de Internet viven en lugares donde el gobierno puede imponer graves consecuencias a los disidentes pol\u00edticos. Criticar al gobierno en un foro web o en las redes sociales puede dar lugar a multas o encarcelamiento para estos usuarios. Si uno de estos disidentes usa un proxy de reenv\u00edo para conectarse a un sitio web donde publica comentarios pol\u00edticamente sensibles, la direcci\u00f3n IP utilizada para publicar los comentarios ser\u00e1 m\u00e1s dif\u00edcil de rastrear hasta el disidente. Solo estar\u00e1 visible la direcci\u00f3n IP del servidor proxy. </p> </li> </ul>"},{"location":"P1.3/#en-que-se-diferencia-un-proxy-inverso","title":"\u00bfEn qu\u00e9 se diferencia un proxy inverso?","text":"<p>Estar\u00edamos hablando del caso opuesto al anterior. </p> <p>Un proxy inverso es un servidor que se encuentra frente a uno o m\u00e1s servidores web, interceptando las solicitudes de los clientes. Esto es diferente de un proxy de reenv\u00edo, donde el proxy se encuentra frente a los clientes. Con un proxy inverso, cuando los clientes env\u00edan solicitudes al servidor de un sitio web, esas solicitudes son interceptadas en la frontera de la red por el servidor proxy inverso. El servidor proxy inverso enviar\u00e1 solicitudes y recibir\u00e1 respuestas del servidor del sitio web. </p> <p>La diferencia entre un proxy directo y inverso es sutil pero importante. Una forma simplificada de resumir ser\u00eda decir que un proxy de reenv\u00edo se encuentra frente a un cliente y garantiza que ning\u00fan servidor de origen se comunique nunca directamente con ese cliente espec\u00edfico. Por otro lado, un proxy inverso se encuentra frente a un servidor de origen y garantiza que ning\u00fan cliente se comunique nunca directamente con ese servidor de origen. </p> <p>Una vez m\u00e1s, ilustremos nombrando las m\u00e1quinas involucradas: </p> <ul> <li> <p>D: cualquier n\u00famero de ordenadores dom\u00e9sticos de los usuarios </p> </li> <li> <p>E: este es un servidor proxy inverso </p> </li> <li> <p>F: uno o m\u00e1s servidores de origen </p> </li> </ul> <p></p> <p>Normalmente, todas las solicitudes de D ir\u00edan directamente a F, y F enviar\u00eda respuestas directamente a D. Con un proxy inverso, todas las solicitudes de D ir\u00e1n directamente a E, y E enviar\u00e1 sus solicitudes ay recibir\u00e1 respuestas de F. E luego transmita las respuestas apropiadas a D. </p> <p>A continuaci\u00f3n se describen algunos de los beneficios de un proxy inverso: </p> <ul> <li> <p>Balanceo de carga: es posible que un sitio web popular que recibe millones de usuarios todos los d\u00edas no pueda manejar todo el tr\u00e1fico entrante del sitio con un solo servidor de origen. En cambio, el sitio se puede distribuir entre un grupo de servidores diferentes, todos manejando solicitudes para el mismo sitio. En este caso, un proxy inverso puede proporcionar una soluci\u00f3n de balanceo de carga que distribuir\u00e1 el tr\u00e1fico entrante de manera uniforme entre los diferentes servidores para evitar que un solo servidor se sobrecargue. En el caso de que un servidor falle por completo, otros servidores pueden intensificar para manejar el tr\u00e1fico. </p> </li> <li> <p>Protecci\u00f3n contra ataques: con un proxy inverso en su lugar, un sitio web o servicio nunca necesita revelar la direcci\u00f3n IP de su (s) servidor (es) de origen. Esto hace que sea mucho m\u00e1s dif\u00edcil para los atacantes aprovechar un ataque dirigido contra ellos, como un ataque DdoS. </p> </li> <li> <p>Almacenamiento en cach\u00e9: un proxy inverso tambi\u00e9n puede almacenar contenido en cach\u00e9 , lo que resulta en un rendimiento m\u00e1s r\u00e1pido. Por ejemplo, si un usuario en Par\u00eds visita un sitio web con proxy inverso con servidores web en Los \u00c1ngeles, el usuario podr\u00eda conectarse a un servidor proxy inverso local en Par\u00eds, que luego tendr\u00e1 que comunicarse con un servidor de origen en Los \u00c1ngeles. El servidor proxy luego puede almacenar en cach\u00e9 (o guardar temporalmente) los datos de respuesta. Los usuarios parisinos posteriores que naveguen por el sitio obtendr\u00e1n la versi\u00f3n en cach\u00e9 local del servidor proxy inverso parisino, lo que dar\u00e1 como resultado un rendimiento mucho m\u00e1s r\u00e1pido. </p> </li> <li> <p>Cifrado SSL - Cifrado y descifrado SSL (o TLS comunicaciones) para cada cliente pueden ser computacionalmente caro para un servidor de origen. Se puede configurar un proxy inverso para descifrar todas las solicitudes entrantes y cifrar todas las respuestas salientes, liberando valiosos recursos en el servidor de origen. </p> </li> </ul> <p></p>"},{"location":"P1.3/#tarea","title":"Tarea","text":""},{"location":"P1.3/#configuraciones","title":"Configuraciones","text":""},{"location":"P1.3/#nginx-servidor-web","title":"Nginx servidor web","text":"<p>Vamos a configurar dos Debian con sendos servidores Nginx. Ten\u00e9is la m\u00e1quina virtual inicial y deb\u00e9is clonarla para tener una segunda: </p> <ul> <li> <p>Uno servir\u00e1 las p\u00e1ginas web que ya hemos configurado, as\u00ed pues utilizaremos el servidor que ya tenemos configurado de la Pr\u00e1ctica 2.1. </p> </li> <li> <p>El nuevo servidor clon Debian con Nginx configurado como proxy inverso</p> </li> <li> <p>Realizaremos las peticiones HTTP desde el navegador web de nuestra m\u00e1quina f\u00edsica/anfitri\u00f3n hacia el proxy clonado, que nos redirigir\u00e1 al servidor web original</p> </li> </ul> <p>Cuidado</p> <p>Ojo al clonar las m\u00e1quinas virtuales porque hay que darle a crear una nueva MAC, de lo contrario no tendr\u00e9is IP en esa m\u00e1quina.</p> <p>El diagrama de red quedar\u00eda as\u00ed: </p> <p></p> <p>Para que todo quede m\u00e1s diferenciado y os quede m\u00e1s claro que la petici\u00f3n est\u00e1 pasando por el proxy inverso y llega al servidor web destino, vamos a hacer que cada uno de los servidores escuche las peticiones en un puerto distinto. </p> <ol> <li> <p>En primer lugar, deb\u00e9is cambiar el nombre que tuviera vuestra web por el de <code>webserver</code>, ello implica: </p> <ul> <li> <p>Cambiar el nombre del archivo de configuraci\u00f3n de sitios disponibles par Nginx</p> </li> <li> <p>Cambiar el nombre del sitio web dentro de este archivo de configuraci\u00f3n donde haga falta </p> </li> <li> <p>No os olvid\u00e9is de eliminar el link simb\u00f3lico antiguo  con el comando <code>unlink nombre_del_link</code> dentro de la carpeta <code>sites-enabled</code> y crear el nuevo para el nuevo nombre de archivo. </p> </li> </ul> </li> <li> <p>En el archivo de configuraci\u00f3n del sitio web, en lugar de hacer que el servidor escuche en el puerto 80, cambiadlo al 8080. </p> </li> <li> <p>Reiniciar Nginx </p> </li> </ol>"},{"location":"P1.3/#nginx-proxy-inverso","title":"Nginx proxy inverso","text":"<p>Ahora, cuando intentamos acceder a <code>http://ejemplo-proxy</code> (o el nombre que tuvier\u00e1is de vuestra web de las pr\u00e1cticas anteriores), en realidad estaremos accediendo al proxy, que nos redirigir\u00e1 a <code>http://webserver:8080</code>, el servidor web que acabamos de configurar para que escuche con ese nombre en el puerto 8080. </p> <p>Para ello: </p> <ul> <li> <p>Crear un archivo de configuraci\u00f3n en sites-available con el nombre <code>ejemplo-proxy</code> (o el que tuvier\u00e1is vosotros) </p> </li> <li> <p>Este archivo de configuraci\u00f3n ser\u00e1 m\u00e1s simple, tendr\u00e1 la siguiente forma </p> </li> </ul> <pre><code>server { listen __; server_name ____________; location / { proxy_pass http://_________:____; } } </code></pre> <p>Donde, mirando el diagrama de red y teniendo en cuenta la configuraci\u00f3n hecha hasta ahora, deb\u00e9is completar: </p> <ul> <li> <p>El puerto donde est\u00e1 escuchando el proxy inverso </p> </li> <li> <p>El nombre de vuestro dominio o sitio web original al que accedemos en el proxy </p> </li> <li> <p>La directiva <code>proxy_pass</code> indica a d\u00f3nde se van a redirigir las peticiones, esto es, al servidor web. Por tanto, deb\u00e9is poner la IP y n\u00famero de puerto adecuados de vuestro sitio web configurado en el apartado anterior. </p> </li> <li> <p>Crear el link simb\u00f3lico pertinente </p> </li> </ul> <p>Esto es para simular la situaci\u00f3n en la que nosotros, como clientes, cuando accedamos a nuestro sitio web, no necesitemos saber c\u00f3mo est\u00e1 todo configurado, s\u00f3lo necesitamos saber el nombre de la web. </p> <p>\u00a1Atenci\u00f3n, muy importante!</p> <p>Deb\u00e9is modificar el archivo host que configurast\u00e9is en la pr\u00e1ctica 2.1. Si mir\u00e1is el diagrama de red, ahora el nombre de vuestro sitio web se corresponder\u00e1 con la IP de la nueva m\u00e1quina clon que hace de proxy. Ser\u00e1 \u00e9sta la encargada de redirigirnos autom\u00e1ticamente al verdadero sitio web.</p>"},{"location":"P1.3/#comprobaciones","title":"Comprobaciones","text":"<p>Si acced\u00e9is a vuestro sitio web, deb\u00e9is poder seguir accediendo sin problemas. </p> <ul> <li> <p>Comprobad en los access.log de los dos servidores que llega la petici\u00f3n </p> </li> <li> <p>Comprobad adem\u00e1s la petici\u00f3n y respuesta con las herramientas de desarrollador de Firefox en Xubuntu. Pulsando F12 en el navegador os aparecer\u00e1n estas herramientas</p> </li> </ul> <p></p> <p>En la primera petici\u00f3n (marcada en rojo), utilizando el apartado \u201cRed\u201d (tambi\u00e9n marcado en rojo) y tambi\u00e9n en rojo est\u00e1 se\u00f1alado d\u00f3nde se puede ver la respuesta de la petici\u00f3n GET HTTP (200 OK). </p> <p>Tambi\u00e9n vemos las cabeceras que se incluyen en la petici\u00f3n (m\u00e9todo GET) y en la respuesta a esta petici\u00f3n. </p>"},{"location":"P1.3/#anadiendo-cabeceras","title":"A\u00f1adiendo cabeceras","text":"<p>Adem\u00e1s de haber mirado los logs, vamos a demostrar a\u00fan de forma m\u00e1s clara que la petici\u00f3n est\u00e1 pasando por el proxy inverso y que est\u00e1 llegando al servidor web y que vuelve por el mismo camino. </p> <p>Si record\u00e1is de teor\u00eda, el servidor web es capaz de a\u00f1adir cabeceras en las respuestas a las peticiones. </p> <p>As\u00ed pues, vamos a configurar tanto el proxy inverso como el servidor web para que a\u00f1adan cada uno la cabecera \u201cHost\u201d que tambi\u00e9n vimos en teor\u00eda. </p> <p>Para a\u00f1adir cabeceras, en el archivo de configuraci\u00f3n del sitio web debemos a\u00f1adir dentro del bloque <code>location / { \u2026 }</code> debemos a\u00f1adir la directiva: </p> <pre><code>add_header Host nombre_del_host;\n</code></pre> <ol> <li> <p>A\u00f1adiremos primero esta cabecera \u00fanicamente en el archivo de configuraci\u00f3n del sitio web del proxy inverso. El Nombre_del_host ser\u00e1 Proxy_inverso_vuestronombre. </p> </li> <li> <p>Reiniciamos Nginx </p> </li> <li> <p>Comprobamos que podemos acceder al sitio web sin problemas </p> </li> <li> <p>Con las herramientas de desarrollador comprobamos que la petici\u00f3n ha pasado por el proxy inverso que ha a\u00f1adido la cabecera en la respuesta: </p> <p></p> </li> <li> <p>Hacemos lo propio con el servidor web. Esta vez el <code>Nombre_del_host</code> ser\u00e1 <code>servidor_web_vuestronombre</code>. </p> <p>Si todo est\u00e1 configurado correctamente, al examinar las peticiones y respuestas, os aparecer\u00e1n las dos cabeceras que han incluido en la respuesta tanto el proxy inverso como el servidor web. .</p> <p></p> </li> </ol> <p>Es muy importante que para realizar estas comprobaciones teng\u00e1is marcado el checkbox Desactivar cach\u00e9 o en una ventana privada del navegador.</p> <p></p> <p>Si no marc\u00e1is esto, la p\u00e1gina se guardar\u00e1 en la memoria cach\u00e9 del navegador y no estar\u00e9is recibiendo la respuesta del servidor sino de la cach\u00e9 del navegador, lo que puede dar lugar a resultados err\u00f3neos. </p>"},{"location":"P1.3/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Configuraci\u00f3n correcta y completa del servidor web 3 puntos Configuraci\u00f3n correcta y completa del proxy inverso 4 puntos Comprobaci\u00f3n del correcto funcionamento, incluyendo las cabeceras 1 puntos Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 2 puntos"},{"location":"P1.4/","title":"Pr\u00e1ctica 2.4 \u2013 Balanceo de carga con proxy inverso en Nginx","text":""},{"location":"P1.4/#requisitos-aantes-de-comenzar-la-practica","title":"Requisitos aantes de comenzar la pr\u00e1ctica","text":"<p>Atenci\u00f3n, muy importante antes de empezar</p> <ul> <li>La pr\u00e1ctica 2.3 debe estar funcionando correctamente</li> <li>No empezar la pr\u00e1ctica antes de tener la 2.3 funcionando y comprobada </li> </ul>"},{"location":"P1.4/#introduccion","title":"Introducci\u00f3n","text":"<p>Los servidores proxy inversos y los balanceadores de carga son componentes de una arquitectura inform\u00e1tica cliente-servidor. Ambos act\u00faan como intermediarios en la comunicaci\u00f3n entre los clientes y los servidores, realizando funciones que mejoran la eficiencia. </p> <p>Las definiciones b\u00e1sicas son simples: </p> <ul> <li> <p>Un proxy inverso     acepta una solicitud de un cliente, la reenv\u00eda a un servidor que puede cumplirla y devuelve la respuesta del servidor al cliente.  </p> </li> <li> <p>Un balanceador de carga     distribuye las solicitudes entrantes del cliente entre un grupo de servidores, en cada caso devolviendo la respuesta del servidor seleccionado al cliente apropiado. </p> </li> </ul> <p>Suenan bastante similares, \u00bfverdad? Ambos tipos de aplicaciones se ubican entre clientes y servidores, aceptando solicitudes del primero y entregando respuestas del segundo. No es de extra\u00f1ar que haya confusi\u00f3n sobre qu\u00e9 es un proxy inverso y un balanceador de carga. Para ayudar a diferenciarlos, exploremos cu\u00e1ndo y por qu\u00e9 normalmente se implementan en un sitio web. .</p>"},{"location":"P1.4/#proxy-inverso","title":"Proxy inverso","text":"<p>Ya conocemos este concepto de la pr\u00e1ctica anterior. </p> <p>Mientras que implementar un balanceador de carga solo tiene sentido cuando se tienen varios servidores, a menudo tiene sentido implementar un proxy inverso incluso con un solo servidor web o servidor de aplicaciones. </p> <p>Se puede pensar en el proxy inverso como la \"cara p\u00fablica\" de un sitio web. Su direcci\u00f3n es la que se anuncia para el sitio web y se encuentra en la frontera de la red del sitio para aceptar solicitudes de navegadores web y aplicaciones m\u00f3viles para el contenido alojado en el sitio web. </p>"},{"location":"P1.4/#balanceadores-de-carga","title":"Balanceadores de carga","text":"<p>Los balanceadores de carga se implementan con mayor frecuencia cuando un sitio necesita varios servidores porque el volumen de solicitudes es demasiado para que un solo servidor lo maneje de manera eficiente. </p> <p>La implementaci\u00f3n de varios servidores tambi\u00e9n elimina un solo punto de fallo, lo que hace que el sitio web sea m\u00e1s confiable. Por lo general, todos los servidores alojan el mismo contenido, y el trabajo del balanceador de carga es distribuir la carga de trabajo de  manera que se haga el mejor uso de la capacidad de cada servidor, evite la sobrecarga en cualquiera de ellos y d\u00e9 como resultado la respuesta m\u00e1s r\u00e1pida posible al cliente. . </p> <p>Un balanceador de carga tambi\u00e9n puede mejorar la experiencia del usuario al reducir la cantidad de respuestas de error que ve el cliente. Lo hace detectando cu\u00e1ndo los servidores caen y desviando las solicitudes de ellos a los otros servidores del grupo. En la implementaci\u00f3n m\u00e1s simple, el balanceador de carga detecta el estado del servidor al interceptar las respuestas de error a las solicitudes regulares. </p> <p>En esta pr\u00e1ctica tendremos el escenario donde Nginx har\u00e1 tanto de proxy inverso como de balanceador de carga al mismo tiempo.  </p> <p>Info</p> <p>En esta pr\u00e1ctica tendremos un escenario donde Nginx har\u00e1 tanto de proxy inverso como de balanceador de carga al mismo tiempo</p>"},{"location":"P1.4/#tarea","title":"Tarea","text":"<p>Vamos a configurar dos servidores web Nginx con dos m\u00e1quinas Debian, adem\u00e1s de reutilizar el proxy inverso Nginx configurado en la pr\u00e1ctica anterior. Partiremos por tanto de la configuraci\u00f3n de la pr\u00e1ctica anterior, a\u00f1adiendo lo necesario: </p> <ul> <li> <p>Cada servidor web presentar\u00e1 un sitio web espec\u00edfico para esta pr\u00e1ctica </p> <ul> <li>El webserver2 debe tener la IP asignada de forma fija mediante la configuraci\u00f3n DHCP. </li> </ul> </li> <li> <p>El proxy inverso que ya ten\u00edamos configurado, habr\u00e1 ahora que configurarlo para que realice el balanceo de carga que deseamos </p> </li> <li> <p>Realizaremos las peticiones HTTP desde el navegador web de nuestra m\u00e1quina anfitriona. </p> </li> </ul> <p>El diagrama de red quedar\u00eda as\u00ed: </p> <p></p> <p>Haremos las peticiones web desde el navegador al proxy inverso, que las repartir\u00e1 entre los dos servidores web que tenemos. </p> <p>Accederemos a <code>http://balanceo</code> y debemos observar que las peticiones, efectivamente, se van repartiendo entre el servidor 1 y el 2. </p>"},{"location":"P1.4/#configuraciones","title":"Configuraciones","text":"<p>Atenci\u00f3n</p> <p>Ya no vamos a utilizar los sitios web que hemos configurado en las pr\u00e1cticas anteriores. Por ello, para evitarnos una serie de problemas que pueden surgir, vamos a desactivarlos.</p> <p>Dentro de la carpeta <code>/etc/nginx/sites-enabled</code> debemos ejecutar <code>unlink nombre_archivo</code> para cada uno de los archivos de los sitios web que tenemos.</p> <p>Si no hac\u00e9is esto obtendr\u00e9is errores en todas las pr\u00e1cticas que quedan de este tema.</p>"},{"location":"P1.4/#nginx-servidor-web-1","title":"Nginx Servidor Web 1","text":"<p>El primer servidor web ser\u00e1 el servidor principal que hemos venido utilizando hasta ahora durante el curso, el original, donde tenemos instalado ya el servicio Web. </p> <p>Debemos configurar este servidor web para que sirva el siguiente <code>index.html</code> que deb\u00e9is crear dentro de la carpeta <code>/var/www/webserver1/html</code>: </p> <p></p> <ul> <li> <p>El nombre del sitio web que deb\u00e9is utilizar en los archivos correspondientes (sites-available\u2026) que deb\u00e9is crear para Nginx es <code>webserver1</code>, as\u00ed como en sus configuraciones. Fij\u00e1os en las configuraciones que hicisteis en pr\u00e1cticas anteriores a modo de referencia. </p> </li> <li> <p>El sitio web debe escuchar en el puerto 8080. </p> </li> <li> <p>Deb\u00e9is a\u00f1adir una cabecera que se llame <code>Serv_Web1_vuestronombre</code>. </p> </li> </ul>"},{"location":"P1.4/#nginx-servidor-web-2","title":"Nginx Servidor Web 2","text":"<p>Debe ser una m\u00e1quina Debian, clon del servidor web 1. </p> <p>En este servidor web debemos realizar una configuraci\u00f3n id\u00e9ntica al servidor web 1 pero cambiando <code>webserver1</code> por <code>webserver2</code> (tambi\u00e9n en el index.html), as\u00ed como el nombre de la cabecera a\u00f1adida, que ser\u00e1 <code>Serv_Web2_vuestronombre</code></p> <p>Warning</p> <p>Es importante que no quede ninguna referencia a webserver1 por ning\u00fan archivo, de otra forma os dar\u00e1 resultados err\u00f3neos y os dificultar\u00e1 mucho encontrar el error.</p>"},{"location":"P1.4/#nginx-proxy-inverso","title":"Nginx Proxy Inverso","text":"<p>Ya disponemos de los dos servidores web entre los que se van a repartir las peticiones que realice el cliente desde el navegador. </p> <p>Vamos, por tanto, a configurar el proxy inverso para que realice este reparto de peticiones: </p> <ul> <li>En sites-available deb\u00e9is crear el archivo de configuraci\u00f3n con el nombre balanceo</li> </ul> <p>Este archivo tendr\u00e1 el siguiente formato:</p> <p><pre><code>    upstream backend_hosts {\n                random;\n                server ________:____;\n                server ________:____;\n    }\nserver {\n                listen 80;\n                server_name ________;      location / {\n                    proxy_pass http://backend_hosts;\n                }\n}\n</code></pre> Donde: </p> <ul> <li> <p>El bloque upstream \u2192 son los servidores entre los que se va a repartir la carga, que son los dos que hemos configurado anteriormente. </p> </li> <li> <p>Si mir\u00e1is el diagrama y ten\u00e9is en cuenta la configuraci\u00f3n que hab\u00e9is hecho hasta ahora, aqu\u00ed deber\u00e9is colocar la IP de cada servidor, as\u00ed como el puerto donde est\u00e1 escuchando las peticiones web. </p> </li> <li> <p>A este grupo de servidores le ponemos un nombre, que es <code>backend_hosts</code></p> </li> </ul> <p>Aclaraci\u00f3n</p> <p>En un sitio web, el backend se encarga de todos los procesos necesarios para que la web funcione de forma correcta. Estos procesos o funciones no son visibles pero tienen mucha importancia en el buen funcionamiento de un sitio web.</p> <ul> <li> <p>El par\u00e1metro random lo que hace es repartir las peticiones HTTP que llegan al proxy inverso de forma completamente aleatoria entre el grupo de servidores que se haya definido en el bloque upstream (en nuestro caso s\u00f3lo hay dos). </p> <ul> <li>Pondremos random porque es lo m\u00e1s f\u00e1cil para comprobar que todo funciona bien en la pr\u00e1ctica, pero hay diferentes formas de repartir la carga (las peticiones HTTP). </li> </ul> </li> </ul>"},{"location":"P1.4/#comprobaciones","title":"Comprobaciones","text":"<p>Si acced\u00e9is a vuestro sitio web, deb\u00e9is poder seguir accediendo sin problemas. </p> <ul> <li> <p>Comprobad d\u00e1ndole repetidamente a F5, que acced\u00e9is cada vez a uno de los servidores. Se os mostrar\u00e1 el contenido del index.html del servidor correspondiente cada vez. </p> <ul> <li>Para una doble comprobaci\u00f3n, utilizando las herramientas de desarrollador, mostrad que la web que se os muestra coincide con la cabecera que ha a\u00f1adido el servidor web en la respuesta HTTP. </li> </ul> </li> </ul> <p>Recordatorio</p> <p>Recordad que es muy importante que para realizar estas comprobaciones teng\u00e1is marcado el checkbox Desactivar cach\u00e9.  </p> <p></p> <p>Si no marc\u00e1is esto, la p\u00e1gina se guardar\u00e1 en la memoria cach\u00e9 del navegador y no estar\u00e9is recibiendo la respuesta del servidor sino de la cach\u00e9 del navegador, lo que puede dar lugar a resultados err\u00f3neos. </p> <p>Otra opci\u00f3n, si esto no funcionara, es hacer las pruebas con una nueva ventana privada del navegador.</p>"},{"location":"P1.4/#comprobacion-del-balanceo-de-carga-cuando-cae-un-servidor","title":"Comprobaci\u00f3n del balanceo de carga cuando cae un servidor","text":"<p>Nuestro balanceador de carga est\u00e1 constantemente monitorizando \u201cla salud\u201d de los servidores web. De esta forma, si uno deja de funcionar por cualquier raz\u00f3n, siempre enviar\u00e1 las solicitudes a los que queden \u201cvivos\u201d. Vamos a comprobarlo: </p> <ul> <li> <p>Para el servicio Nginx en el servidor web 1 y comprueba, de la misma forma que en el apartado anterior, que todas las solicitudes se env\u00edan ahora al servidor web 2 </p> </li> <li> <p>Tras iniciar de nuevo Nginx en el servidor web 1, repite el proceso con el servidor web 2.  </p> </li> </ul>"},{"location":"P1.4/#cuestiones-finales","title":"Cuestiones finales","text":"<p>Cuesti\u00f3n 1</p> <p>Busca informaci\u00f3n de qu\u00e9 otros m\u00e9todos de balanceo se pueden aplicar con Nginx y describe al menos 3 de ellos.</p> <p>Cuesti\u00f3n 2</p> <p>Si quiero a\u00f1adir 2 servidores web m\u00e1s al balanceo de carga, describe detalladamente qu\u00e9 configuraci\u00f3n habr\u00eda que a\u00f1adir y d\u00f3nde.</p> <p>Cuesti\u00f3n 3</p> <p>Describe todos los pasos que deber\u00edamos seguir y configurar para realizar el balanceo de carga con una de las webs de pr\u00e1cticas anteriores.</p> <p>Indicad la configuraci\u00f3n de todas las m\u00e1quinas (webservers, proxy...) y de sus servicios</p>"},{"location":"P1.4/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Configuraci\u00f3n correcta y completa del servidor web 1 2 puntos Configuraci\u00f3n correcta y completa del servidor web 2 2 puntos Configuraci\u00f3n correcta y completa del proxy inverso 3 puntos Cuestiones finales 1 puntos Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 2 puntos"},{"location":"P1.5/","title":"Practica 2.5 - Proxy inverso y balanceo de carga con SSL en NGINX","text":""},{"location":"P1.5/#requisitos-antes-de-comenzar-la-practica","title":"Requisitos antes de comenzar la pr\u00e1ctica","text":"<p>Atenci\u00f3n, muy importante antes de comenzar</p> <ul> <li>La pr\u00e1ctica 4.4 ha d'estar funcionant correctament</li> <li>No comenzar la pr\u00e1ctica antes de tener la 1.3 funcionant i comprovada</li> </ul>"},{"location":"P1.5/#introduccion","title":"Introducci\u00f3n","text":"<p>A partir de las pr\u00e1cticas anteriores hemos llegado a un escenario donde un proxy inverso act\u00faa de intermediario entre dos servidores web Nginx, balanceando la carga entre ellos. </p> <p>Ya dijimos que una importante funci\u00f3n que pod\u00eda tener un proxy inverso era realizar el cifrado y descifrado de SSL para utilizar HTTPS en los servidores web. De esta forma se aliviaba la carga de trabajo de los servidores web, ya que es una tarea que consume recursos. </p> <p>En definitiva, tendr\u00edamos un esquema como este: </p> <p></p> <p>Podr\u00eda llegarse a pensar que en t\u00e9rminos de seguridad no es adecuado que el tr\u00e1fico de red entre el balanceador de carga y los servidores web vaya sin cifrar (HTTP). Sin embargo, pensando en un caso real, la red privada y el proxy inverso/balanceador de carga, adem\u00e1s de estar en la misma red privada, suelen estar administrados por las mismas personas de la misma empresa, por lo que no supone un peligro real que ese tr\u00e1fico vaya sin cifrar. </p> <p>Podr\u00eda cifrarse si fuera necesario, pero entonces pierde sentido que el proxy inverso se encargue del cifrado SSL para HTTPS, ya que har\u00edamos el mismo trabajo dos veces. </p> <p>As\u00ed las cosas, nos quedaremos con el esquema de la imagen de m\u00e1s arriba para la pr\u00e1ctica. </p>"},{"location":"P1.5/#certificados","title":"Certificados","text":"<p>HTTPS se basa en el uso de certificados digitales. </p> <p>Grosso modo, cuando entramos en una web v\u00eda HTTPS, \u00e9sta nos presenta un certificado digital para asegurar que es qui\u00e9n dice ser. \u00bfC\u00f3mo sabemos que ese certificado es v\u00e1lido? Debemos consultar a la Autoridad de Certificaci\u00f3n (CA) que emiti\u00f3 ese certificado si es v\u00e1lido. </p> <p>Las CA son entidades que emiten certificados y su funcionamiento se basa en la confianza. Confiamos en que los certificados emitidos y firmados por esas entidades son reales y funcionales.  </p> <p></p> <p>Los navegadores web tienen precargadas las Autoridades de Certificaci\u00f3n en las que conf\u00edan por defecto a la hora de navegar por webs HTTPS: </p> <p></p> <p>Si accedemos a una web cuyo certificado no haya sido emitido y firmado por una de estas entidades, nos saltar\u00e1 el famoso aviso: </p> <p></p> <p>Ya que si el certificado no ha sido emitido y firmado por una CA de confianza, puede que se trate de una web maliciosa que nos suponga un riesgo de seguridad, como bien dice el aviso. </p>"},{"location":"P1.5/#tarea","title":"Tarea","text":"<p>Partimos de la configuraci\u00f3n exacta de la pr\u00e1ctica anterior, que recordemos era esta: </p> <p></p> <p>Por lo que en esta pr\u00e1ctica simplemente debemos a\u00f1adir la configuraci\u00f3n SSL para el cifrado en el Proxy Inverso: </p> <p></p> <p>Tal y como quedar\u00e1 la configuraci\u00f3n, desde el cliente a\u00fan podr\u00edamos acceder a los dos servidores web con HTTP (pod\u00e9is probarlo) pero es algo que solucionaremos en siguientes temas, configurando un firewall para que s\u00f3lo la IP del proxy inverso pueda acceder por HTTP a los servidores web y nadie m\u00e1s. </p>"},{"location":"P1.5/#creacion-de-certificado-autofirmado","title":"Creaci\u00f3n de certificado autofirmado","text":"<p>Nosotros no utilizaremos certificados de ninguna CA de confianza, b\u00e1sicamente porque: </p> <ul> <li> <p>Nuestros servicios no est\u00e1n publicados en Internet </p> </li> <li> <p>Estos certificados son de pago </p> </li> </ul> <p>As\u00ed pues, nosotros crearemos nuestros propios certificados y los firmaremos nosotros mismos como si fu\u00e9ramos una CA aut\u00e9ntica para poder simular este escenario.</p> <p>Warning</p> <p>Esto provocar\u00e1 que cuando accedamos por HTTPS a nuestro sitio web por primera vez, nos salt\u00e9 el aviso de seguridad que se comentaba en la introducci\u00f3n. </p> <p>En este caso no habr\u00e1 peligro puesto que estamos 100% seguros que ese certificado lo hemos emitido nosotros para esta pr\u00e1ctica, no hay dudas. </p> <p>Veamos pues el proceso para generar los certificados y las claves asociadas a ellos (privada/p\u00fablica). En primer lugar debemos crear el siguiente directorio: </p> <p><code>/etc/nginx/ssl</code></p> <p>Podemos crear el certificado y las claves de forma simult\u00e1nea con un \u00fanico comando, donde: </p> <ul> <li> <p><code>openssl</code>: esta es la herramienta por l\u00ednea de comandos b\u00e1sica para crear y administrar certificados, claves y otros archivos OpenSSL. </p> </li> <li> <p><code>req</code>: este subcomando se utiliza para generar una solicitud de certificados y tambi\u00e9n solicitudes de firma de certificados (CSR). </p> </li> <li> <p><code>-x509</code>: Esto modifica a\u00fan m\u00e1s el subcomando anterior al decirle a la herramienta que queremos crear un certificado autofirmado en lugar de generar una solicitud de firma de certificado, como suceder\u00eda normalmente. </p> </li> <li> <p><code>-nodes</code>: Esto le dice a OpenSSL que omita la opci\u00f3n de asegurar nuestro certificado con contrase\u00f1a. Necesitamos que Nginx pueda leer el archivo sin la intervenci\u00f3n del usuario cuando se inicia el servidor. Una contrase\u00f1a evitar\u00eda que esto sucediera ya que tendr\u00edamos que introducirla a mano despu\u00e9s de cada reinicio. </p> </li> <li> <p><code>-days 365</code>: esta opci\u00f3n establece el tiempo durante el cual el certificado se considerar\u00e1 v\u00e1lido. Lo configuramos para un a\u00f1o. </p> </li> <li> <p><code>-newkey rsa: 2048</code> : Esto especifica que queremos generar un nuevo certificado y una nueva clave al mismo tiempo. No creamos la clave necesaria para firmar el certificado en un paso anterior, por lo que debemos crearla junto con el certificado. La rsa:2048parte le dice que cree una clave RSA de 2048 bits de longitud. </p> </li> <li> <p><code>-keyout</code>: este par\u00e1metro le dice a OpenSSL d\u00f3nde colocar el archivo de clave privada generado que estamos creando. </p> </li> <li> <p><code>-out</code>: Esto le dice a OpenSSL d\u00f3nde colocar el certificado que estamos creando. </p> </li> </ul> <p>El comando completo ser\u00eda as\u00ed: </p> <p></p> <p>Os solicitar\u00e1 que introduzc\u00e1is una serie de par\u00e1metros, como v\u00e9is en el recuadro rojo de abajo de la imagen. Deb\u00e9is introducir los mismos par\u00e1metros que en la imagen excepto en el \u201cOrganizational Unit Name\u201d que v\u00e9is recuadrado en amarillo. Ah\u00ed deber\u00e9is poner <code>2DAW \u2013 DEAW - Vuestronombre</code> </p>"},{"location":"P1.5/#configuracion-ssl-en-el-proxy-inverso","title":"Configuraci\u00f3n SSL en el proxy inverso","text":"<p>De la pr\u00e1ctica anterior, dentro del directorio <code>/etc/nginx/sites-available</code> ya deb\u00e9is tener el archivo de configuraci\u00f3n llamado \u201cbalanceo\u201d. Es precisamente aqu\u00ed donde realizaremos la configuraci\u00f3n para que el acceso  al sitio web se realice mediante SSL (HTTPS). </p> <p>Dentro del bloque <code>server {\u2026}</code> deb\u00e9is cambiar el puerto de escucha (<code>listen 80</code>) por lo que v\u00e9is en la imagen de abajo, a\u00f1adiendo las siguientes l\u00edneas de configuraci\u00f3n tambi\u00e9n, de tal forma que quede: </p> <p></p> <p>Donde le est\u00e1is diciendo que: </p> <ul> <li> <p>Escuche en el puerto 443 \u2192 Puerto por defecto de HTTPS </p> </li> <li> <p>El directorio donde est\u00e1 el certificado que hab\u00e9is generado anteriormente </p> </li> <li> <p>El directorio donde est\u00e1 la clave que hab\u00e9is generado anteriormente </p> </li> <li> <p>Los protocolos y tipos de cifrados que se pueden utilizar \u2192 Estas son las versiones de protocolos y los tipos de cifrados considerados seguros a d\u00eda de hoy (hay muchos m\u00e1s pero no se consideran seguros actualmente) </p> </li> <li> <p><code>server_name</code> ya lo ten\u00edais de la pr\u00e1ctica anterior, no hace falta tocarlo </p> </li> <li> <p>El archivo donde se guardan los logs cambia de nombre, ahora ser\u00e1 https_access.log </p> </li> </ul> <p>Recordad que tras modificar cualquier configuraci\u00f3n de un servicio, hay que reiniciar el servicio, en este caso Nginx. </p>"},{"location":"P1.5/#comprobaciones","title":"Comprobaciones","text":"<ul> <li> <p>Si acced\u00e9is ahora a https://balanceo os deber\u00eda saltar un aviso de seguridad debido a que nuestro certificado es autofirmado, como coment\u00e1bamos anteriormente. </p> </li> <li> <p>Si a\u00f1ad\u00eds una una excepci\u00f3n podr\u00e9is acceder al sitio web y recargando repetidamente la p\u00e1gina con F5, ver\u00e9is que el balanceo de carga se hace correctamente accediendo mediante HTTPS. </p> </li> <li> <p>Para comprobar que los datos del certificado son, efectivamente, los vuestros pod\u00e9is comprobarlo as\u00ed. Pulsando en el candado de la barra de b\u00fasqueda: </p> </li> </ul> <p></p> <p>Con m\u00e1s informaci\u00f3n:</p> <p></p> <p>Info</p> <p>Aqu\u00ed tambi\u00e9n podr\u00e9is eliminar la excepci\u00f3n que hab\u00e9is a\u00f1adido en la p\u00e1gina de la advertencia de seguridad, por si necesit\u00e1is reiniciar las pruebas. </p> <p>Y por \u00faltimo, ver certificado: </p> <p></p> <p>Y podremos ver los detalles: </p> <p></p> <p>Si ahora intent\u00e1is acceder a <code>http://balanceo</code>, \u00bfdeber\u00edais poder acceder? Comprobadlo y describid qu\u00e9 pasa y por qu\u00e9. </p>"},{"location":"P1.5/#redireccion-forzosa-a-https","title":"Redirecci\u00f3n forzosa a HTTPS","text":"<p>Para que, indistintamente de la forma por la que accedamos al sitio web balanceo, siempre se fuerce a utilizar HTTPS, necesitaremos una configuraci\u00f3n adicional. </p> <p>Necesitamos a\u00f1adir un bloque \u201cserver\u201d adicional y separado del otro, al archivo de configuraci\u00f3n de \u201cbalanceo\u201d. Algo as\u00ed: </p> <p></p> <p>Con esta configuraci\u00f3n le estamos diciendo que: </p> <ul> <li> <p>Escuche en el puerto 80 (HTTP) </p> </li> <li> <p>Que el nombre al que responder\u00e1 el servidor/sitio web es balanceo </p> </li> <li> <p>Que guarde los logs de este bloque en ese directorio y con ese nombre </p> </li> <li> <p>Cuando se recibe una petici\u00f3n con las dos condiciones anteriores, se devuelve un c\u00f3digo HTTP 301: </p> <ul> <li> <p>HTTP 301 Moved Permanently (Movido permanentemente en espa\u00f1ol) es un c\u00f3digo de estado de HTTP que indica que el host ha sido capaz de comunicarse con el servidor pero que el recurso solicitado ha sido movido a otra direcci\u00f3n permanentementeEs muy importante configurar las redirecciones 301 en los sitios web y para ello hay diferentes m\u00e9todos y sintaxis para realizar la redirecci\u00f3n 301. </p> </li> <li> <p>La redirecci\u00f3n 301 es un c\u00f3digo o comando insertado por un Webmaster que permite redirigir a los usuarios y buscadores de un sitio web de un sitio a otro. </p> </li> </ul> <p>Aclaraci\u00f3n</p> <p>Es decir, lo que estamos haciendo es que cuando se reciba una petici\u00f3n HTTP (puerto 80) en <code>http://balanceo</code>, se redirija a <code>https://balanceo</code> (HTTPS) </p> </li> </ul> <p>Tarea</p> <ul> <li> <p>Eliminad del otro bloque <code>server{\u2026}</code> la l\u00edneas que hagan referencia a escuchar en el puerto 80 (listen 80\u2026). </p> </li> <li> <p>Reiniciad el servicio </p> </li> <li> <p>Comprobad ahora que cuando entr\u00e1is en <code>http://balanceo</code>, autom\u00e1ticamente os redirige a la versi\u00f3n segura de la web. </p> </li> <li> <p>Comprobad que cuando realiz\u00e1is una petici\u00f3n en el archivo de log <code>http_access.log</code> aparece la redirecci\u00f3n 301 y que, de la misma manera, aparece una petici\u00f3n GET en <code>https_access.log</code>. </p> </li> </ul>"},{"location":"P1.5/#cuestiones-finals","title":"Cuestiones finals","text":"<p>Cuesti\u00f3n 1</p> <p>Hemos configurado nuestro proxy inverso con todo lo que nos hace falta pero no nos funciona y da un error del tipo <code>This site can't provide a secure connection, ERR_SSL_PROTOCOL_ERROR.</code></p> <p>Dentro de nuestro server block tenemos esto:</p> <pre><code>server {\n    listen 443;\n    ssl_certificate /etc/nginx/ssl/enrico-berlinguer/server.crt;\n    ssl_certificate_key /etc/nginx/ssl/enrico-berlinguer/server.key;\n    ssl_protocols TLSv1.3;\n    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;\n    server_name enrico-berlinguer;\n    access_log /var/log/nginx/https_access.log;\n\nlocation / {\n        proxy_pass http://red-party;\n        }\n}\n</code></pre> <p>Cuesti\u00f3n 2</p> <p>Imaginad que intentamos acceder a nuestro sitio web HTTPS y nos encontramos con el siguiente error:</p> <p></p> <p>Investigad qu\u00e9 est\u00e1 pasando y como se ha de solucionar.</p>"},{"location":"P1.5/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Creaci\u00f3n correcta del certificado 1 puntos Configuraci\u00f3n SSL correcta del proxy 3 puntos Comprobaciones 2 puntos Configuraci\u00f3n correcta de la redirecci\u00f3n forzosa a HTTPS y comprobaciones 1 puntos Cuestiones finales 2 puntos SSe ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 1 punto"},{"location":"P3.1-Tomcat/","title":"Pr\u00e1ctica 3.1: Instalaci\u00f3n de Tomcat","text":""},{"location":"P3.1-Tomcat/#introduccion","title":"Introducci\u00f3n","text":"<p>Si consultamos el apartado de versiones de Tomcat en su p\u00e1gina oficial, nos daremos cuenta de que no vamos a usar la \u00faltima versi\u00f3n, la 10, para esta pr\u00e1ctica, sino la anterior, la 9. La pregunta es casi inevitable:</p>"},{"location":"P3.1-Tomcat/#por-que","title":"\u00bfPor qu\u00e9?","text":"<p>En el enlace anterior vemos como desde su versi\u00f3n 9, Tomcat da soporta a Java 8 y superiores. Sin embargo, a partir de la versi\u00f3n 10.1.x, da soporte a Java 11 y superiores.</p> <p>\u00bfQu\u00e9 significa esto?</p> <p>En Java 9 se introdujeron novedades como un nuevo sistema de m\u00f3dulos (Jigsaw), entre otras.</p> <p>En Java 11 se dio un paso m\u00e1s al haber renombrado completamente las rutas de paquetes javax. a jakarta.. Oracle, a pesar de haber hecho p\u00fablico el desarrollo de Java, no hizo lo mismo con su nombre. </p> <p>As\u00ed las cosas, resulta que Java 8 puede que a d\u00eda de hoy a\u00fan sea la m\u00e1s usada en proyectos reales. Dicho esto, podr\u00eda realizarse un proceso de migraci\u00f3n de un proyecto de Java 8 a Java 11 y utilizarlo en Tomcat 10.</p> <p>No obstante, para Java 8 su soporte para uso comercial (pagando) acab\u00f3 en Marzo de 2022, pero para uso no comercial sigue hasta 2030.</p> <p>En conclusi\u00f3n, no es raro encontrarse en el mundo real un proyecto a desplegar realizado en Java 8. Podr\u00eda realizarse una migraci\u00f3n y los conceptos de despliegue que veremos seguir\u00edan aplicando. As\u00ed las cosas, por facilidad en la realizaci\u00f3n de las pr\u00e1cticas utilizaremos Tomcat 9 y el plugin oficial de Maven para Tomcat 7 para el despliegue (luego veremos el motivo).</p>"},{"location":"P3.1-Tomcat/#instalacion-de-tomcat","title":"Instalaci\u00f3n de Tomcat","text":"<p>Esta pr\u00e1ctica es muy sencilla y va a consistir en realizar la instalaci\u00f3n del servidor de aplicaciones Tomcat 9, en una m\u00e1quina virtual corriendo Debian 11 Bullseye.</p> <p></p> <p>Se puede hacer tanto con el administrador de paquetes <code>apt</code> como de forma manual. La forma m\u00e1s recomendable por su sencillez es la primera.</p> <p>Para ello, y como sugerencia, pod\u00e9is apoyaros en este tutorial online, aunque s\u00f3is libres de consultar tantas fuentes como dese\u00e9is.</p> <p>Obviamente, deb\u00e9is utilizar vuestro propios usuarios y contrase\u00f1a.</p>"},{"location":"P3.1-Tomcat/#despliegue-manual-mediante-la-gui-de-administracion","title":"Despliegue manual mediante la GUI de administraci\u00f3n","text":"<p>Realizaremos el despliegue manual de una aplicaci\u00f3n ya previamente empaquetada en formato WAR. Para ello:</p> <ol> <li> <p>Nos logueamos con el usuario previamente creado.</p> </li> <li> <p>Buscamos la secci\u00f3n que nos permite desplegar un WAR manualmente, seleccionamos nuestro archivo y lo desplegamos. </p> <p></p> </li> </ol> <p>Tras estos pasos, se nos listar\u00e1 la aplicaci\u00f3n ya desplegada como un directorio m\u00e1s y podremos acceder a ella. </p> <p>Task</p> <p>Documenta el despliegue manual de la aplicaci\u00f3n que os pod\u00e9is descargar para tal efecto en Aules (archivo .war).</p>"},{"location":"P3.1-Tomcat/#despliegue-con-maven","title":"Despliegue con Maven","text":""},{"location":"P3.1-Tomcat/#instalacion-de-maven","title":"Instalaci\u00f3n de Maven","text":"<p>Para instalar Maven en nuestro Debian tenemos, de nuevo, dos opciones:</p> <ul> <li> <p>Instalaci\u00f3n mediante gestor de paquetes APT</p> </li> <li> <p>Instalaci\u00f3n manual</p> </li> </ul> <p>La primera, recomendada,  es mucho m\u00e1s sencilla y automatizada (establece todos los paths y variables de entorno), aunque con la segunda se podr\u00eda conseguir un paquete m\u00e1s actualizado.</p> <p>Ambos m\u00e9todos vienen explicados aqu\u00ed</p> <p>Si decidimos seguir el primer m\u00e9todo, el m\u00e1s sencillo, vemos que es tan simple como actualizar los repositorios:</p> <pre><code>sudo apt update\n</code></pre> <p>E instalar Maven</p> <p><pre><code>sudo apt install maven\n</code></pre> Para comprobar que todo ha ido correctamente, podemos ver la versi\u00f3n instalada de Maven:</p> <pre><code>mvn --v\n</code></pre>"},{"location":"P3.1-Tomcat/#configuracion-de-maven","title":"Configuraci\u00f3n de Maven","text":"<p>Para poder realizar despliegues en nuestro Tomcat previamente instalado, necesitamos realizar la configuraci\u00f3n adecuada para Maven. Ya sabemos que esto en Linux significa editar los archivos de configuraci\u00f3n adecuados. Vamos a ello.</p> <ol> <li> <p>En primer lugar necesitamos asegurarnos de que en el apartado anterior de la pr\u00e1ctica hemos a\u00f1adido todos los usuarios necesarios, as\u00ed como sus respectivos roles. Debemos a\u00f1adir el rol de <code>manager-script</code> para permitir que Maven se autentique contra Tomcat y pueda realizar el despliegue.</p> <p>Los roles utilizados por Tomcat vienen detallados en su documentaci\u00f3n, que merece ser consultada:</p> <p></p> <p>En dicha documentaci\u00f3n se nos indica que, por temas de seguridad, es recomendable no otorgar los roles de manager-script o manager-jmx al mismo usuario que tenga el rol de manager-gui. </p> <p>Info</p> <p>Tendremos dos usuarios, uno para la GUI y otro exclusivamente para hacer los deploys de Maven.</p> <p>As\u00ed las cosas, modificamos el archivo <code>/etc/tomcat9/tomcat-users.xml</code> acorde a nuestras necesidades (los nombres de usuario y contrase\u00f1a deber\u00e1n ser los que elij\u00e1is para vosotros):</p> <p></p> </li> <li> <p>Editar el archivo <code>/etc/maven/settings.xml</code>  para indicarle a Maven, un identificador para el servidor sobre el que vamos a desplegar (no es m\u00e1s que un nombre, ponedle el nombre que consider\u00e9is), as\u00ed como las credenciales. Todo esto se har\u00e1 dentro del bloque servers del XML:</p> <p></p> </li> <li> <p>Ahora debemos modificar el <code>POM</code> del proyecto para que haga referencia a que el despliegue se realice con el plugin de Maven para Tomcat. </p> <p>Info</p> <p>No existen plugins oficiales para Tomcat m\u00e1s all\u00e1 de la versi\u00f3n 7 del servidor. No obstante, el plugin para Tomcat 7 sigue funcionando correctamente con Tomcat 9. </p> <p>Otra opci\u00f3n ser\u00eda utilizar el plugin Cargo</p> <p></p> <p>Donde lo que a\u00f1adimos es el bloque </p> <pre><code>&lt;build&gt;\n&lt;finalName&gt;war-deploy&lt;/finalName&gt; #(1)\n&lt;plugins&gt; &lt;plugin&gt;\n&lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;\n&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;\n&lt;version&gt;2.2&lt;/version&gt;\n&lt;configuration&gt;\n&lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt; #(2)\n&lt;server&gt;Tomcat.P.3.1&lt;/server&gt; #(3)\n&lt;path&gt;/myapp&lt;/path&gt; #(4)\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n&lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre> <ol> <li> <p>Nombre final del ejecutable .jar que se va a generar</p> </li> <li> <p>URL del servidor Tomcat donde se har\u00e1 el despliegue. Como en nuestro caso Maven y Tomcat est\u00e1n en el mismo servidor, la URL corresponde a localhost.     Esta URL debe ir seguida por <code>/manager/text</code>, tal y como leemos en la documentaci\u00f3n del plugin.</p> </li> <li> <p>Nombre del server donde se va a desplegar la aplicaci\u00f3n. El nombre debe ser consistente con lo que hayamos puesto en el <code>settings.xml</code> del paso anterior.</p> </li> <li> <p>Nombre que la aplicaci\u00f3n utilizar\u00e1 en el path de la URL</p> </li> </ol> </li> </ol>"},{"location":"P3.1-Tomcat/#despliegue","title":"Despliegue","text":"<p>Teniendo ya todo listo para realizar despliegues, ahora crearemos una aplicaci\u00f3n Java de prueba para ver si podemos desplegarla sobre la arquitectura que hemos montado. Para ello utilizamos el comando:</p> <pre><code>    mvn archetype:generate -DgroupId=raul -DartifactId=war-deploy -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\n</code></pre> <p>Pod\u00e9is sustituir los valores de <code>groupID</code> y <code>artifactId</code> (este ser\u00e1 el nombre de la aplicaci\u00f3n) por lo que quer\u00e1is.</p> <p>Tras generar esta aplicaci\u00f3n, los comandos finales que se utilizan en Maven para desplegar, volver a desplegar o desplegar una aplicaci\u00f3n, son:</p> <ul> <li><code>mvn tomcat7:deploy</code></li> <li><code>mvn tomcat7:redeploy</code></li> <li><code>mvn tomcat7:undeploy</code></li> </ul> <p>As\u00ed pues, tras el despliegue con Maven nos indicar\u00e1 que todo ha ido correctamente con un mensaje de <code>BUILD SUCCESS</code>, tal que as\u00ed:</p> <p></p> <p>Y, accediendo a trav\u00e9s de la GUI, debemos ver que la aplicaci\u00f3n est\u00e1 desplegado y que podemos acceder a ella perfectamente:</p> <p></p>"},{"location":"P3.1-Tomcat/#tarea","title":"Tarea","text":"<p>Realizar el despliegue con la aplicaci\u00f3n de prueba.</p> <p>Repetir el despliegue pero esta vez con otra aplicaci\u00f3n que no es la de prueba. M\u00e1s adelante ya hablaremos de <code>git</code> pero de momento, usaremos los comandos que veremos a continuaci\u00f3n.</p> <p>Nos clonamos el repositorio:</p> <p><code>git clone https://github.com/cameronmcnz/rock-paper-scissors.git</code></p> <p>Nos situamos dentro de \u00e9l:</p> <p><code>cd rock-paper-scissors</code></p> <p>Y cambiamos de rama:</p> <p><code>git checkout patch-1</code></p> <p>Tras esto debemos proceder exactamente igual que en el caso anterior, con la ventaja de que ya tenemos configurados los usuarios de Tomcat y los par\u00e1metros de Maven.</p> <p>As\u00ed pues, s\u00f3lo habr\u00eda que a\u00f1adir el bloque <code>&lt;plugin&gt;...&lt;/plugin&gt;</code> adecuado para poder hacer nuestro despliegue.</p> <p>Task</p> <p>Documenta, incluyendo capturas de pantallas, el proceso que has seguido para realizar el despliegue de esta nueva aplicaci\u00f3n, as\u00ed como el resultado final.</p>"},{"location":"P3.1-Tomcat/#cuestiones","title":"Cuestiones","text":"<p>Hab\u00e9is visto que los archivos de configuraci\u00f3n que hemos tocado contienen contrase\u00f1as en texto plano, por lo que cualquiera con acceso a ellos obtendr\u00eda las credenciales de nuestras herramientas. </p> <p>En principio esto representa un gran riesgo de seguridad, \u00bfsabr\u00edas razonar o averig\u00fcar por qu\u00e9 esto est\u00e1 dise\u00f1ado de esta forma?</p>"},{"location":"P3.1-Tomcat/#referencias","title":"Referencias","text":"<p>Tutorial Tomcat I</p> <p>Tutorial Tomcat II</p> <p>Tutorial Tomcat para Ubuntu</p> <p>Instalaci\u00f3n Maven</p> <p>JSF 3.0 en Tomcat 10 con Java 11</p> <p>Migraci\u00f3n de Java 8 a Java 11</p> <p>Install and configure jdk11 + Tomcat + Maven under Linux system</p> <p>Step-by-step Maven Tomcat WAR file deploy example</p> <p>How to deploy the java application to Tomcat 9 webserver using Maven</p> <p>How to Install Apache Maven on Debian 11 Bullseye</p> <p>How to Deploy a WAR File to Tomcat</p> <p>Migrate Maven Projects to Java 11</p> <p>How to configure Tomcat 9.0 in Maven</p> <p>Github: cameronmcnz/rock-paper-scissors</p> <p>Why are plain text passwords in the config files?</p> <p>How to avoid storing passwords in the clear for tomcat's server.xml Resource definition of a DataSource?</p>"},{"location":"P3.1-Tomcat/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Despliegue manual de un <code>.war</code> en Tomcat correcto y bien documentado 1 punto Despliegue del <code>.war</code> de prueba utilizando maven correcto y bien documentado 0.25 puntos Despliegue de una aplicaci\u00f3n con maven desde un repositorio de Github correcto y bien documentado 4.75 puntos Cuestiones 2 puntos Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 2 puntos"},{"location":"P3.2-NodeJS-Express/","title":"Pr\u00e1ctica 3.2: Despliegue de aplicaciones con Node Express","text":""},{"location":"P3.2-NodeJS-Express/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta pr\u00e1ctica vamos a realizar el despliegue de aplicaciones Node.js sobre un servidor Node Express. Lo curioso de este caso es que el despliegue aqu\u00ed cambia un poco puesto que no se hace sobre el servidor, sino que la aplicaci\u00f3n es el servidor.</p> <p>Warning</p> <p>Comprueba que el servidor Tomcat de pr\u00e1cticas anteriores no est\u00e1 corriendo o nos dar\u00e1 problemas:</p> <pre><code>sudo systemctl status tomcat9\n</code></pre> <p>Y en caso de salir activo, pararlo:</p> <pre><code>sudo systemctl stop tomcat9\n</code></pre>"},{"location":"P3.2-NodeJS-Express/#instalacion-de-nodejs-express-y-test-de-la-primera-aplicacion","title":"Instalaci\u00f3n de Node.js, Express y test de la primera aplicaci\u00f3n","text":"<p>La primera parte de la pr\u00e1ctica es muy sencilla. Consistir\u00e1 en instalar sobre nuestra Debian 11 tanto Node.js como Express y tras ello crear un archivo <code>.js</code> de prueba para comprobar que nuestro primer despliegue funciona correctamente.</p> <p>Para ello, os pod\u00e9is apoyar en este sencillo tutorial.</p> <p>En lugar de acceder a <code>http://localhost:3000</code>, deb\u00e9is acceder desde vuestra m\u00e1quina local a <code>http://IP-maq-virtual:3000</code>, utilizando la IP concreta de vuestra m\u00e1quina virtual.</p> <p>Recordad parar el servidor (CTRL+C) al acabar la pr\u00e1ctica.</p> <p>Task</p> <p>Documenta, incluyendo capturas de pantallas, el proceso que has seguido para realizar el despliegue de esta nueva aplicaci\u00f3n, as\u00ed como el resultado final.</p>"},{"location":"P3.2-NodeJS-Express/#despliegue-de-una-nueva-aplicacion","title":"Despliegue de una nueva aplicaci\u00f3n","text":"<p>Vamos ahora a realizar el despliegue de una aplicaci\u00f3n de terceros para ver c\u00f3mo es el proceso.</p> <p>Se trata de un \"prototipo\" de una especie de CMS que pod\u00e9is encontrar en este repositorio de Github. </p> <p>Tal y como indican las instrucciones del propio repositorio, los pasos a seguir son, en primer lugar, clonar el repositorio a nuesta m\u00e1quina:</p> <p><pre><code>git clone https://github.com/contentful/the-example-app.nodejs.git\n</code></pre> Movernos al nuevo directorio:</p> <pre><code>cd the-example-app.nodejs\n</code></pre> <p>Instalar las librer\u00edas necesarias (paciencia, este proceso puede tardar un buen rato):</p> <pre><code>npm install\n</code></pre> <p>Y, por \u00faltimo, iniciar la aplicaci\u00f3n:</p> <pre><code>npm run start:dev\n</code></pre> <p>Tarea</p> <p>Documenta, incluyendo capturas de pantallas, el proceso que has seguido para realizar el despliegue de esta nueva aplicaci\u00f3n, as\u00ed como el resultado final.</p>"},{"location":"P3.2-NodeJS-Express/#cuestiones","title":"Cuestiones","text":"<p>Cuando ejecut\u00e1is el comando <code>npm run start:dev</code>, lo que est\u00e1is haciendo es ejecutar un script:</p> <ul> <li> <p>\u00bfDonde podemos ver que script se est\u00e1 ejecutando?</p> </li> <li> <p>\u00bfQu\u00e9 comando est\u00e1 ejecutando?</p> </li> </ul> <p>Como ayuda, pod\u00e9is consultar esta informaci\u00f3n.</p>"},{"location":"P3.2-NodeJS-Express/#referencias","title":"Referencias","text":"<p>How to install ExpressJS on Debian 11?</p>"},{"location":"P3.2-NodeJS-Express/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Instalaci\u00f3n de Node.js, Express y despligue de primera aplicaci\u00f3n correcto y bien documentado 3 puntos Despliegue de una nueva aplicaci\u00f3n de forma correcta y bien documentada 3 puntos Cuestiones 2 puntos Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 2 puntos"},{"location":"P3.3-Cluster/","title":"Pr\u00e1ctica 3.3: Despliegue de una aplicaci\u00f3n \"clusterizada\" con Node Express","text":""},{"location":"P3.3-Cluster/#introduccion","title":"Introducci\u00f3n","text":"<p>Cuando se construye una aplicaci\u00f3n de producci\u00f3n, normalmente se busca la forma de optimizar su rendimiento llegando a una soluci\u00f3n de compromiso. En esta pr\u00e1ctica echaremos un vistazo a un enfoque que puede ofrecer una victoria r\u00e1pida cuando se trata de mejorar la manera en que las aplicaciones Node.js manejan la carga de trabajo.</p> <p>Una instancia de Node.js se ejecuta en un solo hilo, lo que significa que en un sistema multin\u00facleo (como la mayor\u00eda de los ordenadores de hoy en d\u00eda), no todos los n\u00facleos ser\u00e1n utilizados por la aplicaci\u00f3n. Para aprovechar los otros n\u00facleos disponibles, podemos lanzar un cluster de procesos Node.js y distribuir la carga entre ellos.</p> <p></p> <p>Tener varios hilos para manejar las peticiones mejora el rendimiento (peticiones/segundo) del servidor, ya que varios clientes pueden ser atendidos simult\u00e1neamente. Veremos c\u00f3mo crear procesos hijos con el m\u00f3dulo de cluster de Node.js para, m\u00e1s tarde, ver c\u00f3mo gestionar el cluster con el gestor de procesos PM2.</p>"},{"location":"P3.3-Cluster/#un-vistazo-rapido-a-los-clusters","title":"Un vistazo r\u00e1pido a los clusters","text":"<p>El m\u00f3dulo de cl\u00faster de Node.js permite la creaci\u00f3n de procesos secundarios (workers) que se ejecutan simult\u00e1neamente y comparten el mismo puerto de servidor. Cada hijo generado tiene su propio ciclo de eventos y memoria. Los procesos secundarios utilizan IPC (comunicaci\u00f3n entre procesos) para comunicarse con el proceso principal de Node.js.</p> <p>Tener m\u00faltiples procesos para manejar las solicitudes entrantes significa que se pueden procesar varias solicitudes simult\u00e1neamente y si hay una operaci\u00f3n de bloqueo/ejecuci\u00f3n prolongada en un worker, los otros workers pueden continuar administrando otras solicitudes entrantes; la aplicaci\u00f3n no se detendr\u00e1 hasta que finalice la operaci\u00f3n de bloqueo.</p> <p>La ejecuci\u00f3n de varios workers tambi\u00e9n permite actualizar la aplicaci\u00f3n en producci\u00f3n con poco o ning\u00fan tiempo de inactividad. Se pueden realizar cambios en la aplicaci\u00f3n y reiniciar los workers uno por uno, esperando que un proceso secundario se genere por completo antes de reiniciar otro. De esta manera, siempre habr\u00e1 workers ejecut\u00e1ndose mientras se produce la actualizaci\u00f3n.</p> <p>Las conexiones entrantes se distribuyen entre los procesos secundarios de dos maneras:</p> <ul> <li> <p>El proceso maestro escucha las conexiones en un puerto y las distribuye entre los workers de forma rotatoria. Este es el enfoque por defecto en todas las plataformas, excepto Windows.</p> </li> <li> <p>El proceso maestro crea un socket de escucha y lo env\u00eda a los workers interesados \u200b\u200bque luego podr\u00e1n aceptar conexiones entrantes directamente.</p> </li> </ul>"},{"location":"P3.3-Cluster/#usando-los-clusters","title":"Usando los clusters","text":""},{"location":"P3.3-Cluster/#primero-sin-cluster","title":"Primero sin cl\u00faster","text":"<p>Para ver las ventajas que ofrece la agrupaci\u00f3n en cl\u00fasteres, comenzaremos con una aplicaci\u00f3n de prueba en Node.js que no usa cl\u00fasteres y la compararemos con una que s\u00ed los usa, se trata de la siguiente:</p> <p><pre><code>const express = require(\"express\");\nconst app = express();\nconst port = 3000;\napp.get(\"/\", (req, res) =&gt; {\nres.send(\"Hello World!\");\n});\napp.get(\"/api/:n\", function (req, res) {\nlet n = parseInt(req.params.n);\nlet count = 0;\nif (n &gt; 5000000000) n = 5000000000;\nfor (let i = 0; i &lt;= n; i++) {\ncount += i;\n}\nres.send(`Final count is ${count}`);\n});\napp.listen(port, () =&gt; {\nconsole.log(`App listening on port ${port}`);\n});\n</code></pre> Se trata de una aplicaci\u00f3n un tanto prefabricada en el sentido de que es algo que jam\u00e1s encontrar\u00edamos en el mundo real. No obstante, nos servir\u00e1 para ilustrar nuestro prop\u00f3sito.</p> <p>Esta aplicaci\u00f3n contiene dos rutas, una ruta ra\u00edz <code>/</code> que devuelve la cadena <code>Hello World!</code> y otra ruta <code>/api/n</code> donde se toma <code>n</code> como par\u00e1metro y va realizando una operaci\u00f3n de suma (el bucle for) cuyo resultado acumula en la variable <code>count</code> que se muestra al final.</p> <p>Si a este par\u00e1metro <code>n</code>, le damos un valor muy alto, nos permitir\u00e1 simular operaciones intensivas y de ejecuci\u00f3n prolongada en el servidor. Le damos como valor l\u00edmite <code>5000000000</code> para evitar una operaci\u00f3n demasiado costosa para nuestro ordenador.</p> <p>Task</p> <ol> <li>Deb\u00e9is conectaros al servidor Debian mediante SSH</li> <li>Deb\u00e9is crear un directorio para el proyecto de esta aplicaci\u00f3n</li> <li>DENTRO del directorio ejecutar\u00e9is 2 comandos:<ol> <li><code>npm init</code> para crear autom\u00e1ticamente la estructura de carpetas y el archivo <code>package.json</code> (Con ir d\u00e1ndole a &lt;ENTER&gt; a todas las preguntas, os basta)</li> <li><code>npm install express</code> para instalar express para este proyecto</li> </ol> </li> <li>Tras esto, DENTRO del directorio, ya pod\u00e9is iniciar la aplicaci\u00f3n con: <code>node nombre_aplicacion.js</code></li> </ol> <p>Para comprobarlo, pod\u00e9is acceder a <code>http://IP-maq-virtual:3000</code> o a <code>http://IP-maq-virtual:3000/api/50</code> donde <code>IP-maq-virtual</code> es la IP del adaptador puente de vuestra Debian.</p> <p>Utilizada un valor de <code>n</code> relativamente peque\u00f1o, como el 50 del ejemplo anterior y comprobar\u00e9is que se ejecutar\u00e1 r\u00e1pidamente, devolviendo una respuesta casi inmediata.</p> <p>Hagamos otra simple comprobaci\u00f3n para valores de <code>n</code> m\u00e1s grandes. Desplegada e iniciada la aplicaci\u00f3n, acceded a la ruta <code>http://IP-maq-virtual:3000/api/5000000000</code>. </p> <p></p> <p>Mientras esta solicitud que tarda unos segundos se est\u00e1 procesando, acceded en otra pesta\u00f1a del navegador a <code>http://IP-maq-virtual:3000</code> o a <code>http://IP-maq-virtual:3000/api/n</code> siendo <code>n</code> el valor que le quer\u00e1is dar.</p> <p></p> <p>Utilizando las devoloper tools, podemos ver el tiempo que tardan en procesarse las solicitudes:</p> <ol> <li>La primera solicitud, al tener un valor de <code>n</code> grande, nos lleva unos cuantos segundos completarla.</li> <li>La segunda solicitud, pese a tener un valor de <code>n</code> que ya hab\u00edamos comprobado que ofrec\u00eda una respuesta casi inmediata, tambi\u00e9n se demora unos segundos.</li> </ol> <p>\u00bfPor qu\u00e9 ocurre esto? Porque el \u00fanico subproceso estar\u00e1 ocupado procesando la otra operaci\u00f3n de ejecuci\u00f3n prolongada. El \u00fanico n\u00facleo de la CPU tiene que completar la primera solicitud antes de que pueda encargarse de la otra.</p>"},{"location":"P3.3-Cluster/#ahora-con-mas-cluster","title":"\u00a1Ahora con m\u00e1s cl\u00faster!","text":"<p>Ahora usaremos el m\u00f3dulo de cl\u00faster en la aplicaci\u00f3n para generar algunos procesos secundarios y ver c\u00f3mo eso mejora las cosas.</p> <p>A continuaci\u00f3n se muestra la aplicaci\u00f3n modificada:</p> <p><pre><code>const express = require(\"express\");\nconst port = 3000;\nconst cluster = require(\"cluster\");\nconst totalCPUs = require(\"os\").cpus().length;\nif (cluster.isMaster) {\nconsole.log(`Number of CPUs is ${totalCPUs}`);\nconsole.log(`Master ${process.pid} is running`);\n// Fork workers.\nfor (let i = 0; i &lt; totalCPUs; i++) {\ncluster.fork();\n}\ncluster.on(\"exit\", (worker, code, signal) =&gt; {\nconsole.log(`worker ${worker.process.pid} died`);\nconsole.log(\"Let's fork another worker!\");\ncluster.fork();\n});\n} else {\nconst app = express();\nconsole.log(`Worker ${process.pid} started`);\napp.get(\"/\", (req, res) =&gt; {\nres.send(\"Hello World!\");\n});\napp.get(\"/api/:n\", function (req, res) {\nlet n = parseInt(req.params.n);\nlet count = 0;\nif (n &gt; 5000000000) n = 5000000000;\nfor (let i = 0; i &lt;= n; i++) {\ncount += i;\n}\nres.send(`Final count is ${count}`);\n});\napp.listen(port, () =&gt; {\nconsole.log(`App listening on port ${port}`);\n});\n}\n</code></pre> Esta aplicaci\u00f3n hace lo mismo que antes pero esta vez estamos generando varios procesos secundarios que compartir\u00e1n el puerto 3000 y que podr\u00e1n manejar las solicitudes enviadas a este puerto. Los procesos de trabajo se generan utilizando el m\u00e9todo <code>child_process.fork()</code>. El m\u00e9todo devuelve un objeto <code>ChildProcess</code> que tiene un canal de comunicaci\u00f3n incorporado que permite que los mensajes se transmitan entre el hijo y su padre.</p> <p>Creamos tantos procesos secundarios como n\u00facleos de CPU hay en la m\u00e1quina en la que se ejecuta la aplicaci\u00f3n. Se recomienda no crear m\u00e1s workers que n\u00facleos l\u00f3gicos en la computadora, ya que esto puede causar una sobrecarga en t\u00e9rminos de costos de programaci\u00f3n. Esto sucede porque el sistema tendr\u00e1 que programar todos los procesos creados para que se vayan ejecutando por turnos en los n\u00facleos.</p> <p>Los workers son creados y administrados por el proceso maestro. Cuando la aplicaci\u00f3n se ejecuta por primera vez, verificamos si es un proceso maestro con <code>isMaster</code>. Esto est\u00e1 determinado por la variable <code>process.env.NODE_UNIQUE_ID</code>. Si <code>process.env.NODE_UNIQUE_ID</code> tiene valor undefined, entonces <code>isMaster</code> ser\u00e1 true.</p> <p>Si el proceso es un maestro, llamamos a <code>cluster.fork()</code> para generar varios procesos. Registramos los ID de proceso maestro y worker. Cuando un proceso secundario muere, generamos uno nuevo para seguir utilizando los n\u00facleos de CPU disponibles.</p> <p>Ahora repetiremos el mismo experimento de antes, primero realizamos una solicitud al servidor con un valor alto <code>n</code>: </p> <p></p> <p>Y ejecutamos r\u00e1pidamente otra solicitud en otra pesta\u00f1a del navegador, midiendo los tiempos de procesamiento de ambas:</p> <p></p> <p>Comprobaremos que \u00e9stos se reducen dr\u00e1sticamente.</p> <p>Note</p> <p>Con varios workers disponibles para aceptar solicitudes, se mejoran tanto la disponibilidad del servidor como el rendimiento.</p> <p>Ejecutar una solicitud en una pesta\u00f1a del navegador y ejecutar r\u00e1pidamente otra en una segunda pesta\u00f1a sirve para mostrarnos la mejora que ofrece la agrupaci\u00f3n en cl\u00fasteres para nuestro ejemplo de una forma m\u00e1s o menos r\u00e1pida, pero es un m\u00e9todo un tanto \"chapucero\" y no es una forma adecuada o confiable de determinar las mejoras de rendimiento.</p> <p>En el siguiente apartado echaremos un vistazo a algunos puntos de referencia que demostrar\u00e1n mejor cu\u00e1nto ha mejorado la agrupaci\u00f3n en cl\u00fasteres nuestra aplicaci\u00f3n.</p>"},{"location":"P3.3-Cluster/#metricas-de-rendimiento","title":"M\u00e9tricas de rendimiento","text":"<p>Realizaremos una prueba de carga en nuestras dos aplicaciones para ver c\u00f3mo cada una maneja una gran cantidad de conexiones entrantes. Usaremos el paquete <code>loadtest</code> para esto.</p> <p>El paquete <code>loadtest</code> nos permite simular una gran cantidad de conexiones simult\u00e1neas a nuestra API para que podamos medir su rendimiento.</p> <p>Para usar <code>loadtest</code>, primero debemos instalarlo globalmente. Tras conectaros por SSH al servidor Debian:</p> <pre><code>npm install -g loadtest\n</code></pre> <p>Luego ejecutamos la aplicaci\u00f3n que queremos probar (<code>node nombre_aplicacion.js</code>). Comenzaremos probando la versi\u00f3n que no utiliza la agrupaci\u00f3n en cl\u00fasteres.</p> <p>Mientras ejecutamos la aplicaci\u00f3n, en otro terminal realizamos la siguiente prueba de carga:</p> <pre><code>loadtest http://localhost:3000/api/500000 -n 1000 -c 100\n</code></pre> <p>El comando anterior enviar\u00e1 1000 solicitudes a la URL dada, de las cuales 100 son concurrentes. El siguiente es el resultado de ejecutar el comando anterior:</p> <p></p> <p>Vemos que con la misma solicitud (con n= 500000) el servidor ha podido manejar 404 solicitudes por segundo con una latencia media de 232.4 milisegundos (el tiempo promedio que tarda en completar una sola solicitud).</p> <p>Intent\u00e9moslo de nuevo, pero esta vez con m\u00e1s solicitudes (y sin cl\u00fasteres):</p> <p></p> <p>Vemos que las m\u00e9tricas arrojan resultados a\u00fan peores.</p> <p>Ahora detenemos nuestra aplicaci\u00f3n sin cl\u00fasters y ejecutamos la que s\u00ed los tiene (<code>node nombre_aplicacion_cluster.js</code>). Ejecutaremos exactamente las mismas pruebas con el objetivo de realizar una comparaci\u00f3n:</p> <p></p> <p></p> <p>Es obvio que los cl\u00fasters permiten manejar una mayor cantidad de peticiones por segundo con una menor latencia.</p>"},{"location":"P3.3-Cluster/#uso-de-pm2-para-administrar-un-cluster-de-nodejs","title":"Uso de PM2 para administrar un cl\u00faster de Node.js","text":"<p>En nuestra aplicaci\u00f3n, hemos usado el m\u00f3dulo <code>cluster</code> de Node.js para crear y administrar manualmente los procesos.</p> <p>Primero hemos determinado la cantidad de workers (usando la cantidad de n\u00facleos de CPU como referencia), luego los hemos generado y, finalmente, escuchamos si hay workers muertos para poder generar nuevos.</p> <p>En nuestra aplicaci\u00f3n de ejemplo muy sencilla, tuvimos que escribir una cantidad considerable de c\u00f3digo solo para administraci\u00f3n la agrupaci\u00f3n en cl\u00fasteres. En una aplicaci\u00f3n de producci\u00f3n es bastante probable que se deba escribir a\u00fan m\u00e1s c\u00f3digo.</p> <p>Existe una herramienta que nos puede ayudar a administrar todo esto un poco mejor: el administrador de procesos <code>PM2</code>. <code>PM2</code> es un administrador de procesos de producci\u00f3n para aplicaciones Node.js con un balanceador de carga incorporado.</p> <p>Cuando est\u00e1 configurado correctamente, <code>PM2</code> ejecuta autom\u00e1ticamente la aplicaci\u00f3n en modo de cl\u00faster, generando workers y se encarga de generar nuevos workers cuando uno de ellos muera.</p> <p><code>PM2</code> facilita la parada, eliminaci\u00f3n e inicio de procesos, adem\u00e1s de disponer de algunas herramientas de monitorizaci\u00f3n que pueden ayudarnos a monitorizar y ajustar el rendimiento de su aplicaci\u00f3n.</p> <p>Para usar <code>PM2</code>, primero instalamos globalmente en nuestra Debian:</p> <pre><code>npm install pm2 -g\n</code></pre> <p>Vamos a utilizarlo con nuestra primera aplicaci\u00f3n, la que no estab \"clusterizada\" en el c\u00f3digo. Para ello ejecutaremos el siguiente comando:</p> <pre><code>pm2 start nombre_aplicacion_sin_cluster.js -i 0\n</code></pre> <p>Donde:</p> <ul> <li> <p><code>-i</code>  le indicar\u00e1 a <code>PM2</code> que inicie la aplicaci\u00f3n en <code>cluster_mode</code> (a diferencia de <code>fork_mode</code>). <p>Si se establece a 0, <code>PM2</code> generar\u00e1 autom\u00e1ticamente tantos workers como n\u00facleos de CPU haya. <p>Y as\u00ed, nuestra aplicaci\u00f3n se ejecuta en modo de cl\u00faster, sin necesidad de cambios de c\u00f3digo. </p> <p>Task</p> <p>Ejecuta y documenta con capturas de pantallas, las mismas pruebas que antes pero utilizando PM2 y comprueba si se obtienen los mismos resultados.</p> <p>Por detr\u00e1s, <code>PM2</code> tambi\u00e9n utiliza el m\u00f3dulo <code>cluster</code> de Node.js, as\u00ed como otras herramientas que facilitan la gesti\u00f3n de procesos.</p> <p>En el Terminal, obtendremos una tabla que muestra algunos detalles de los procesos generados:</p> <p></p> <p>Podemos detener la aplicaci\u00f3n con el siguiente comando:</p> <pre><code>pm2 stop app.js\n</code></pre> <p>La aplicaci\u00f3n se desconectar\u00e1 y la salida por terminal mostrar\u00e1 todos los procesos con un estado <code>stopped</code>.</p> <p></p> <p>En vez de tener pasar siempre las configuraciones cuando ejecuta la aplicaci\u00f3n con <code>pm2 start app.js -i 0</code>, podr\u00edamos facilitarnos la tarea y guardarlas en un archivo de configuraci\u00f3n separado, llamado Ecosystem. </p> <p>Este archivo tambi\u00e9n nos permite establecer configuraciones espec\u00edficas para diferentes aplicaciones.</p> <p>Crearemos el archivo Ecosystem con el siguiente comando:</p> <p></p> <p>Que generar\u00e1 un archivo llamado ecosystem.config.js. Para el caso concreto de nuestra aplicaci\u00f3n, necesitamos modificarlo como se muestra a continuaci\u00f3n:</p> <pre><code>module.exports = {\napps: [\n{\nname: \"nombre_aplicacion\",\nscript: \"nombre_aplicacion_sin_cluster.js\",\ninstances: 0,\nexec_mode: \"cluster\",\n},\n],\n};\n</code></pre> <p>Al configurar <code>exec_mode</code> con el valor <code>cluster</code>, le indica a <code>PM2</code> que balancee la carga entre cada instancia. <code>instances</code> est\u00e1 configurado a 0 como antes, lo que generar\u00e1 tantos workers como n\u00facleos de CPU.</p> <p>La opci\u00f3n <code>-i</code> o <code>instances</code> se puede establecer con los siguientes valores:</p> <ul> <li> <p><code>0</code> o <code>max</code>(en desuso) para \"repartir\" la aplicaci\u00f3n entre todas las CPU</p> </li> <li> <p><code>-1</code> para \"repartir\" la aplicaci\u00f3n en todas las CPU - 1</p> </li> <li> <p><code>n\u00famero</code> para difundir la aplicaci\u00f3n a trav\u00e9s de un n\u00famero concreto de CPU</p> </li> </ul> <p>Ahora podemos ejecutar la aplicaci\u00f3n con:</p> <pre><code>pm2 start ecosystem.config.js\n</code></pre> <p>La aplicaci\u00f3n se ejecutar\u00e1 en modo cl\u00faster, exactamente como antes.</p> <p>Podremos iniciar, reiniciar, recargar, detener y eliminar una aplicaci\u00f3n con los siguientes comandos, respectivamente:</p> <pre><code>$ pm2 start nombre_aplicacion\n$ pm2 restart nombre_aplicacion\n$ pm2 reload nombre_aplicacion\n$ pm2 stop nombre_aplicacion\n$ pm2 delete nombre_aplicacion\n\n# Cuando usemos el archivo Ecosystem:\n$ pm2 [start|restart|reload|stop|delete] ecosystem.config.js\n</code></pre> <p>El comando <code>restart</code> elimina y reinicia inmediatamente los procesos, mientras que el comando <code>reload</code> logra un tiempo de inactividad de 0 segundos donde los workers se reinician uno por uno, esperando que aparezca un nuevo worker antes de matar al anterior.</p> <p>Tambi\u00e9n puede verificar el estado, los registros y las m\u00e9tricas de las aplicaciones en ejecuci\u00f3n.</p> <p>Task</p> <p>Investiga los siguientes comandos y explica que salida por terminal nos ofrecen y para qu\u00e9 se utilizan:</p> <pre><code>pm2 ls\npm2 logs\npm2 monit\n</code></pre> <p>Warning</p> <p>Documenta la realizaci\u00f3n de toda esta pr\u00e1ctica adecuadamente, con las explicaciones y justificaciones necesarias, las respuestas a las preguntas planteadas y las capturas de pantalla pertinentes.</p>"},{"location":"P3.3-Cluster/#cuestiones","title":"Cuestiones","text":"<p>Fij\u00e1os en las siguientes im\u00e1genes:</p> <p></p> <p></p> <p>La primera imagen ilustra los resultados de unas pruebas de carga sobre la aplicaci\u00f3n sin cl\u00faster y la segunda sobre la aplicaci\u00f3n clusterizada.</p> <p>\u00bfSabr\u00edas decir por qu\u00e9 en algunos casos concretos, como este, la aplicaci\u00f3n sin clusterizar tiene mejores resultados?</p>"},{"location":"P3.3-Cluster/#referencias","title":"Referencias","text":"<p>How to install ExpressJS on Debian 11?</p> <p>Improving Node.js Application Performance With Clustering</p>"},{"location":"P3.3-Cluster/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Pruebas correctas y bien documentadas de despliegue de la aplicaci\u00f3n sin cluster 2 puntos Pruebas correctas y bien documentadas de despliegue de la aplicaci\u00f3n con cluster 2 puntos Pruebas correctas y bien documentadas de todas las opciones con loadtest 2 puntos Pruebas correctas y bien documentadas de todas las opciones con PM2 2 puntos Respuestas correctas a las cuestiones 1 puntos Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 1 puntos"},{"location":"P3.4-Heroku/","title":"Pr\u00e1ctica 3.4: Despliegue de una aplicaci\u00f3n Node.js en Heroku (PaaS) y una aplicaci\u00f3n React en Netlify (PaaS)","text":""},{"location":"P3.4-Heroku/#introduccion","title":"Introducci\u00f3n","text":"<p>En la pr\u00e1ctica anterior hemos visto c\u00f3mo desplegar una aplicaci\u00f3n de Node.js sobre un servidor Express en local (en nuestro propio servidor Debian).</p> <p>La pr\u00e1ctica anterior podr\u00eda asemejarse a las pruebas que realiza un desarrollador antes de pasar su aplicaci\u00f3n al entorno de producci\u00f3n. </p> <p>Ya sabemos que entendemos el despliegue o deployment como el proceso de mover nuestro c\u00f3digo t\u00edpicamente de un sistema de control de versiones a una plataforma de hosting donde se aloja y es servida a los usuarios finales. </p> <p>A la hora de desplegar la aplicaci\u00f3n en producci\u00f3n, podr\u00eda utilizarse el m\u00e9todo de copiar los archivos al servidor concreto v\u00eda el vetusto FTP, SSH u otros y desplegarla para dejarla funcionando. No obstante, esta pr\u00e1ctica se acerca m\u00e1s a la realidad ya que utilizaremos un repositorio de Github y una plataforma de PaaS (Platform as a Service) como Heroku o Netlify para desplegar adecuadamente nuestra aplicaci\u00f3n en producci\u00f3n.</p>"},{"location":"P3.4-Heroku/#que-es-github","title":"\u00bfQu\u00e9 es Github?","text":"<p>A pesar de que trataremos un poco m\u00e1s en profundidad Github en el siguiente tema, daremos una breve explicaci\u00f3n aqu\u00ed.</p> <p>GitHub es un servicio basado en la nube que aloja un sistema de control de versiones (VCS) llamado Git. \u00c9ste permite a los desarrolladores colaborar y realizar cambios en proyectos compartidos, a la vez que mantienen un seguimiento detallado de su progreso.</p> <p></p> <p>El control de versiones es un sistema que ayuda a rastrear y gestionar los cambios realizados en un archivo o conjunto de archivos. Utilizado principalmente por ingenieros de software para hacer un seguimiento de las modificaciones realizadas en el c\u00f3digo fuente, el sistema de control de versiones les permite analizar todos los cambios y revertirlos sin repercusiones si se comete un error.</p>"},{"location":"P3.4-Heroku/#que-es-heroku","title":"\u00bfQu\u00e9 es Heroku?","text":"<p>Heroku es una soluci\u00f3n de Plataforma como Servicio (PaaS) basada en la nube para que el cliente solo se preocupe de desarrollar su aplicaci\u00f3n mientras Heroku se encarga de la infraestructura que hay detr\u00e1s.</p> <p>Para proporcionar este servicio se dispone de unos contenedores virtuales que son los encargados de mantener y ejecutar las aplicaciones. Estos contenedores virtuales son totalmente escalables bajo demanda. Tanto en n\u00famero como en capacidades.</p> <p></p> <p>Una ventaja de elegir Heroku es su capacidad de soportar m\u00faltiples lenguajes de programaci\u00f3n. Los principales a utilizar son: Node.js, Ruby, Python, Java, PHP, Go, Scala y Clojure. Aunque esta cantidad de lenguajes puede aumentar en el caso de utilizar Heroku Buildpacks, que permiten compilar las aplicaciones en multitud de ellos m\u00e1s.</p> <p>Note</p> <p>Tanto Github, como Heroku, como Netlify pueden ser controlados desde el terminal de nuestro Linux, por lo que seguiremos el procedimiento de contectarnos v\u00eda SSH a nuestro Debian y realizar las operaciones por terminal.</p>"},{"location":"P3.4-Heroku/#que-es-netlify","title":"\u00bfQu\u00e9 es Netlify?","text":"<p>Netlify es un proveedor de alojamiento en la nube que proporciona servicios de backend sin servidor (serverless) para sitios web est\u00e1ticos. Est\u00e1 dise\u00f1ado para maximizar la productividad en el sentido de que permite a los desarrolladores (especialmente orientados al frontend), y a los ingenieros construir, probar y desplegar r\u00e1pidamente sitios web/aplicaciones.</p> <p>Funciona conect\u00e1ndose a un repositorio de GitHub, de donde extrae el c\u00f3digo fuente. A continuaci\u00f3n, ejecutar\u00e1 un proceso de construcci\u00f3n para pre-renderizar las p\u00e1ginas de nuestro sitio web/aplicaci\u00f3n en archivos est\u00e1ticos.</p> <p></p> <p>Hay numerosas razones a favor de usar Netlify, aqu\u00ed est\u00e1n algunas de ellas:</p> <ul> <li> <p>Netlify hace que sea incre\u00edblemente sencillo desplegar un sitio web - de hecho, la forma m\u00e1s sencilla de lograrlo es utilizar GitHub, GitLab o Bitbucket para configurar el despliegue continuo.</p> </li> <li> <p>Netlify hace que sea s\u00faper f\u00e1cil lanzar un sitio web con su soluci\u00f3n de gesti\u00f3n de DNS incorporada.</p> </li> <li> <p>Podr\u00edamos desplegar f\u00e1cilmente s\u00f3lo una rama espec\u00edfica de nuestro proyecto Git - esto es \u00fatil para probar nuevas caracter\u00edsticas que pueden o no llegar a la rama maestra/principal, o para determinar r\u00e1pidamente c\u00f3mo un PR (Pull Request) afectar\u00e1 a su sitio.</p> </li> <li> <p>Netlify te permite previsualizar cualquier despliegue que hagas o quieras hacer - esto te permite a ti y a tu equipo ver c\u00f3mo se ver\u00e1n los cambios en producci\u00f3n sin tener que desplegarlos en tu sitio existente.</p> </li> <li> <p>Netlify proporciona una pr\u00e1ctica funci\u00f3n de env\u00edo de formularios que nos permite recoger informaci\u00f3n de los usuarios.</p> </li> </ul>"},{"location":"P3.4-Heroku/#creacion-de-nuestra-aplicacion-para-heroku","title":"Creaci\u00f3n de nuestra aplicaci\u00f3n para Heroku","text":"<p>Tras loguearnos por SSH en nuestro Debian, nos crearemos un directorio para albergar la aplicac\u00f3n con el nombre que queramos. En ese directorio, crearemos los 3 archivos (dos <code>.html</code> y un <code>.js</code>)que conformar\u00e1n nuestra sencilla aplicaci\u00f3n de ejemplo:</p> head.htmltail.htmlaplicacion.js <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Esta es la pagina principal&lt;/h1&gt;\n&lt;p&gt;&lt;a href=\"/tailPage\"&gt;Ir a la siguiente pagina&lt;/a&gt;&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;FUNCIONA&lt;/h1&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>var http = require('http');\nvar fs = require('fs'); // para obtener los datos del archivo html\nvar port = process.env.PORT || 8080; //Para que funcione en Heroku ya que da error 137 con el puerto 3000\nhttp.createServer(function (req, res) {\nres.writeHead(200, { 'Content-Type': 'text/html' });\n// req.url almacena el path o ruta de la URL\nvar url = req.url;\nif (url === \"/\") {\n// fs.readFile busca el archivo HTML\n// el primer par\u00e1metro es el path al archivo HTML\n// y el segundo es el callback de la funci\u00f3n\n// si el archivo no se encuentra, la funci\u00f3n devuelve un error\n// si el archivo se encuentra, el contenido del mismo se encuentra en pgres    \nfs.readFile(\"head.html\", function (err, pgres) {\nif (err)\nres.write(\"HEAD.HTML NOT FOUND\");\nelse {\n// Las siguientes 3 lineas\n// tienen la funci\u00f3n de enviar el archivo html\n// y finalizar el proceso de respuesta\nres.writeHead(200, { 'Content-Type': 'text/html' });\nres.write(pgres);\nres.end();\n}\n});\n}\nelse if (url === \"/tailPage\") {\nfs.readFile(\"tail.html\", function (err, pgres) {\nif (err)\nres.write(\"TAIL.HTML NOT FOUND\");\nelse {\nres.writeHead(200, { 'Content-Type': 'text/html' });\nres.write(pgres);\nres.end();\n}\n});\n}\n}).listen(port, function () {\nconsole.log(\"SERVER STARTED PORT: 8080\");\n});\n</code></pre> <p>Ahora, tal y como hacemos siempre a la hora de crear nuestra aplicaci\u00f3n Node.js, con el fin de crear el archivo <code>package.json</code>, utilizaremos en el terminal el comando:</p> <pre><code>npm init\n</code></pre> <p>Podemos probar que nuestra aplicaci\u00f3n funciona perfectamente en local:</p> <pre><code>node aplicacion.js\n</code></pre> <p>Y tras ello, debemos poder acceder, desde nuestra m\u00e1quina anfitriona a <code>http://IP-maq-virtual:8080</code></p> <p>Ya con la aplicaci\u00f3n creada y comprobada, podremos desplegarla en m\u00faltiples plataformas en la nube, como AWS, GCP, Azure, Digital Ocean, Heroku...</p> <p>\u00a1Ojo!</p> <p>Para que nos funcione en Heroku, en el archivo <code>package.json</code> que se nos ha creado al hacer el <code>npm init</code> debemos hacerle una modificaci\u00f3n.</p> <p>En el bloque scripts, debemos borrar lo que haya dentro y dejar \u00fanicamente dentro de \u00e9l:</p> <pre><code>\"start\": \"node aplicacion.js\"\n</code></pre> <p>De forma que Heroku sepa que comando utilizar para iniciar la aplicaci\u00f3n tras desplegarla.</p>"},{"location":"P3.4-Heroku/#proceso-de-despliegue-en-heroku","title":"Proceso de despliegue en Heroku","text":"<p>Para trabajar con Heroku desde nuestro terminal, debemos instalar el propio CLI de Heroku. Consultando la documentaci\u00f3n, vemos que hemos de ejecutar:</p> <pre><code>curl https://cli-assets.heroku.com/install.sh | sh\n</code></pre> <p>Y comprobamos que se ha instalado correctamente consultando su versi\u00f3n:</p> <pre><code>heroku -v\n</code></pre> <p>Lo siguiente ser\u00e1 loguearnos en nuestra cuenta de Heroku mediante el terminal, para ello:</p> <p><pre><code>heroku login\n</code></pre> Esto en teor\u00eda nos abre una pesta\u00f1a del navegador para loguearnos en nuestra cuenta. Puesto que estamos conectados por SSH a nuestra Debian, no suceder\u00e1 esto ya que el \u00fanico puerto por el que nos comunicamos es por el 22. Necesitar\u00edamos un t\u00fanel SSH para redirigir los puertos de la m\u00e1quina Debian remota a la nuestra y que nos abriese el navegador en nuestra m\u00e1quina. </p> <p>Puesto que esto escapa de los objetivos del m\u00f3dulo y con el fin de agilizar el proceso, simplemente copiaremos la URL y la pegaremos en nuestro navegador para loguearnos.</p> <p>Antes de continuar, conviene asegurarnos de que tenemos la \u00faltima versi\u00f3n de git en nuestra Debian:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install git\n</code></pre> <p>Ahora, dentro del directorio que hab\u00edamos creado previamente para nuestra aplicaci\u00f3n, se trata de seguir unos sencillos pasos:</p> <p>Tip</p> <p>Aqu\u00ed aparece explicado con lenguaje llano m\u00e1s adelante en el m\u00f3dulo ya hablaremos con mayor propiedad de estas acciones con git</p> <ol> <li> <p>Nos aseguramos de que nuestro directorio no es a\u00fan un repositorio: <code>git status</code></p> <p>Y lo iniciamos: <code>git init</code></p> <p></p> </li> <li> <p>Ahora a\u00f1adimos todos los archivos presentes en el directorio (<code>.</code>) para ser enviados al repositorio: <code>git add .</code></p> <p>Y los preparamos para que sean envidos al repositorio: <code>git commit -m \"Comentario explicativo del commit\"</code></p> <p></p> </li> <li> <p>Creamos nuestra aplicaci\u00f3n en Heroku: <code>heroku create</code></p> <p></p> <p>Esto crear\u00e1 un git remoto que conectar\u00e1 con nuestro repositorio git local</p> </li> <li> <p>Desplegamos nuestra aplicaci\u00f3n en el server de Heroku : <code>git push heroku master</code></p> <p>Y comprobamos que la instancia est\u00e1 corriendo: <code>heroku ps:scale web=1</code></p> <p></p> <p></p> </li> <li> <p>El comando <code>heroku open</code> abrir\u00eda nuestra aplicaci\u00f3n en el navegador. Sin embargo, por el problema explicado antes de estar conectados por SSH, esto no ocurrir\u00e1. No obstante, podemos acceder a nuestra aplicaci\u00f3n de otra forma r\u00e1pida y sencilla desde nuestro dashboard de Heroku:</p> <ul> <li> <p>Localizamos nuestra aplicaci\u00f3n:</p> <p></p> </li> <li> <p>Y tras hacer click en ella, localizamos el bot\u00f3n que nos permite abrirla y volvemos a hacer click:</p> <p></p> </li> <li> <p>Comprobando que nuestra aplicaci\u00f3n, efectivametne se ha desplegado en Heroku y funciona a la perfecci\u00f3n:</p> <p></p> <p></p> </li> </ul> </li> </ol>"},{"location":"P3.4-Heroku/#aplicacion-para-netlify","title":"Aplicaci\u00f3n para Netlify","text":"<p>Puesto que el inter\u00e9s en este m\u00f3dulo radica en el proceso de despliegue, suponiendo que la parte de desarrollo ya es abordada en otros m\u00f3dulos, vamos a utilizar una aplicaci\u00f3n de ejemplo que nos ahorre tiempo para centrarnos en el despliegue.</p> <p>Nos clonaremos este repositorio:</p> <p><code>git clone https://github.com/StackAbuse/color-shades-generator</code></p>"},{"location":"P3.4-Heroku/#proceso-de-despliegue-en-netlify","title":"Proceso de despliegue en Netlify","text":"<p>Por mera curiosidad y ambici\u00f3n de aprendizaje, vamos a ver dos m\u00e9todos de despliegue en Netlify:</p> <ul> <li>Despliegue manual desde el CLI de Netlify, es decir, desde el terminal, a partir de un directorio local de nuestra m\u00e1quina.</li> <li>Despliegue desde un c\u00f3digo publicado en uno de nuestros repositorios de Github</li> </ul> <p>El primero nos permitir\u00e1 conocer el CLI de Netlify y el segundo nos acercara m\u00e1s a una experiencia real de despliegue.</p> <p>Task</p> <p>Vuestra primera tarea ser\u00e1 registraros en Netlify con vuestro email (no con vuestra cuenta de Github) y decirle que no cuando os pida enlazar con vuestra cuenta de Github (lo haremos m\u00e1s adelante).</p>"},{"location":"P3.4-Heroku/#despliegue-mediante-cli","title":"Despliegue mediante CLI","text":"<p>Una vez registrados, debemos instalar el CLI de Netlify para ejecutar sus comandos desde el terminal:</p> <pre><code>sudo npm install netlify-cli -g\n</code></pre> <p>Est\u00e1 claro que para realizar acciones de deploy, Netlify nos solicitar\u00e1 una autenticaci\u00f3n, esto se hace mediante el comando:</p> <pre><code>netlify login\n</code></pre> <p>El cual nos muestra una pantalla del navegador para que concedamos la autorizaci\u00f3n pertinente. Sin embargo, recordemos el problema de que estamos conectados por SSH a nuestro servidor y no tenemos la posibilidad del uso de un entorno gr\u00e1fico.</p> <p>En este caso, siguiendo las instrucciones de la documentaci\u00f3n:</p> <ul> <li> <p>Generamos el token de acceso</p> <p></p> <p></p> </li> <li> <p>Lo establecemos como variable de ambiente:</p> <p></p> <p>Y nos logueamos <pre><code>netlify login\n</code></pre></p> </li> </ul> <p>Bueno, tenemos el c\u00f3digo de nuestra aplicaci\u00f3n, tenemos nuestra cuenta en Netlify y tenemos el CLI necesario para ejecutar comandos desde el terminal en esa cuenta... \u00bfPodemos proceder al despliegue sin mayores complicaciones?</p> <p>La respuesta es NO, como buenos desarrolladores y en base a experiencias anteriores, ya sab\u00e9is que hay que hacer un build de la aplicaci\u00f3n para, posteriormente, desplegarla. Vamos a ello.</p> <p>En primer lugar, como sabemos, debemos instalar todas las dependencias que vienen indicadas en el archivo <code>package.json</code>:</p> <p><pre><code>npm install\n</code></pre> Y cuando ya las tengamos instaladas podemos proceder a realizar el build:</p> <pre><code>npm run build\n</code></pre> <p>Esto nos crear\u00e1 una nueva carpeta llamada <code>build</code> que contendr\u00e1 la aplicaci\u00f3n que debemos desplegar. Y ya podemos hacer un pre-deploy de la aplicaci\u00f3n de la que hemos hecho build antes:</p> <p><pre><code>netlify deploy\n</code></pre> Nos har\u00e1 algunas preguntas para el desplieuge:</p> <ul> <li>Indicamos que queremos crear y configurar un nuevo site</li> <li>El Team lo dejamos por defecto</li> <li>Le indicamos el nombre que queremos emplear para la web (<code>nombre-practica3-4</code>) y el directorio a utilizar para el deploy (directorio <code>./build</code>).</li> </ul> <p>Y si nos indica que todo ha ido bien e incluso podemos ver el \"borrador\" (Website Draft URL) de la web que nos aporta, podemos pasarla a producci\u00f3n finalmente tal y como nos indica la misma salida del comando:</p> <pre><code>If everything looks good on your draft URL, deploy it to your main site URL with the --prod flag.\nnetlify deploy --prod\n</code></pre> <p>Warning</p> <p>No olvides desplegar finalmente en producci\u00f3n y comprobar que puedes acceder a la URL.</p>"},{"location":"P3.4-Heroku/#despliegue-mediante-conexion-con-github","title":"Despliegue mediante conexi\u00f3n con Github","text":"<p>En primer lugar, vamos a eliminar el site que hemos desplegado antes en Netlify para evitarnos cualquier problema y/o conflicto:</p> <p></p> <p>En segundo lugar, vamos a borrar el directorio donde se halla el repositorio clonado en el paso anterior para as\u00ed poder empezar de 0:</p> <pre><code>rm -rf directorio_repositorio\n</code></pre> <p>Como queremos simular que hemos picado el c\u00f3digo a man o en local y lo vamos a subir a Github por primera vez, nos descargaremos los fuentes en formato <code>.zip</code> sin que tenga ninguna referencia a Github:</p> <p><pre><code>wget https://github.com/StackAbuse/color-shades-generator/archive/refs/heads/main.zip\n</code></pre> Creamos una carpeta nueva y descomprimimos dentro el zip:</p> <pre><code>mkdir practica3.4\n\nunzip main.zip -d practica3.4/\n</code></pre> <p>Entramos en la carpeta donde est\u00e1 el c\u00f3digo:</p> <p><pre><code>cd practica3.4/color-shades-generator-main/\n</code></pre> Ahora debemos crear un repositorio completamente vac\u00edo en Github que se llame <code>practicaTresCuatro</code>:</p> <p></p> <p>Y tras ello, volviendo al terminal a la carpeta donde est\u00e1bamos, la iniciamos como repositorio, a\u00f1adimos todo el contenido de la misma para el commit, hacemos el commit con el mensaje correspondiente y creamos la rama main:</p> <pre><code>$ git init\n$ git add .\n$ git commit -m \"Subiendo el c\u00f3digo...\"\n$ git branch -M main\n</code></pre> <p>Y ahora s\u00f3lo queda referenciar nuestra carpeta al repositorio reci\u00e9n creado en Github y hacer un <code>push</code> para subir todo el contenido del commit a \u00e9l:</p> <pre><code>$ git remote add origin https://github.com/username/practicaTresCuatro.git\n$ git push -u origin main\n</code></pre> <p>Ahora que ya tenemos subido el c\u00f3digo a GitHub, de alguna manera debemos enganchar o enlazar nuestra cuenta de Github con la de Netlify para que \u00e9ste \u00faltimo pueda traerse el c\u00f3digo de all\u00ed, hacer el build y desplegarlo. As\u00ed pues, entramos en nuestro dashboard de Netlify y le damos a importar proyecto existente de <code>git</code>:</p> <p></p> <p>Le indicamos que concretamente de Github:</p> <p></p> <p>Y nos saltar\u00e1 una ventana pidiendo que autoricemos a Netlify a acceder a nuestros repositorios de Github:</p> <p></p> <p>Y luego le indicaremos que no acceda a todos nuestros repositorios sino s\u00f3lo al repositorio que necesitamos, que es donde tenemos el c\u00f3digo de nuestra aplicaci\u00f3n:</p> <p></p> <p>Y ya quedar\u00e1 todo listo:</p> <p></p> <p>Y desplegamos la aplicaci\u00f3n:</p> <p></p> <p>Netlify se encargar\u00e1 de hacer el <code>build</code> de forma autom\u00e1tica tal y como hemos visto en la imagen de arriba, con el comando <code>npm run build</code>, publicando el contenido del directorio <code>build</code>.</p> <p>Atenci\u00f3n</p> <p>Tras el deploy, en \"Site settings\" pode\u00eds y deb\u00e9is cambiar el nombre de la aplicaci\u00f3n por nombre-practica3-4, donde nombre es vuestro nombre.</p> <p>Lo que hemos conseguido de esta forma es que, cualquier cambio que hagamos en el proyecto y del que hagamos <code>commit</code> y <code>push</code> en Github, autom\u00e1ticamente genere un nuevo despliegue en Netlify. Es el principio de lo que m\u00e1s adelante veremos como despliegue continuo.</p> <p>Comprobemos que realmente es as\u00ed:</p> <ul> <li> <p>Dentro de la carpeta <code>public</code> encontramos el archivo <code>robots.txt</code>, cuyo cometido es indicar a los rastreadores de los buscadores a qu\u00e9 URLs del sitio pueden acceder. A este archivo se puede acceder a trav\u00e9s de la URL del site:</p> <p></p> </li> <li> <p>Dentro de la carpeta <code>public</code>, utilizando el editor de texto que prefir\u00e1is en vuestro terminal, modificad el archivo <code>robots.txt</code> para que excluya un directorio que se llame <code>nombre_apellido</code>, utilizando obviamente vuestro nombre y apellido.</p> <pre><code>User-agent: *\nDisallow: /nombre_y_apellido/\n</code></pre> </li> <li> <p>Haz un nuevo <code>commit</code> y <code>push</code> (del caso anterior, recuerda el commando <code>git</code> previo para a\u00f1adir los archivos a hacer commit)</p> </li> <li> <p>Comprueba en el dashboard de Netlify que se ha producido un nuevo deploy de la aplicaci\u00f3n hace escasos segundos</p> <p></p> <p></p> </li> <li> <p>Accede a <code>https://url_de_la_aplicacion/robots.txt</code> y comprueba que, efectivamente, se ve reflejado el cambio</p> <p></p> </li> </ul>"},{"location":"P3.4-Heroku/#cuestiones","title":"Cuestiones","text":"<ol> <li> <p>Investiga y explica que es un Dyno en terminolog\u00eda Heroku.</p> </li> <li> <p>En Heroku no todo es de color de rosa, tiene sus limitaciones y desventajas. Busca, investiga y explica algunas de ellas detalladamente.</p> </li> </ol> <p>Task</p> <p>Documenta la realizaci\u00f3n de toda esta pr\u00e1ctica adecuadamente, con las explicaciones y justificaciones necesarias y las capturas de pantalla pertinentes.</p>"},{"location":"P3.4-Heroku/#referencias","title":"Referencias","text":"<p>\u00bfQu\u00e9 es Github?</p> <p>\u00bfQu\u00e9 es Heroku?</p> <p>Deploying Node.js applications</p> <p>List of all limitations in Heroku platform</p> <p>How to deploy your website to Netlify for free</p> <p>A Step-by-Step Guide: Deploying A Static Site or Single-page App</p> <p>Guide to Deploying a React App to Netlify</p>"},{"location":"P3.4-Heroku/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Despliegue correcto y bien documentado en Heroku 2 puntos Despliegue correcto y bien documentado en Netlify mediante CLI 0.75 puntos Despliegue correcto y bien documentado en Netlify de forma manual desde el dashboard 2 puntos Cambio de nombre del site 0.25 puntos Comprobaci\u00f3n correcta y bien documentada de despliegue autom\u00e1tico al hacer push en Github 3 puntos Respuestas correctas a las cuestiones 1 puntos Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 1 puntos"},{"location":"P3.5-Flask/","title":"Pr\u00e1ctica 3.5: Despliegue de una aplicaci\u00f3n Flask (Python)","text":""},{"location":"P3.5-Flask/#prerrequisitos","title":"Prerrequisitos","text":"<p>Servidor Debian con los siguientes paquetes instalados:</p> <ul> <li>Nginx</li> <li>Gunicorn</li> <li>Pipenv</li> </ul>"},{"location":"P3.5-Flask/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"P3.5-Flask/#que-es-un-framework","title":"\u00bfQu\u00e9 es un framework?","text":"<p>Actualmente en el desarrollo moderno de aplicaciones web se utilizan distintos Frameworks que son herramientas que nos dan un esquema de trabajo y una serie de utilidades y funciones que nos facilita y nos abstrae de la construcci\u00f3n de p\u00e1ginas web din\u00e1micas.</p> <p>En general los Frameworks est\u00e1n asociado a lenguajes de programaci\u00f3n (Ruby on Rails (Ruby), Symphony (PHP)), en el mundo de Python el m\u00e1s conocido es Django pero Flask es una opci\u00f3n que quiz\u00e1s no tenga una curva de aprendizaje tan elevada pero nos posibilita la creaci\u00f3n de aplicaciones web igual de complejas de las que se pueden crear en Django.</p>"},{"location":"P3.5-Flask/#flask","title":"Flask","text":"<p>En la actualidad existen muchas opciones para crear p\u00e1ginas web y muchos lenguajes (PHP, JAVA), y en este caso Flask nos permite crear de una manera muy sencilla aplicaciones web con Python.</p> <p>Flask es un \u201cmicro\u201d Framework escrito en Python y concebido para facilitar el desarrollo de Aplicaciones Web bajo el patr\u00f3n MVC.</p> <p>La palabra \u201cmicro\u201d no designa a que sea un proyecto peque\u00f1o o que nos permita hacer p\u00e1ginas web peque\u00f1as sino que al instalar Flask tenemos las herramientas necesarias para crear una aplicaci\u00f3n web funcional pero si se necesita en alg\u00fan momento una nueva funcionalidad hay un conjunto muy grande extensiones (plugins) que se pueden instalar con Flask que le van dotando de funcionalidad.</p> <p></p> <p>De principio en la instalaci\u00f3n no se tienen todas las funcionalidades que se pueden necesitar pero de una manera muy sencilla se pueden extender el proyecto con nuevas funcionalidades por medio de plugins.</p> <p>El patr\u00f3n MVC es una manera o una forma de trabajar que permite diferenciar y separar lo que es el modelo de datos (los datos que van a tener la App que normalmente est\u00e1n guardados en BD), la vista (p\u00e1gina HTML) y el controlador (donde se gestiona las peticiones de la app web).</p>"},{"location":"P3.5-Flask/#gunicorn","title":"Gunicorn","text":"<p>Cuando se implementa una aplicaci\u00f3n web basada en Python, normalmente se tienen estas tres piezas:</p> <ul> <li>Servidor web (Nginx, Apache)</li> <li>Servidor de aplicaciones WSGI (Gunicorn, uWSGI, mod_wsgi, Waitress)</li> <li>Aplicaci\u00f3n web (Django, Flask, Pyramid, FastAPI)</li> </ul> <p>Los servidores web procesan y distribuyen las solicitudes de los navegadores y otros clientes y env\u00edan respuestas a los mismos.</p> <p>WSGI (Web Server Gateway Interface) proporciona un conjunto de reglas para estandarizar el comportamiento y la comunicaci\u00f3n entre servidores web y aplicaciones web. Mediante el uso de servidores y aplicaciones web compatibles con WSGI, los desarrolladores pueden concentrar su tiempo y energ\u00eda en el desarrollo de aplicaciones web en lugar de administrar la comunicaci\u00f3n entre la aplicaci\u00f3n y el servidor web.</p> <p></p> <p>Finalmente, Gunicorn, que es la abreviatura de Green Unicorn, es un servidor de aplicaciones WSGI que se encuentra entre el servidor web y su aplicaci\u00f3n web, gestionando la comunicaci\u00f3n entre los dos. Acepta solicitudes del servidor y las traduce (a trav\u00e9s de WSGI) en algo que la aplicaci\u00f3n web puede entender antes de pasarla a la aplicaci\u00f3n web real. Env\u00eda respuestas desde la aplicaci\u00f3n web al servidor. Tambi\u00e9n se encarga de ejecutar varias instancias de la aplicaci\u00f3n web, reinici\u00e1ndolas seg\u00fan sea necesario y distribuyendo solicitudes a instancias saludables.</p>"},{"location":"P3.5-Flask/#gestor-de-paquetes-pip","title":"Gestor de paquetes <code>pip</code>","text":"<p><code>pip</code> es el comando para instalar paquetes de Python integrados en las fuentes desde la versi\u00f3n 3.4.</p> <p>Este comando automatiza la conexi\u00f3n al sitio https://pypi.org/, la descarga, la instalaci\u00f3n e incluso la compilaci\u00f3n del m\u00f3dulo solicitado.</p> <p>Adem\u00e1s, se ocupa de las dependencias de cada paquete.</p>"},{"location":"P3.5-Flask/#entornos-virtuales-en-python","title":"Entornos virtuales en Python","text":"<p>Un entorno virtual es una forma de tener m\u00faltiples instancias paralelas del int\u00e9rprete de Python, cada una con diferentes conjuntos de paquetes y diferentes configuraciones. Cada entorno virtual contiene una copia independiente del int\u00e9rprete de Python, incluyendo copias de sus utilidades de soporte.</p> <p>Los paquetes instalados en cada entorno virtual s\u00f3lo se ven en ese entorno virtual y en ning\u00fan otro. Incluso los paquetes grandes y complejos con binarios dependientes de la plataforma pueden ser acorralados entre s\u00ed en entornos virtuales.</p> <p>De esta forma, tendremos entornos independientes entre s\u00ed, parecido a como ocurr\u00eda con los directorios de los proyectos de <code>Node.js</code>. De este modo, los entornos virtuales de Python nos permiten instalar un paquete de Python en una ubicaci\u00f3n aislada en lugar de instalarlo de manera global.</p>"},{"location":"P3.5-Flask/#pipenv","title":"Pipenv","text":"<p><code>Pipenv</code> es una herramienta que apunta a traer todo lo mejor del mundo de empaquetado (bundler, composer, npm, cargo, yarn, etc.) al mundo de Python. </p> <p></p> <p>Autom\u00e1ticamente crea y maneja un entorno virtual para tus proyectos, tambi\u00e9n permite agregar/eliminar paquetes desde tu Pipfile as\u00ed como como instalar/desinstalar paquetes. Tambi\u00e9n genera lo m\u00e1s importante , el archivo <code>Pipfile.lock</code>, que es usado para producir determinado build.</p> <p></p>"},{"location":"P3.5-Flask/#procedimiento-completo-para-el-despliegue","title":"Procedimiento completo para el despliegue","text":"<ol> <li> <p>Instalamos el gestor de paquetes de Python pip:</p> <pre><code>sudo apt-get update\n\nsudo apt-get install python3-pip\n</code></pre> </li> <li> <p>Instalamos el paquete <code>pipenv</code> para gestionar los entornos virtuales:</p> <pre><code>pip3 install pipenv\n</code></pre> </li> <li> <p>Y comprobamos que est\u00e1 instalado correctamente mostrando su versi\u00f3n:</p> <pre><code>PATH=$PATH:/home/raul/.local/bin\n\npipenv --version\n</code></pre> </li> <li> <p>Creamos el directorio en el que almacenaremos nuestro proyecto:</p> <pre><code>sudo mkdir /var/www/nombre_mi_aplicacion\n</code></pre> </li> <li> <p>Al crearlo con <code>sudo</code>, los permisos pertenecen a root:</p> <p></p> </li> <li> <p>Hay que cambiarlo para que el due\u00f1o sea nuestro usuario (<code>raul-debian</code> en mi caso) y pertenezca al grupo <code>www-data</code>, el usuario usado por defecto por el servidor web para correr:</p> <pre><code>sudo chown -R $USER:www-data /var/www/mi_aplicacion\n</code></pre> </li> <li> <p>Establecemos los permisos adecuados a este directorio, para que pueda ser le\u00eddo por todo el mundo:</p> <pre><code>chmod -R 775 /var/www/mi_aplicacion   </code></pre> <p>Warning</p> <p>Es indispensable asignar estos permisos, de otra forma obtendr\u00edamos un error al acceder a la aplicaci\u00f3n cuando pongamos en marcha Nginx</p> </li> <li> <p>Dentro del directorio de nuestra aplicaci\u00f3n, creamos un archivo oculto <code>.env</code> que contendr\u00e1 las variables de entorno necesarias:</p> <pre><code>touch .env\n</code></pre> </li> <li> <p>Editamos el archivo y a\u00f1adimos las variables, indicando cu\u00e1l es el archivo <code>.py</code> de la aplicaci\u00f3n y el entorno, que en nuestro caso ser\u00e1 producci\u00f3n: </p> <p> </p> <p>Nota</p> <p>En el mundo laboral real, se supone que la aplicaci\u00f3n previamente ha pasado por los entornos de dev, test y preprod para el desarrollo y prueba de la misma, antes de pasarla a producci\u00f3n.</p> </li> <li> <p>Iniciamos ahora nuestro entorno virtual. <code>Pipenv</code> cargar\u00e1 las variables de entorno desde el fichero <code>.env</code> de forma autom\u00e1tica:</p> <p><pre><code>pipenv shell\n</code></pre> Veremos que se nos inicia el entorno virtual, cosa que comprobamos porque aparece su nombre al inicio del prompt del shell:</p> <p></p> </li> <li> <p>Usamos <code>pipenv</code> para instalar las dependencias necesarias para nuestro proyecto:</p> <pre><code>pipenv install flask gunicorn\n</code></pre> </li> <li> <p>Vamos ahora a crear la aplicaci\u00f3n Flask m\u00e1s simple posible, a modo de PoC (proof of concept o prueba de concepto). El archivo que contendr\u00e1 la aplicaci\u00f3n propiamente dicha ser\u00e1 <code>application.py</code> y <code>wsgi.py</code> se encargar\u00e1 \u00fanicamente de iniciarla y dejarla corriendo:</p> <p><pre><code>touch application.py wsgi.py\n</code></pre> Y tras crear los archivos, los editamos para dejarlos as\u00ed:</p> <p></p> </li> <li> <p>Corramos ahora nuestra aplicaci\u00f3n a modo de comprobaci\u00f3n con el servidor web integrado de Flask. Si especificamos la direcci\u00f3n <code>0.0.0.0</code> lo que le estamos diciendo al servidor es que escuche en todas sus interfaces, si las tuviera:</p> <p></p> </li> <li> <p>Ahora podremos acceder a la aplicaci\u00f3n desde nuestro ordenador, nuestra m\u00e1quina anfitri\u00f3n, introduciendo en un navegador web: <code>http://IP-maq-virtual:5000</code>:</p> <p></p> <p>Tras la comprobaci\u00f3n, paramos el servidor con <code>CTRL+C</code></p> </li> <li> <p>Comprobemos ahora que Gunicorn funciona correctamente tambi\u00e9n. Si os ha funcionado el servidor de desarrollo de Flask, pod\u00e9is usar el siguiente comando para probar que la alicaci\u00f3n funciona correctamente usando Gunicorn, accediendo con vuestro navegador de la misma forma que en el paso anterior:</p> <p><pre><code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app\n</code></pre> Donde:</p> <ul> <li> <p><code>--workers N</code> establece el n\u00famero de <code>workers</code> o hilos que queremos utilizar, como ocurr\u00eda con Node Express. Depender\u00e1 del n\u00famero de cores que le hayamos dado a la CPU de nuestra m\u00e1quina virtual.</p> </li> <li> <p><code>--bind 0.0.0.0:5000</code> hace que el servidor escuche peticiones por todas sus interfaces de red y en el puerto 5000</p> </li> <li> <p><code>wsgi:app</code> es el nombre del archivo con extensi\u00f3n <code>.py</code> y <code>app</code> es la instancia de la aplicaci\u00f3n Flask dentro del archivo.</p> </li> </ul> </li> <li> <p>Todav\u00eda dentro de nuestro entorno virtual, debemos tomar nota de cual es el path o ruta desde la que se ejecuta <code>gunicorn</code> para poder configurar m\u00e1s adelante un servicio del sistema. Podemos averigurarlo as\u00ed:</p> <p></p> <p>Tip</p> <p>Y tras ello debemos salir de nuestro entorno virtual con el sencillo comando <code>deactivate</code></p> </li> <li> <p>Puesto que ya debemos tener instalado Nginx en nuestro sistema, lo ininciamos y comprobamos que su estado sea activo:</p> <pre><code>sudo systemctl start nginx\n\nsudo systemctl status nginx\n</code></pre> </li> <li> <p>Ya fuera de nuestro entorno virtual, crearemos un archivo para que systemd corra Gunicorn como un servicio del sistema m\u00e1s:</p> <p></p> <p>Donde:</p> <ul> <li><code>User</code>: Establece el usuario que tiene permisos sobre el directorio del proyecto (el que pusist\u00e9is en el paso 5)</li> <li><code>Group</code>: Establece el grupo que tiene permisos sobre el directorio del proyecto (el que pusist\u00e9is en el paso 5)</li> <li><code>Environment</code>: Establece el directorio <code>bin</code> (donde se guardan los binarios ejecutables) dentro del entorno virtual (lo vist\u00e9is en el paso 14)</li> <li><code>WorkingDirectory</code>: Establece el directorio base donde reside nuestro proyecto </li> <li><code>ExecStart</code>: Establece el path donde se encuentra el ejecutable de <code>gunicorn</code> dentro del entorno virtual, as\u00ed como las opciones y comandos con los que se iniciar\u00e1 </li> </ul> <p>Warning</p> <p>Deb\u00e9is cambiar los valores para que coincidan con los de vuestro caso particular.</p> </li> <li> <p>Ahora, como cada vez que se crea un servicio nuevo de <code>systemd</code>, se habilita y se inicia:</p> <pre><code>systemctl enable nombre_mi_servicio\n\nsystemctl start nombre_mi_servicio\n</code></pre> <p>Recordad que el nombre del servicio es el nombre del archivo que creast\u00e9is en el paso anterior.</p> <p>Pasemos ahora a configurar Nginx, que es algo que ya deber\u00edamos tener dominado de cap\u00edtulos anteriores.</p> </li> <li> <p>Creamos un archivo con el nombre de nuestra aplicaci\u00f3n y dentro estableceremos la configuraci\u00f3n para ese sitio web. El archivo, como record\u00e1is, debe estar en <code>/etc/nginx/sites-available/nombre_aplicacion</code> y tras ello lo editamos para que quede:</p> <pre><code>server {\nlisten 80;\nserver_name mi_aplicacion www.mi_aplicacion; #(1)\naccess_log /var/log/nginx/mi_aplicacion.access.log; #(2)\nerror_log /var/log/nginx/mi_aplicacion.error.log;\nlocation / { include proxy_params;\nproxy_pass http://unix:/var/www/nombre_aplicacion/nombre_aplicacion.sock; #(3)\n}\n}   </code></pre> <ol> <li> <p>Nombre del dominio, ya veremos m\u00e1s adelante como el DNS resolver\u00e1 este nombre para acceder a nuestra aplicaci\u00f3n.</p> </li> <li> <p>D\u00f3nde estar\u00e1n ubicados los logs de acceso y de errores.</p> </li> <li> <p>Bloque donde se le indica a Nginx que haga de proxy inverso hacia el socket creado en nuestra propia m\u00e1quina por gunicorn para acceder a nuestra aplicaci\u00f3n Flask.</p> </li> </ol> </li> <li> <p>Recordemos que ahora debemos crear un link simb\u00f3lico del archivo de sitios webs disponibles al de sitios web activos:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/nombre_aplicacion /etc/nginx/sites-enabled/\n</code></pre> <p>Y nos aseguramos de que se ha creado dicho link simb\u00f3lico:</p> <pre><code>ls -l /etc/nginx/sites-enabled/ | grep nombre_aplicacion\n</code></pre> </li> <li> <p>Nos aseguramos de que la configuraci\u00f3n de Nginx no contiene errores, reiniciamos Nginx y comprobamos que se estado es activo:</p> <pre><code>nginx -t\n\nsudo systemctl restart nginx\n\nsudo systemctl status nginx\n</code></pre> </li> <li> <p>Ya no podremos acceder por IP a nuestra aplicaci\u00f3n ya que ahora est\u00e1 siendo servida por Gunicorn y Nginx, necesitamos acceder por su <code>server_name</code>. Puesto que a\u00fan no hemos tratado con el DNS, vamos a editar el archivo <code>/etc/hosts</code> de nuestra m\u00e1quina anfitriona para que asocie la IP de la m\u00e1quina virtual, a nuestro <code>server_name</code>.</p> <p>Este archivo, en Linux, est\u00e1 en: <code>/etc/hosts</code></p> <p>Y en Windows: <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></p> <p>Y deberemos a\u00f1adirle la l\u00ednea:</p> <p><code>192.168.X.X myproject www.myproject</code></p> <p>donde deb\u00e9is sustituir la IP por la que tenga vuestra m\u00e1quina virtual.</p> </li> <li> <p>El \u00faltimo paso es comprobar que todo el desplieuge se ha realizado de forma correcta y est\u00e1 funcionando, para ello accedemos desde nuestra m\u00e1quina anfitri\u00f3n a:</p> <p><code>http://nombre_aplicacion</code></p> <p>O:</p> <p><code>http://www.nombre_aplicacion</code></p> <p>Y deber\u00eda mostraros la misma p\u00e1gina que en el paso 14:</p> <p> </p> </li> </ol> <p>Ejercicio</p> <p>Repite todo el proceso con la aplicaci\u00f3n del siguiente repositorio: <code>https://github.com/raul-profesor/Practica-3.5</code></p> <p>Recuerda que deber\u00e1s clonar el repositorio en tu directorio <code>/var/www</code>:</p> <p><code>git clone https://github.com/raul-profesor/Practica-3.5</code></p> <p>Y, tras activar el entorno virtual dentro del directorio del repositorio clonado, para instalar las dependencias del proyecto de la aplicaci\u00f3n deber\u00e1s hacer:</p> <p><code>pipenv install -r requirements.txt</code></p> <p>Y un \u00faltimo detalle, si mir\u00e1is el c\u00f3digo del proyecto, quee es muy sencillo, ver\u00e9is que Gunicorn debe iniciarse ahora as\u00ed:</p> <pre><code>gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app\n</code></pre> <p>Y el resto ser\u00eda proceder tal y como hemos hecho en esta pr\u00e1ctica.</p> <p>Warning</p> <p>Documenta adecuadamente con explicaciones y capturas de pantalla los procesos de despliegue de ambas aplicaciones en Flask, as\u00ed como las respuestas a las cuestiones planteadas.</p>"},{"location":"P3.5-Flask/#cuestiones","title":"Cuestiones","text":"<p>Cuestion 1</p> <p>Busca, lee, entiende y explica qu\u00e9 es y para que sirve un servidor WSGI</p>"},{"location":"P3.5-Flask/#tareas-de-ampliacion","title":"Tareas de ampliaci\u00f3n","text":"<p>Ampliaci\u00f3n</p> <p>Despliega cualquiera de las dos aplicaciones Flask presentadas aqu\u00ed en Heroku.</p>"},{"location":"P3.5-Flask/#referencias","title":"Referencias","text":"<p>\u00bfQu\u00e9 es Flask?</p> <p>Deploy Flask The Easy Way With Gunicorn and Nginx!</p> <p>Deploy flask app with Nginx using Gunicorn</p>"},{"location":"P3.5-Flask/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Despliegue correcto, completo y bien documentado del primer ejemplo 2 puntos Despliegue correcto, completo y bien documentado del segundo ejemplo 5 puntos Respuestas correctas a las cuestiones 1 puntos Tarea de ampliaci\u00f3n 1 punto Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 2 puntos"},{"location":"P4.1-DNS/","title":"Pr\u00e1ctica 4.1 - Configuraci\u00f3n de un servidor DNS","text":"<p>Nota importante</p> <p>Es muy importante que antes de empezar esta pr\u00e1ctica elimin\u00e9is las entradas que hab\u00e9is ido introduciendo hasta ahora en vuestro archivo <code>/etc/hosts</code> para asegurarnos que realmente la resoluci\u00f3n de nombres va a nuestro servidor DNS. Si no hac\u00e9is esto, resolver\u00e1 los nombres, pensar\u00e9is que est\u00e1 bien pero en realidad estar\u00e1 mal.</p>"},{"location":"P4.1-DNS/#instalacion-de-servidor-dns","title":"Instalaci\u00f3n de servidor DNS","text":"<p>Bind es el est\u00e1ndar de facto para servidores DNS. Es una herramienta de software libre y se distribuye con la mayor\u00eda de plataformas Unix y Linux, donde tambi\u00e9n se le conoce con el sobrenombre de named (name daemon). Bind9 es la versi\u00f3n recomendada para usarse y es la que emplearemos.</p> <p>Para instalar el servidor DNS en Ubuntu Server, usaremos los repositorios oficiales. Por ello, podremos instalarlo como cualquier paquete en Ubuntu:</p> <pre><code>sudo apt-get install bind9 bind9utils bind9-doc </code></pre>"},{"location":"P4.1-DNS/#configuracion-del-servidor","title":"Configuraci\u00f3n del servidor","text":"<p>Puesto que en clase s\u00f3lo vamos a utilizar IPv4, vamos a dec\u00edrselo a Bind, en su archivo general de configuraci\u00f3n. Este archivo <code>named</code> se encuentra en el directorio:</p> <pre><code>/etc/default\n</code></pre> <p>Y para indicarle que s\u00f3lo use IPv4, debemos modificar la l\u00ednea siguiente con el texto resaltado:</p> <pre><code>OPTIONS = \"-u bind -4\"\n</code></pre> <p>El archivo de configuraci\u00f3n principal <code>named.conf</code> de Bind est\u00e1 en el directorio:</p> <pre><code>/etc/bind\n</code></pre> <p>Si lo consultamos veremos lo siguiente:</p> <p></p> <p>Este archivo sirve simplemente para aglutinar o agrupar a los archivos de configuraci\u00f3n que usaremos. Estos 3 includes hacen referencia a los 3 diferentes archivos donde deberemos realizar la verdadera configuraci\u00f3n, ubicados en el mismo directorio.</p>"},{"location":"P4.1-DNS/#configuracion-namedconfoptions","title":"configuraci\u00f3n named.conf.options","text":"<p>Es  una  buena  pr\u00e1ctica  que  hag\u00e1is  siempre  una  copia  de  seguridad  de  un  archivo  de configuraci\u00f3n cada vez que vay\u00e1is a realizar alg\u00fan cambio:</p> <pre><code>sudo cp /etc/bind/named.conf.options /etc/bind/named.conf.options.backup\n</code></pre> <p>Ahora editaremos el archivo <code>named.conf.options</code> e incluiremos los siguientes contenidos:</p> <ul> <li> <p>Por motivos de seguridad, vamos a incluir una lista de acceso para que s\u00f3lo puedan hacer consultas recursivas al servidor aquellos hosts que nosotros decidamos.</p> <p>En nuestro caso, los hosts confiables ser\u00e1n los de la red 192.168.X.0/24 (donde la X depende de vuestra red de casa). As\u00ed pues, justo antes del bloque <code>options {\u2026}</code>, al principio del archivo, a\u00f1adiremos algo as\u00ed:</p> <p></p> </li> </ul> <p>Si nos fijamos el servidor por defecto ya viene configurado para ser un DNS cach\u00e9. El directorio donde se cachear\u00e1n o guardar\u00e1n las zonas es <code>/var/cache/bind</code>.</p> <pre><code>/var/cache/bind\n</code></pre> <ul> <li> <p>Que s\u00f3lo se permitan las consultas recursivas a los hosts que hemos decidido en la lista de acceso anterior</p> </li> <li> <p>No permitir transferencia de zonas a nadie, de momento</p> </li> <li> <p>Configurar el servidor para que escuche consultas DNS en el puerto 53 (por defecto DNS utiliza puerto 53 UDP) y en la IP de su interfaz de la red privada. Deber\u00e9is colocar la IP de la interfaz de vuestra Debian, puesto que resolver\u00e1 las consultas DNS del cliente/s de esa red.</p> </li> <li> <p>Permitir las consultas recursivas, ya que en el primer punto ya le hemos dicho que s\u00f3lo puedan hacerlas los hosts de la ACL.</p> </li> <li> <p>Adem\u00e1s, vamos a comentar la l\u00ednea que pone <code>listen-on-v6 { any; };</code> puesto que no vamos a responder a consultas de IPv6. Para comentarla basta a\u00f1adir al principio de la l\u00ednea dos barras <code>//</code>. Tambi\u00e9n podr\u00eda hacerse con una almohadilla pero aparecer\u00eda resaltado con color ya que estos comentarios los suele utilizar el administrador para aclarar alg\u00fan aspecto de la configuraci\u00f3n.</p> <p></p> </li> </ul> <p>Podemos comprobar si nuestra configuraci\u00f3n es correcta con el comando:</p> <p></p> <p>Si hay alg\u00fan error, nos lo har\u00e1 saber. En caso contrario, nos devuelve a la l\u00ednea de comandos. </p> <p>Reiniciamos el servidor y comprobamos su estado:</p> <p></p>"},{"location":"P4.1-DNS/#configuracion-namedconflocal","title":"Configuraci\u00f3n named.conf.local","text":"<p>En este archivo configuraremos aspectos relativos a nuestras zonas. Vamos a declarar la zona \u201cdeaw.es\u201d. Por ahora simplemente indicaremos que el servidor DNS es maestro para esta zona y donde estar\u00e1 ubicado el archivo de zona que crearemos m\u00e1s adelante:</p> <p></p>"},{"location":"P4.1-DNS/#creacion-del-archivo-de-zona","title":"Creaci\u00f3n del archivo de zona","text":"<p>Vamos a crear el archivo de zona de resoluci\u00f3n directa justo en el directorio que hemos indicado antes y con el mismo nombre que hemos indicado antes.</p> <p>El contenido ser\u00e1 algo as\u00ed (procurad respetar el formato):</p> <p></p> <p>Recordad de teor\u00eda que los registros SOA son para detallar aspectos de la zona autoritativa, los NS para indicar los servidores DNS de la zona y los A las IPs respectivas.</p> <p>Donde aparecen las X deb\u00e9is poner vuestras IPs privadas correspondientes, tanto de vuestro servidor como de vuestro cliente..</p>"},{"location":"P4.1-DNS/#creacion-del-archivo-de-zona-para-la-resolucion-inversa","title":"Creaci\u00f3n del archivo de zona para la resoluci\u00f3n inversa","text":"<p>Recordad que deben existir ambos archivos de zona, uno para la resoluci\u00f3n directa y otro para la inversa. Vamos pues a crear el archivo de zona inversa.</p> <p>En primer lugar, debemos a\u00f1adir las l\u00edneas correspondientes a esta zona inversa en el archivo <code>named.conf.local</code>, igual que hemos hecho antes con la zona de resoluci\u00f3n directa:</p> <p></p> <p>Donde la X es el tercer byte de vuestra red.</p> <p>Y la configuraci\u00f3n de la zona de resoluci\u00f3n inversa:</p> <p></p> <p>Podemos comprobar que la configuraci\u00f3n de las zonas es correcta con el comando adecuado.</p>"},{"location":"P4.1-DNS/#comprobacion-de-las-configuraciones","title":"Comprobaci\u00f3n de las configuraciones","text":"<p>Para comprobar la configuraci\u00f3n de la zona de resoluci\u00f3n directa:</p> <p>m</p> <p>Y para comprobar la configuraci\u00f3n de la zona de resoluci\u00f3n inversa:</p> <p></p> <p>Si todo est\u00e1 bien, devolver\u00e1 OK. En caso de haber alg\u00fan error, nos informar\u00e1 de ello.</p> <p>Reiniciamos el servicio y comprobamos el estado:</p> <p></p> <p>Atenci\u00f3n</p> <p>Es muy importante que el cliente est\u00e9 configurado para usar como servidor DNS el que acabamos de instalar y configurar. Ya sea Windows, ya sea Linux, deb\u00e9is cambiar vuestra configuraci\u00f3n de red para que la m\u00e1quina con la que hag\u00e1is las pruebas utilice este servidor DNS como el principal.</p>"},{"location":"P4.1-DNS/#comprobacion-de-las-resoluciones-y-de-las-consultas","title":"Comprobaci\u00f3n de las resoluciones y de las consultas","text":"<p>Podemos comprobar desde los clientes, con dig o nslookup las resoluciones directas e inversas:</p> Comprobaci\u00f3n usando digComprobaci\u00f3n usando nslookup <p></p> <p></p>"},{"location":"P4.1-DNS/#tarea-a-realizar","title":"Tarea a realizar","text":"<p>Configura el DNS para que resuelva el nombre de vuestro sitio web de la pr\u00e1ctica 3.5 y de la 3.2.</p> <p>Recuerda que con nuestra configuraci\u00f3n actual, para acceder a los sitios web necesitaremos a\u00f1adir el dominio <code>deaw.es</code> en el nombre.</p> <p>Atenci\u00f3n para el informe</p> <p>Documenta toda la pr\u00e1ctica con  las capturas de pantalla correspondientes de cada configuraci\u00f3n y comprobaci\u00f3n..</p>"},{"location":"P4.1-DNS/#cuestiones-finales","title":"Cuestiones finales","text":"<p>Cuesti\u00f3n 1</p> <p>\u00bfQu\u00e9 pasar\u00e1 si un cliente de una red diferente a la tuya intenta hacer uso de tu DNS de alguna manera, le funcionar\u00e1?\u00bfPor qu\u00e9, en qu\u00e9 parte de la configuraci\u00f3n puede verse?</p> <p>Cuesti\u00f3n 2</p> <p>\u00bfPor qu\u00e9 tenemos que permitir las consultas recursivas en la configuraci\u00f3n?</p> <p>Cuesti\u00f3n 3</p> <p>El servidor DNS que acab\u00e1is de montar, \u00bfes autoritativo?\u00bfPor qu\u00e9?</p> <p>Cuesti\u00f3n 4</p> <p>\u00bfD\u00f3nde podemos encontrar la directiva $ORIGIN y para qu\u00e9 sirve?</p> <p>Cuesti\u00f3n 5</p> <p>\u00bfUna zona es id\u00e9ntico a un dominio? </p> <p>Cuesti\u00f3n 6</p> <p>\u00bfPueden editarse los archivos de zona de un servidor esclavo/secundario?</p> <p>Cuesti\u00f3n 7</p> <p>\u00bfPor qu\u00e9 podr\u00eda querer tener m\u00e1s de un servidor esclavo para una misma zona?</p> <p>Cuesti\u00f3n 8</p> <p>\u00bfCu\u00e1ntos servidores ra\u00edz existen?</p> <p>Cuesti\u00f3n 9</p> <p>\u00bfQu\u00e9 es una consulta iterativa de referencia?</p> <p>Cuesti\u00f3n 10</p> <p>En una resoluci\u00f3n inversa, \u00bfa qu\u00e9 nombre se mapear\u00eda la direcci\u00f3n IP 172.16.34.56?</p>"},{"location":"P4.1-DNS/#evaluacion","title":"Evaluaci\u00f3n","text":"Criterio Puntuaci\u00f3n Configuraci\u00f3n correcta del servidor y zona DNS 3 puntos Evidencias de las comprobaciones del correcto funcionamento 2 puntos Se ha utilizado SSH 0.5 puntos Introducci\u00f3n de IPs de ejercicios anteriores para la resoluci\u00f3n DNS 1 Cuestiones finales 2.5 puntos puntos Se ha prestado especial atenci\u00f3n al formato del documento, utilizando la plantilla actualizada y haciendo un correcto uso del lenguaje t\u00e9cnico 1 punto"},{"location":"P5.1/","title":"Enunciado ejercicios Git y GitHub","text":""},{"location":"P5.1/#repositorio-deaw","title":"Repositorio DEAW","text":"<ol> <li> <p>Crear un repositorio en vuestro GitHub llamado DEAW.</p> </li> <li> <p>Clonar vuestro repositorio en local.</p> </li> </ol>"},{"location":"P5.1/#readme","title":"README","text":"<ol> <li>Crear (si no lo hab\u00e9is creado ya) en vuestro repositorio local un documento README.md.</li> </ol> <p>Note</p> <p>Escribir un peque\u00f1o texto en este README a prop\u00f3sito del repositorio y el m\u00f3dulo para el que se utilizar\u00e1\u00b7</p>"},{"location":"P5.1/#commit-inicial","title":"Commit inicial","text":"<ol> <li>Realizar un commit inicial con el comentario <code>Comenzamos con los ejercicios de Git</code></li> </ol>"},{"location":"P5.1/#push-inicial","title":"Push inicial","text":"<ol> <li>Subir los cambios al repositorio remoto.</li> </ol>"},{"location":"P5.1/#ignorar-archivos","title":"Ignorar archivos","text":"<ol> <li> <p>Crear en el repositorio local un fichero llamado privado.txt.</p> </li> <li> <p>Crear en el repositorio local una carpeta llamada privada.</p> </li> <li> <p>Realizar los cambios oportunos para que tanto el archivo como la carpeta sean ignorados por git.</p> </li> </ol>"},{"location":"P5.1/#anadir-fichero-1txt","title":"A\u00f1adir fichero 1.txt","text":"<ol> <li>A\u00f1adir fichero 1.txt al repositorio local.</li> </ol>"},{"location":"P5.1/#crear-el-tag-v01","title":"Crear el tag v0.1","text":"<ol> <li>Crear un tag v0.1.</li> </ol>"},{"location":"P5.1/#subir-el-tag-v01","title":"Subir el tag v0.1","text":"<ol> <li>Subir los cambios al repositorio remoto.</li> </ol>"},{"location":"P5.1/#cuenta-de-github","title":"Cuenta de GitHub","text":"<ol> <li> <p>Poner una foto en vuestro perfil de GitHub.</p> </li> <li> <p>Poner el doble factor de autentificaci\u00f3n en vuestra cuenta de GitHub.</p> </li> </ol>"},{"location":"P5.1/#uso-social-de-github","title":"Uso social de GitHub","text":"<ol> <li> <p>Preguntar los nombres de usuario de GitHub de 2 de tus compa\u00f1eros de clase, b\u00fascalos, y sigueles.</p> </li> <li> <p>Seguir los repositorios DEAW del resto de tus compa\u00f1eros.</p> </li> <li> <p>A\u00f1adir una estrella a los repositorios DEAW del resto de tus compa\u00f1eros.</p> </li> </ol>"},{"location":"P5.1/#crear-una-tabla","title":"Crear una tabla","text":"<ol> <li>Crear una tabla de este estilo en el fichero README.md con la informaci\u00f3n de varios de tus compa\u00f1eros de clase:</li> </ol> NOMBRE GITHUB Nombre del compa\u00f1ero 1 enlace a github 1 Nombre del compa\u00f1ero 2 enlace a github 1 Nombre del compa\u00f1ero 3 enlace a github 3"},{"location":"P5.1/#colaboradores","title":"Colaboradores","text":"<ol> <li>Poner a github.com/raul-profesor como colaborador del repositorio DEAW</li> </ol>"},{"location":"P5.1/#notas","title":"Notas","text":"<ol> <li> <p>Este ejercicio es continuaci\u00f3n del anterior por lo que tendr\u00e9is que seguir trabajando en el repositorio DEAW.</p> </li> <li> <p>Tambi\u00e9n tendre\u00eds que ir poniendo los comandos que hab\u00e9is tenido que utilizar durante todos los ejercicios y las explicaciones y capturas de pantalla que consider\u00e9is necesarias  en el informe.</p> </li> </ol>"},{"location":"P5.1/#crear-una-rama-v02","title":"Crear una rama v0.2","text":"<ol> <li> <p>Crear una rama v0.2.</p> </li> <li> <p>Posiciona tu carpeta de trabajo en esta rama.</p> </li> </ol>"},{"location":"P5.1/#anadir-fichero-2txt","title":"A\u00f1adir fichero 2.txt","text":"<ol> <li>A\u00f1adir un fichero 2.txt en la rama v0.2.</li> </ol>"},{"location":"P5.1/#crear-rama-remota-v02","title":"Crear rama remota v0.2","text":"<ol> <li>Subir los cambios al repositorio remoto.</li> </ol>"},{"location":"P5.1/#merge-directo","title":"Merge directo","text":"<ol> <li> <p>Posicionarse en la rama master.</p> </li> <li> <p>Hacer un merge de la rama v0.2 en la rama master.</p> </li> </ol>"},{"location":"P5.1/#merge-con-conflicto","title":"Merge con conflicto","text":"<ol> <li> <p>En la rama master poner Hola en el fichero 1.txt y hacer commit.</p> </li> <li> <p>Posicionarse en la rama v0.2 y poner Adios en el fichero \"1.txt\" y hacer commit.</p> </li> <li> <p>Posicionarse de nuevo en la rama master y hacer un merge con la rama v0.2</p> </li> </ol>"},{"location":"P5.1/#listado-de-ramas","title":"Listado de ramas","text":"<ol> <li>Listar las ramas con merge y las ramas sin merge.</li> </ol>"},{"location":"P5.1/#arreglar-conflicto","title":"Arreglar conflicto","text":"<ol> <li>Arreglar el conflicto anterior y hacer un commit.</li> </ol>"},{"location":"P5.1/#borrar-rama","title":"Borrar rama","text":"<ol> <li> <p>Crear un tag v0.2</p> </li> <li> <p>Borrar la rama v0.2</p> </li> </ol>"},{"location":"P5.1/#listado-de-cambios","title":"Listado de cambios","text":"<ol> <li>Listar los distintos commits con sus ramas y sus tags.</li> </ol>"},{"location":"P5.1/#referencias","title":"Referencias","text":"<p>Pro Git book, written by Scott Chacon and Ben Straub and published by Apress</p>"},{"location":"P5.2/","title":"Ejercicios Git y Github (II)","text":"<p>Nota</p> <p>Cuando se habla de zona de intercambio temporal o zona staging, estamos hablando de un <code>add</code></p> <p></p> <p>Si ten\u00e9is dudas para realizar estos ejercicios, pod\u00e9is consultar la siguiente web</p>"},{"location":"P5.2/#enunciados","title":"Enunciados","text":""},{"location":"P5.2/#ejercicios-de-creacion-y-actualizacion-de-repositorios","title":"Ejercicios de creaci\u00f3n y actualizaci\u00f3n de repositorios","text":""},{"location":"P5.2/#ejercicio-1","title":"Ejercicio 1","text":"<p>Configurar Git definiendo el nombre del usuario, el correo electr\u00f3nico y activar el coloreado de la salida. </p> <p>Mostrar la configuraci\u00f3n final.</p>"},{"location":"P5.2/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crear un repositorio nuevo con el nombre libro y mostrar su contenido.</p>"},{"location":"P5.2/#ejercicio-3","title":"Ejercicio 3","text":"<p>Comprobar el estado del repositorio.</p> <p>Crear un fichero <code>indice.txt</code> con el siguiente contenido:</p> <pre><code>Cap\u00edtulo 1: Introducci\u00f3n a Git\nCap\u00edtulo 2: Flujo de trabajo b\u00e1sico\nCap\u00edtulo 3: Repositorios remotos\n</code></pre> <p>Comprobar de nuevo el estado del repositorio.</p> <p>A\u00f1adir el fichero a la zona de intercambio temporal.</p> <p>Volver a comprobar una vez m\u00e1s el estado del repositorio.</p>"},{"location":"P5.2/#ejercicio-4","title":"Ejercicio 4","text":"<p>Realizar un commit de los \u00faltimos cambios con el mensaje \u201cA\u00f1adido \u00edndice del libro.\u201d y ver el estado del repositorio.</p>"},{"location":"P5.2/#ejercicio-5","title":"Ejercicio 5","text":"<p>Cambiar el fichero <code>indice.txt</code> para que contenga lo siguiente:</p> <pre><code>Cap\u00edtulo 1: Introducci\u00f3n a Git\nCap\u00edtulo 2: Flujo de trabajo b\u00e1sico\nCap\u00edtulo 3: Gesti\u00f3n de ramas\nCap\u00edtulo 4: Repositorios remotos\n</code></pre> <p>Mostrar los cambios con respecto a la \u00faltima versi\u00f3n guardada en el repositorio.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas\u201d.</p>"},{"location":"P5.2/#ejercicio-6","title":"Ejercicio 6","text":"<p>Mostrar los cambios de la \u00faltima versi\u00f3n del repositorio con respecto a la anterior.</p> <p>Cambiar el mensaje del \u00faltimo commit por \u201cA\u00f1adido cap\u00edtulo 3 sobre gesti\u00f3n de ramas al \u00edndice.\u201d</p> <p>Volver a mostrar los \u00faltimos cambios del repositorio.</p>"},{"location":"P5.2/#ejercicios-de-manejo-del-historial-de-cambios","title":"Ejercicios de manejo del historial de cambios","text":""},{"location":"P5.2/#ejercicio-1_1","title":"Ejercicio 1","text":"<p>Mostrar el historial de cambios del repositorio.</p> <p>Crear la carpeta capitulos y crear dentro de ella el fichero capitulo1.txt con el siguiente texto.</p> <p><code>Git es un sistema de control de versiones ideado por Linus Torvalds.</code></p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 1.\u201d Volver a mostrar el historial de cambios del repositorio.</p>"},{"location":"P5.2/#ejercicio-2_1","title":"Ejercicio 2","text":"<p>Crear el fichero <code>capitulo2.txt</code> en la carpeta capitulos con el siguiente texto.</p> <p><code>El flujo de trabajo b\u00e1sico con Git consiste en:  1- Hacer cambios en el repositorio.  2- A\u00f1adir los cambios a la zona de intercambio temporal. 3- Hacer un commit de los cambios.</code></p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 2.\u201d</p> <p>Mostrar las diferencias entre la \u00faltima versi\u00f3n y dos versiones anteriores.</p>"},{"location":"P5.2/#ejercicio-3_1","title":"Ejercicio 3","text":"<p>Crear el fichero capitulo3.txt en la carpeta capitulos con el siguiente texto.</p> <p><code>Git permite la creaci\u00f3n de ramas lo que permite tener distintas versiones del mismo proyecto y trabajar de manera simultanea en ellas.</code></p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 3.\u201d</p> <p>Mostrar las diferencias entre la primera y la \u00faltima versi\u00f3n del repositorio.</p>"},{"location":"P5.2/#ejercicio-4_1","title":"Ejercicio 4","text":"<p>A\u00f1adir al final del fichero <code>indice.txt</code> la siguiente l\u00ednea:</p> <p><code>Cap\u00edtulo 5: Conceptos avanzados</code></p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit de los cambios con el mensaje \u201cA\u00f1adido cap\u00edtulo 5 al \u00edndice.\u201d.</p> <p>Mostrar qui\u00e9n ha hecho cambios sobre el fichero <code>indice.txt</code>.</p>"},{"location":"P5.2/#ejercicios-de-deshacer-cambios","title":"Ejercicios de deshacer cambios","text":""},{"location":"P5.2/#ejercicio-1_2","title":"Ejercicio 1","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo.</p> <p>Comprobar el estado del repositorio.</p> <p>Deshacer los cambios realizados en el fichero <code>indice.txt</code> para volver a la versi\u00f3n anterior del fichero.</p> <p>Volver a comprobar el estado del repositorio.</p>"},{"location":"P5.2/#ejercicio-2_2","title":"Ejercicio 2","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Comprobar de nuevo el estado del repositorio.</p> <p>Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.</p> <p>Comprobar de nuevo el estado del repositorio.</p> <p>Deshacer los cambios realizados en el fichero <code>indice.txt</code> para volver a la versi\u00f3n anterior del fichero.</p> <p>Volver a comprobar el estado del repositorio.</p>"},{"location":"P5.2/#ejercicio-3_2","title":"Ejercicio 3","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo.</p> <p>Eliminar el fichero <code>capitulos/capitulo3.txt</code>.</p> <p>A\u00f1adir un fichero nuevo <code>capitulos/capitulo4.txt</code> vac\u00edo.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Comprobar de nuevo el estado del repositorio.</p> <p>Quitar los cambios de la zona de intercambio temporal, pero mantenerlos en el directorio de trabajo.</p> <p>Comprobar de nuevo el estado del repositorio.</p> <p>Deshacer los cambios realizados para volver a la versi\u00f3n del repositorio.</p> <p>Volver a comprobar el estado del repositorio.</p>"},{"location":"P5.2/#ejercicio-4_2","title":"Ejercicio 4","text":"<p>Eliminar la \u00faltima l\u00ednea del fichero <code>indice.txt</code> y guardarlo.</p> <p>Eliminar el fichero <code>capitulos/capitulo3.txt</code>.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cBorrado accidental.\u201d</p> <p>Comprobar el historial del repositorio.</p> <p>Deshacer el \u00faltimo commit pero mantener los cambios anteriores en el directorio de trabajo y la zona de intercambio temporal.</p> <p>Comprobar el historial y el estado del repositorio.</p> <p>Volver a hacer el commit con el mismo mensaje de antes.</p> <p>Deshacer el \u00faltimo commit y los cambios anteriores del directorio de trabajo volviendo a la versi\u00f3n anterior del repositorio.</p> <p>Comprobar de nuevo el historial y el estado del repositorio.</p>"},{"location":"P5.2/#ejercicios-de-gestion-de-ramas","title":"Ejercicios de gesti\u00f3n de ramas","text":""},{"location":"P5.2/#ejercicio-1_3","title":"Ejercicio 1","text":"<p>Crear una nueva rama bibliografia y mostrar las ramas del repositorio.</p>"},{"location":"P5.2/#ejercicio-2_3","title":"Ejercicio 2","text":"<p>Crear el fichero <code>capitulos/capitulo4.txt</code> y a\u00f1adir el texto siguiente</p> <p>En este cap\u00edtulo veremos c\u00f3mo usar GitHub para alojar repositorios en remoto.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit con el mensaje \u201cA\u00f1adido cap\u00edtulo 4.\u201d</p> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p>"},{"location":"P5.2/#ejercicio-3_3","title":"Ejercicio 3","text":"<p>Cambiar a la rama bibliografia.</p> <p>Crear el fichero <code>bibliografia.txt</code> y a\u00f1adir la siguiente referencia</p> <p><code>Chacon, S. and Straub, B. Pro Git. Apress.</code></p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit con el mensaje \u201cA\u00f1adida primera referencia bibliogr\u00e1fica.\u201d</p> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p>"},{"location":"P5.2/#ejercicio-4_3","title":"Ejercicio 4","text":"<p>Fusionar la rama bibliografia con la rama master.</p> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p> <p>Eliminar la rama bibliografia.</p> <p>Mostrar de nuevo la historia del repositorio incluyendo todas las ramas.</p>"},{"location":"P5.2/#ejercicio-5_1","title":"Ejercicio 5","text":"<p>Crear la rama bibliografia.</p> <p>Cambiar a la rama bibliografia.</p> <p>Cambiar el fichero <code>bibliografia.txt</code> para que contenga las siguientes referencias:</p> <pre><code>Scott Chacon and Ben Straub. Pro Git. Apress.\nRyan Hodson. Ry\u2019s Git Tutorial. Smashwords (2014)\n</code></pre> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d</p> <p>Cambiar a la rama master.</p> <p>Cambiar el fichero <code>bibliografia.txt</code> para que contenga las siguientes referencias:</p> <pre><code>Chacon, S. and Straub, B. Pro Git. Apress.\nLoeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly.\n</code></pre> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cA\u00f1adida nueva referencia bibliogr\u00e1fica.\u201d</p> <p>Fusionar la rama bibliografia con la rama master.</p> <p>Resolver el conflicto dejando el fichero <code>bibliografia.txt</code> con las referencias:</p> <pre><code>Chacon, S. and Straub, B. Pro Git. Apress.\nLoeliger, J. and McCullough, M. Version control with Git. O\u2019Reilly.\nHodson, R. Ry\u2019s Git Tutorial. Smashwords (2014)\n</code></pre> <p>A\u00f1adir los cambios a la zona de intercambio temporal y hacer un commit con el mensaje \u201cResuelto conflicto de bibliograf\u00eda.\u201d</p> <p>Mostrar la historia del repositorio incluyendo todas las ramas.</p>"},{"location":"P5.2/#ejercicios-de-repositorios-remotos","title":"Ejercicios de repositorios remotos","text":""},{"location":"P5.2/#ejercicio-1_4","title":"Ejercicio 1","text":"<p>Crear un nuevo repositorio p\u00fablico en GitHub con el nombre <code>libro-git</code>.</p> <p>A\u00f1adirlo al repositorio local del libro.</p> <p>Mostrar todos los repositorios remotos configurados.</p>"},{"location":"P5.2/#ejercicio-2_4","title":"Ejercicio 2","text":"<p>A\u00f1adir los cambios del repositorio local al repositorio remoto de GitHub.</p> <p>Acceder a GitHub y comprobar que se han subido los cambios mostrando el historial de versiones.</p>"},{"location":"P5.2/#ejercicio-3_4","title":"Ejercicio 3","text":"<p>Colaborar en el repositorio remoto <code>libro-git</code> de otro usuario.</p> <p>Clonar su repositorio <code>libro-git</code>.</p> <p>A\u00f1adir el fichero <code>autores.txt</code> que contenga el nombre del usuario y su correo electr\u00f3nico.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit con el mensaje \u201cA\u00f1adido autor.\u201d</p> <p>Subir los cambios al repositorio remoto.</p>"},{"location":"P5.2/#ejercicio-4_4","title":"Ejercicio 4","text":"<p>Hacer una bifurcaci\u00f3n del repositorio remoto <code>asalber/libro-git</code> en GitHub.</p> <p>Clonar el repositorio creado en la cuenta de GitHub del usuario.</p> <p>Crear una nueva rama autoria y activarla.</p> <p>A\u00f1adir el nombre del usuario y su correo al fichero <code>autores.txt</code>.</p> <p>A\u00f1adir los cambios a la zona de intercambio temporal.</p> <p>Hacer un commit con el mensaje \u201cA\u00f1adido nuevo autor.\u201d</p> <p>Subir los cambios de la rama autoria al repositorio remoto en GitHub.</p> <p>Hacer un Pull Request de los cambios en la rama autoria.</p>"},{"location":"P5.3/","title":"Git avanzado - Aprendiendo branching","text":""},{"location":"P5.3/#practica-opcional","title":"Pr\u00e1ctica opcional","text":"<p>Intenta resolver el m\u00e1ximo de niveles posible de esta p\u00e1gina interactiva dedicada a aprendier branching: https://learngitbranching.js.org/?locale=es_ES</p>"},{"location":"P6.1/","title":"Pr\u00e1ctica 6.1 - Dockerizaci\u00f3n del despliegue de una aplicaci\u00f3n Node.js","text":""},{"location":"P6.1/#introduccion","title":"Introducci\u00f3n","text":"<p>En este caso vamos a Dockerizar la aplicaci\u00f3n que ya desplegamos en la pr\u00e1ctica 3.2.</p>"},{"location":"P6.1/#por-que-dockerizar","title":"\u00bfPor qu\u00e9 dockerizar?","text":"<p>Si uno trata de informarse, encontrar\u00e1 m\u00faltiples y variadas razones para dockerizar nuestras aplicaciones y servicios.</p> <p>Por citar s\u00f3lo algunas:</p> <p>1. Configuraci\u00f3n r\u00e1pida del entorno en local para el equipo de desarrollo: si todos los servicios est\u00e1n implementados con contenedores, es muy r\u00e1pida la configuraci\u00f3n de dicho entorno.</p> <p>2. Evita el cl\u00e1sico \"en mi m\u00e1quina funciona\": gran parte de los problemas de desarrollo provienen de la propia configuraci\u00f3n que los integrantes del equipo de desarrollo tienen de su entorno. Con los servicios en contenedores, esto queda solucionado en gran medida.</p> <p>3. Despliegues m\u00e1s r\u00e1pidos</p> <p>4. Mejor control de versiones: como ya sab\u00e9is, se puede etiquetar (tags), lo que ayuda en el CONTROL DE VERSIONES.</p> <p>5. Rollbacks m\u00e1s f\u00e1ciles: puesto que se tienen las cosas mas controladas por la versi\u00f3n, es m\u00e1s f\u00e1cil revertir el c\u00f3digo. A veces, simplemente apuntando a su versi\u00f3n de trabajo anterior.</p> <p>6. F\u00e1cil configuraci\u00f3n de m\u00faltiples entornos: como hacen la mayor\u00eda de los equipos de desarrollo, se establece un entorno local, de integraci\u00f3n, de puesta en escena (preprod) y de producci\u00f3n. Esto se hace m\u00e1s f\u00e1cil cuando los servicios est\u00e1n en contenedores y, la mayor\u00eda de las veces, con s\u00f3lo un cambio de VARIABLES DE ENTORNO.</p> <p>7. Apoyo de la comunidad: existe una fuerte comunidad de ingenieros de software que continuamente contribuyen con grandes im\u00e1genes que pueden ser reutilizadas para desarrollar un gran software. \u00bfPor qu\u00e9 reinventar la rueda, no?</p>"},{"location":"P6.1/#despliegue-con-docker","title":"Despliegue con Docker","text":"<p>En primer lugar, si eliminast\u00e9is el repositorio en su momento, deb\u00e9is volver a clonarlo en vuestra Debian, en caso contrario obviad este paso:</p> <p><pre><code>git clone https://github.com/contentful/the-example-app.nodejs.git\n</code></pre> Ahora, puesto que la aplicaci\u00f3n ya viene con el <code>Dockerfile</code> necesario dentro del directorio para construir la imagen y correr el contenedor, vamos a estudiar su contenido.</p> <p>Tarea</p> <p>Completa este Dockerfile con las opciones/directivas adecuadas, leed los comentarios y pod\u00e9is apoyaros en la teor\u00eda, en este cheatsheet, en este otro o en cualquiera que encontr\u00e9is.</p> <pre><code>_____ node:9 #(1) \n_____ /app #(2)\n_____ npm install -g contentful-cli #(3)\n_____ package.json . #(4)\n_____ npm install #(5)\n_____ . . #(6)\n_____ node #(7)\n_____ 3000 #(8)\n_____ [\"npm\", \"run\", \"start:dev\"] #(9)\n</code></pre> <ol> <li>Con <code>_____</code> indicamos que vamos a utilizar la imagen de Docker Hub oficial de Node, en su versi\u00f3n 9   </li> <li><code>_____</code> define el directorio sobre el que se ejecutar\u00e1n las subsiguientes instrucciones del <code>Dockerfile</code> </li> <li><code>_____</code> ejecuta un comando en una nueva capa de la imagen (podemos tener varios comandos <code>_____</code>)</li> <li><code>_____</code> como su nombre indica, copia los archivos que le indiquemos dentro del contenedor, en este caso <code>package.json</code>      !!!info         Recordemos que <code>package.json</code> cumpl\u00eda ciertas funciones importantes:          + Centraliza la forma de interactuar con la aplicaci\u00f3n por medio de definici\u00f3n de scripts (indica comandos que podemos correr dentro de nuestro proyecto, asoci\u00e1ndolos a una palabra clave para que npm (o yarn) los reconozca cuando queramos ejecutarlos.)          + Gestiona de una forma clara y sencilla las dependencias necesarias para que la aplicaci\u00f3n pueda funcionar correctamente.</li> <li>Con otro <code>_____</code> ejecutamos el ya conocido comando que nos instala las dependencias que se indican en el archivo que hemos copiado en el paso anterior, el <code>package.json</code></li> <li>Copiamos todos los archivos de nuestro directorio de trabajo al contenedor</li> <li>Con <code>_____</code> le indicaremos el usuario con el que correr\u00e1 el contenedor</li> <li><code>_____</code> nos permite documentar que puertos est\u00e1n expuestos o a la escucha en el contenedor (s\u00f3lo ser\u00e1 accesible desde otros contenedores)</li> <li>Y finalmente <code>_____</code> nos permite ejecutar un comando dentro del contenedor. En este caso iniciamos la aplicaci\u00f3n.</li> </ol> <p>Nota</p> <p>En Linux, cuando queremos hacer referencia al directorio actual, lo hacemos con un punto <code>.</code> </p> <p>Si dentro de nuestro directorio actual tenemos una carpeta llamada <code>prueba</code>, podemos hacer referencia a ella como <code>./prueba</code>, ya que el <code>.</code> hace referencia precisamente al directorio donde nos encontramos</p> <p>As\u00ed pues, tener nuestra aplicaci\u00f3n corriendo es cuesti\u00f3n de un par de comandos.</p> <p>Hacemos un build de la imagen de Docker. Le indicamos que \u00e9sta se llama <code>the-example-app.nodejs</code> y que haga el build con el contexto del directorio actual de trabajo, as\u00ed como del Dockerfile que hay en \u00e9l:</p> <pre><code>docker build -t the-example-app.nodejs .\n</code></pre> <p>Y por \u00faltimo, iniciamos el contenedor con nuestra aplicaci\u00f3n. Ahora s\u00ed, con la opci\u00f3n <code>-p</code>, le indicamos que escuche conexiones entrantes de cualquier m\u00e1quina en el puerto 3000 de nuestra m\u00e1quina anfitri\u00f3n que haremos coincidir con el puerto 3000 del contenedor (<code>-p 3000:3000</code>). Y con la opci\u00f3n <code>-d</code> lo haremos correr en modo demonio, en background:</p> <pre><code>docker run -p 3000:3000 -d the-example-app.nodejs\n</code></pre> <p>Tras esto s\u00f3lo queda comprobar que, efectivamente, desde nuestra m\u00e1quina podemos acceder a: <code>http://IP_Maq_Virtual:3000</code> y que all\u00ed est\u00e1 nuestra aplicaci\u00f3n en funcionamiento.</p> <p>Tarea</p> <p>Documenta, incluyendo capturas de pantallas, el proceso que has seguido para realizar el despliegue de esta nueva aplicaci\u00f3n, as\u00ed como el resultado final.</p>"},{"location":"P6.1/#referencias","title":"Referencias","text":"<p>Los beneficios de utilizar Docker y contenedores a la hora de programar </p> <p>Dockerizing</p> <p>Github</p>"},{"location":"P6.2/","title":"Pr\u00e1ctica 6.2 - Despliegue de una aplicaci\u00f3n PHP con Nginx y MySQL usando Docker y docker-compose","text":""},{"location":"P6.2/#introduccion","title":"Introducci\u00f3n","text":"<p>\u00a1Atenci\u00f3n!</p> <p>En caso de que teng\u00e1is problemas, esta pr\u00e1ctica est\u00e1 comprobada y funcionando usando las siguientes versiones:</p> <ul> <li>Docker: Docker version 20.10.17, build 100c701</li> <li>Docker-compose: Docker Compose version v2.10.2</li> </ul>"},{"location":"P6.2/#recordando-que-es-docker-compose","title":"Recordando qu\u00e9 es docker-compose","text":"<p>Como vimos en la parte de teor\u00eda para ejecutar nuestra aplicaci\u00f3n en docker creamos un fichero llamado <code>Dockerfile</code> y este fichero contiene una configuraci\u00f3n. Esta configuraci\u00f3n var\u00eda dependiendo de qu\u00e9 queremos poner en el contenedor, ya que no es lo mismo poner una p\u00e1gina web, que una base de datos.</p> <p>Este proceso, de crear todos los <code>Dockerfile</code> y ejecutarlos puede ser bastante tedioso, ya que debemos pensar que una aplicaci\u00f3n de tama\u00f1o mediano es probable que tenga un front end, un back end, quiz\u00e1 algunos background-workers as\u00ed como la base de datos, sistema de cach\u00e9, sistema de colas o de message-broker... por lo que cada uno de nuestros servicios ser\u00e1 un contenedor diferente.</p> <p>Por lo tanto, crear m\u00faltiples <code>Dockerfile</code> y ejecutarlos todo en un script queda largo y feo.</p> <p>Aqu\u00ed es donde entra <code>docker-compose</code> el cual es una herramienta que nos permite definir y correr m\u00faltiples contenedores en Docker. Estos m\u00faltiples contenedores se definen en un fichero denominado docker-compose con la extensi\u00f3n .yml. Luego, con un solo comando, crea e inicia todos los servicios desde su configuraci\u00f3n.</p> <p></p> <p>Compose funciona en todos los entornos: producci\u00f3n, puesta en escena, desarrollo, pruebas, as\u00ed como flujos de trabajo de CI.</p> <p>Usar Compose es b\u00e1sicamente un proceso de tres pasos:</p> <ul> <li> <p>Definir el entorno de nuestra aplicaci\u00f3n con un Dockerfile para que pueda reproducirse en cualquier lugar.</p> </li> <li> <p>Definir los servicios que componen la aplicaci\u00f3n <code>docker-compose.yml</code> para que puedan ejecutarse juntos en un entorno aislado.</p> </li> <li> <p>Ejecutar <code>docker-compose up</code> y Compose inicia y ejecuta toda su aplicaci\u00f3n.</p> </li> </ul> <p>Este proceso se denomina orquestaci\u00f3n de contenedores y se lleva a cabo de forma local al interior de los containers, quienes, adem\u00e1s, se encontrar\u00e1n unidos a trav\u00e9s de una red de Docker.</p>"},{"location":"P6.2/#instalacion-de-docker-compose","title":"Instalaci\u00f3n de docker-compose","text":""},{"location":"P6.2/#proceso-de-dockerizacion-de-nginxphpmysql","title":"Proceso de dockerizaci\u00f3n de Nginx+PHP+MySQL","text":""},{"location":"P6.2/#1-estructura-de-directorios","title":"1. Estructura de directorios","text":"<p>Para que quede claro todo el proceso que vamos a seguir, la estructura de directorios que nos debe quedar en nuestra Debian al finalizar la pr\u00e1ctica es esta: <pre><code>/usuario/home/practica6-2/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 nginx\n\u2502   \u251c\u2500\u2500 default.conf\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 php\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 www\n    \u2514\u2500\u2500 html\n        \u2514\u2500\u2500 index.php\n</code></pre> Pod\u00e9is ir creando los directorios y archivos paso a paso o crearlo todo a la vez y luego ir rellenando los archivos vac\u00edos siguiendo un procedimiento como este:</p> <pre><code>mkdir practica6-2\ncd practica6-2\ntouch docker-compose.yml\nmkdir nginx\ntouch nginx/default.conf\n...\n</code></pre>"},{"location":"P6.2/#2-creacion-de-un-contenedor-nginx","title":"2. Creaci\u00f3n de un contenedor Nginx","text":"<p>Paara empezar, necesitamos crear y correr un contendor Nginx que permita alojar nuestra aplicaci\u00f3n en PHP.</p> <p>Dentro de la carpeta /usuario/home/practica6-2/ debemos haber creado o crear ahora el archivo <code>docker-compose.yml</code></p> <p>Y editamos este archivo con el editor de texto que prefiramos, nano por ejemplo:</p> <pre><code>nano docker-compose.yml\n</code></pre> <p>Y a\u00f1adimos la siguientes l\u00edneas:</p> <pre><code>nginx:\n  image: nginx:latest\n  container_name: nginx-container\n  ports:\n    - 80:80\n</code></pre> <p>Y lo guardamos.</p> <p>El archivo que acabamos de crear ser\u00e1 el encargado de descargarse la \u00faltima versi\u00f3n de la imagen de Nginx, crear un contenedor con ella y publicar o escuchar en el puerto 80 del contenedor que tambi\u00e9n se corresponder\u00e1 con el 80 de nuestra m\u00e1quina (80:80).</p> <p>Iniciemos entonces este proceso:</p> <p><pre><code>docker-compose up -d\n</code></pre> Con la opci\u00f3n <code>-d</code> (de daemon), estamos indicando que el contenedor se ejecute en background o segundo plano:</p> <p></p> <p>Para comprobar que el contenedor est\u00e1 corriendo, podemos hacer:</p> <pre><code>docker ps\n</code></pre> <p>Y deber\u00edamos ver algo como:</p> <pre><code>CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                               NAMES\nc6641e4d5bbf   nginx:latest   \"/docker-entrypoint.\u2026\"   5 seconds ago   Up 3 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx-container\n</code></pre> <p>Adem\u00e1s, si abrimos el navegador de nuestra m\u00e1quina anfitri\u00f3n y accedemos a <code>http://IP_Maq_Virtual</code> deber\u00edamos ver la p\u00e1gina de bienvenida de Nginx:</p> <p></p>"},{"location":"P6.2/#3-creacion-de-un-contenedor-php","title":"3. Creaci\u00f3n de un contenedor PHP","text":"<p>Creamos la carpeta y el documento pertinente dentro de ella, si no lo hab\u00edamos hecho antes:</p> <p><pre><code>mkdir -p /home/usuario/practica6-2/www/html\nnano /home/usuario/practica6-2/www/html/index.php\n</code></pre> Y dentro de <code>index.php</code> a\u00f1adimos el siguiente c\u00f3digo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n&lt;title&gt;\u00a1Hola mundo!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;\u00a1Hola mundo!&lt;/h1&gt;\n&lt;p&gt;&lt;?php echo 'Estamos corriendo PHP, version: ' . phpversion(); ?&gt;&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <p>Guardad el archivo y cread, si no lo hab\u00edais hecho antes, un directorio llamado nginx dentro del directorio del proyecto:</p> <p><pre><code>mkdir /home/usuario/practica6-2/nginx\n</code></pre> Ahora vamos a crear el archivo de configuraci\u00f3n por defecto para que Nginx pueda correr la aplicaci\u00f3n PHP:</p> <pre><code>nano /home/usuario/practica6-2/nginx/default.conf\n</code></pre> <p>Y dentro de ese archivo, colocaremos la siguiente configuraci\u00f3n:</p> <p><pre><code>server {\n\nlisten 80 default_server;\n     root /var/www/html;\n     index index.html index.php;\n\ncharset utf-8;\n\nlocation / {\n      try_files $uri $uri/ /index.php?$query_string;\n     }\nlocation = /favicon.ico { access_log off; log_not_found off; }\n     location = /robots.txt { access_log off; log_not_found off; }\n\naccess_log off;\n     error_log /var/log/nginx/error.log error;\n\nsendfile off;\n\nclient_max_body_size 100m;\n\nlocation ~ .php$ {\n      fastcgi_split_path_info ^(.+.php)(/.+)$;\n      fastcgi_pass php:9000;\n      fastcgi_index index.php;\n      include fastcgi_params;\n      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n      fastcgi_intercept_errors off;\n      fastcgi_buffer_size 16k;\n      fastcgi_buffers 4 16k;\n    }\nlocation ~ /.ht {\n      deny all;\n     }\n}\n</code></pre> Guardamos el archivo y ahora crearemos el <code>Dockerfile</code> dentro del directorio nginx. En este archivo se copiar\u00e1 el archivo de configuraci\u00f3n de Nginx al contenedor correspondiente.</p> <p>As\u00ed pues:</p> <p><pre><code>nano /home/usuario/practica6-2/nginx/Dockerfile\n</code></pre> Y dentro de este archivo:</p> <pre><code>FROM nginx:latest\nCOPY ./default.conf /etc/nginx/conf.d/default.conf\n</code></pre> <p>Y ahora editamos nuestro archivo <code>docker-compose.yml</code>:</p> <p><pre><code>services:\n  nginx:\n    build: ./nginx/\n    container_name: nginx-container\n    ports:\n      - 80:80\n    links:\n      - php\n    volumes:\n      - ./www/html/:/var/www/html/\n\nphp:\n    image: php:7.0-fpm\n    container_name: php-container\n    expose:\n      - 9000\nvolumes:\n      - ./www/html/:/var/www/html/\n</code></pre> Ahora con este fichero <code>docker-compose.yml</code> se crear\u00e1 un nuevo contenedor PHP-FPM en el puerto 9000, enlazar\u00e1 el contenedor nginx con el contendor php, as\u00ed como crear\u00e1 un volumen y lo montar\u00e1 en el directorio <code>/var/www/html</code> de los contenedores.</p> <p>As\u00ed pues, ejecutaremos el nuevo contenedor volviendo a ejecutando compose. Cuidado pues se debe ejecutar el comando en el mismo directorio donde tengamos nuestro archivo <code>docker-compose.yml</code>:</p> <pre><code>cd /home/usuario/practica6-2\n\ndocker-compose up -d\n</code></pre> <p>Y comprobamos que los contenedores est\u00e1n corriendo:</p> <pre><code>docker ps\n</code></pre> <p>Debiendo ver algo como:</p> <pre><code>CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                               NAMES\n82c8baf15221   docker-project_nginx   \"/docker-entrypoint.\u2026\"   23 seconds ago   Up 22 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx-container\n10778c6686d8   php:7.0-fpm            \"docker-php-entrypoi\u2026\"   25 seconds ago   Up 23 seconds   9000/tcp                            php-container\n</code></pre> <p>Y si ahora volvemos a acceder a <code>http://IP_Maq_Virtual</code>, veremos la p\u00e1gina <code>Hola mundo</code>:</p> <p></p>"},{"location":"P6.2/#4-creacion-de-un-contenedor-para-datos","title":"4. Creaci\u00f3n de un contenedor para datos","text":"<p>Como v\u00e9is, hemos montado el directorio <code>www/html</code> en ambos contenedores, el de nginx y el de php. Sin embargo, esta no es una forma adecuada de hacerlo. En este paso crearemos un contenedor independiente que se encargar\u00e1 de contener los datos y lo enlazaremos con el resto de contenedores.</p> <p>Para llevar a cabo esta tarea, volvemos a editar el <code>docker-compose.yml</code>:</p> <p><pre><code>nano /usuario/home/practica6-2/docker-compose.yml\n</code></pre> Y a\u00f1adiremos un nuevo servicio a los que ya ten\u00edamos, quedando as\u00ed:</p> <pre><code>nginx:\n  build: ./nginx/\n  container_name: nginx-container\n  ports:\n    - 80:80\n  links:\n    - php\n  volumes_from:\n    - app-data\n\nphp:\n  image: php:7.0-fpm\n  container_name: php-container\n  expose:\n    - 9000\nvolumes_from:\n    - app-data\n\napp-data:\n  image: php:7.0-fpm\n  container_name: app-data-container\n  volumes:\n    - ./www/html/:/var/www/html/\n  command: \"true\"\n</code></pre> <p>As\u00ed que para recrear y lanzar todos los contenedores ejecutamos de nuevo (recordad, dentro del directorio donde se encuentra el archivo):</p> <pre><code>docker-compose up -d\n</code></pre> <p>Y volvemos a verificar que est\u00e1n corriendo todos:</p> <pre><code>docker ps -a\n</code></pre> <p>Debiendo ver algo como:</p> <pre><code>CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS                      PORTS                               NAMES\n849315c7ffc0   docker-project_nginx   \"/docker-entrypoint.\u2026\"   27 seconds ago   Up 25 seconds               0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx-container\n59a0d7040fd8   php:7.0-fpm            \"docker-php-entrypoi\u2026\"   28 seconds ago   Up 27 seconds               9000/tcp                            php-container\nfbca95944234   php:7.0-fpm            \"docker-php-entrypoi\u2026\"   29 seconds ago   Exited (0) 28 seconds ago                                       app-data-container\n</code></pre>"},{"location":"P6.2/#5-creacion-de-un-contenedor-mysql","title":"5. Creaci\u00f3n de un contenedor MySQL","text":"<p>En esta secci\u00f3n crearemos un contenedor de una base de datos MySQL y lo enlazaremos con el resto de contenedores.</p> <p>Primero, modificaremos la imagen PHP e instalaremos la extensi\u00f3n PHP para MySQL, de tal forma que nos permita conectarnos desde nuestra aplicaci\u00f3n PHP a nuestra BBDD MySQL.</p> <p>Creamos, si no lo ten\u00edamos ya, nuestro directorio php y dentro de \u00e9l, el archivo <code>Dockerfile</code>:</p> <pre><code>mkdir /home/usuario/practica6-2/php\nnano /home/usuario/practica6-2/php/Dockerfile\n</code></pre> <p>Y dentro del <code>Dockerfile</code> ponemos:</p> <pre><code>FROM php:7.0-fpm\nRUN docker-php-ext-install pdo_mysql\n</code></pre> <p>Y una vez m\u00e1s, debemos editar <code>docker-compose.yml</code> con el objetivo de que se creen el contenedor para MySQL y el contenedor de los datos de MySQL que contendr\u00e1 la base de datos y las tablas:</p> <pre><code>services:\n  nginx:\n    build: ./nginx/\n    container_name: nginx-container\n    ports:\n      - 80:80\n    links:\n      - php\n    volumes_from:\n      - app-data\n  php:\n    build: ./php/\n    container_name: php-container\n    expose:\n      - 9000\nlinks:\n      - mysql\n    volumes_from:\n      - app-data\n\napp-data:\n    image: php:7.0-fpm\n    container_name: app-data-container\n    volumes:\n      - ./www/html/:/var/www/html/\n    command: \"true\"\nmysql:\n    image: mysql:5.7\n    container_name: mysql-container\n    volumes_from:\n      - mysql-data\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: mydb\n      MYSQL_USER: myuser\n      MYSQL_PASSWORD: password\n\nmysql-data:\n    image: mysql:5.7\n    container_name: mysql-data-container\n    volumes:\n      - /var/lib/mysql\n    command: \"true\"\n</code></pre> <p>Despu\u00e9s de guardar este archivo, editamos el archivo <code>index.php</code> y hacemos algunos cambios para comprobar la conexi\u00f3n a la base de datos.</p> <p>El archivo <code>index.php</code> debe quedar as\u00ed:</p> <pre><code>     &lt;!DOCTYPE html&gt;\n&lt;head&gt;\n&lt;title&gt;\u00a1Hola mundo!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;\u00a1Hola mundo!&lt;/h1&gt;\n&lt;p&gt;&lt;?php echo 'Estamos corriendo PHP, version: ' . phpversion(); ?&gt;&lt;/p&gt;\n&lt;?\n       $database =\"mydb\";\n       $user = \"myuser\";\n       $password = \"password\";\n       $host = \"mysql\";\n       $connection = new PDO(\"mysql:host={$host};dbname={$database};charset=utf8\", $user, $password);\n       $query = $connection-&gt;query(\"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE='BASE TABLE'\");\n       $tables = $query-&gt;fetchAll(PDO::FETCH_COLUMN);\n        if (empty($tables)) {\n          echo \"&lt;p&gt;No hay tablas en la base de datos \\\"{$database}\\\".&lt;/p&gt;\";\n        } else {\n          echo \"&lt;p&gt;La base de datos \\\"{$database}\\\" tiene las siguientes tablas:&lt;/p&gt;\";\n          echo \"&lt;ul&gt;\";\n            foreach ($tables as $table) {\n              echo \"&lt;li&gt;{$table}&lt;/li&gt;\";\n            }\n          echo \"&lt;/ul&gt;\";\n        }\n        ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Guardad el archivo y lanzad los contenedores una vez m\u00e1s:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Y verificamos que est\u00e1n ejecut\u00e1ndose:</p> <p><pre><code>docker ps -a\n</code></pre> Y veremos:</p> <pre><code>CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS                      PORTS                               NAMES\nd3e82747fe0d   mysql:5.7              \"docker-entrypoint.s\u2026\"   39 seconds ago   Up 38 seconds               3306/tcp, 33060/tcp                 mysql-container\n606320e5a7f8   mysql:5.7              \"docker-entrypoint.s\u2026\"   41 seconds ago   Exited (0) 39 seconds ago                                       mysql-data-container\nca4f63797d11   docker-project_php     \"docker-php-entrypoi\u2026\"   2 hours ago      Up 2 hours                  9000/tcp                            php-container\n849315c7ffc0   docker-project_nginx   \"/docker-entrypoint.\u2026\"   2 hours ago      Up 2 hours                  0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   nginx-container\nfbca95944234   php:7.0-fpm            \"docker-php-entrypoi\u2026\"   2 hours ago      Exited (0) 39 seconds ago                                       app-data-\n</code></pre>"},{"location":"P6.2/#6-verificacion-de-conexion-a-la-base-de-datos","title":"6. Verificaci\u00f3n de conexi\u00f3n a la base de datos","text":"<p>Si ahora accedemos a <code>http://IP_Maq_Virtual</code>, deber\u00edamos obtener la siguiente pantalla:</p> <p></p> <p>Como pod\u00e9is ver, nos dice que no tenemos ninguna tabla en la base de datos mydb.</p> <p>Sin embargo, el hecho es que realmente s\u00ed existen algunas tablas, s\u00edmplemente no son visibles para un usuario normal. Si quisi\u00e9ramos verlas, debemos editar el archivo <code>index.php</code> y cambiar <code>$user</code> por <code>root</code> y <code>$password</code> a <code>secret</code>.</p> <p>Es decir:</p> <p><pre><code>nano /home/usuario/www/html/index.php\n</code></pre> Y cambiar las l\u00edneas:</p> <p><pre><code>$user = \"root\";\n$password = \"secret\";\n</code></pre> Guardad el archivo y refrescad la p\u00e1gina. Deber\u00edas obtener ahora una pantalla con todas las tablas de la base de datos, tal que as\u00ed:</p> <p></p> <p>Tarea</p> <p>Documenta, incluyendo capturas de pantallas, el proceso que has seguido para realizar el despliegue de esta nueva aplicaci\u00f3n, as\u00ed como el resultado final.</p>"},{"location":"P6.2/#referencias","title":"Referencias","text":"<p>\u00bfQu\u00e9 es Docker Compose?</p> <p>\u00bfQu\u00e9 demonios es Docker y Docker-Compose? y c\u00f3mo Dockerizar Dotnet Core WebApi y SQL Server en un ambiente de desarrollo ideal</p> <p>Introducci\u00f3n a docker-compose</p> <p>How to Deploy a PHP Application with Nginx and MySQL Using Docker and Docker Compose</p>"},{"location":"P6.3/","title":"Pr\u00e1ctica 6.3 - Despliegue de servidores web con usuarios autenticados mediante LDAP usando Docker y docker-compose","text":""},{"location":"P6.3/#introduccion","title":"Introducci\u00f3n","text":""},{"location":"P6.3/#que-es-un-servicio-de-directorio-ldap","title":"\u00bfQu\u00e9 es un servicio de directorio LDAP?","text":"<p>LDAP (Lightweight Directory Access Protocol) o tambi\u00e9n conocido como \u00abProtocolo Ligero de Acceso a Directorios\u00bb es un protocolo de la capa de aplicaci\u00f3n TCP/IP que permite el acceso a un servicio de directorio ordenado y distribuido, para buscar cualquier informaci\u00f3n en un entorno de red.</p> <p>Aclaraci\u00f3n</p> <p>Un directorio es un conjunto de objetos con atributos que est\u00e1n organizados de manera l\u00f3gica y jer\u00e1rquica, es decir, est\u00e1 en forma de \u00e1rbol y perfectamente ordenado en funci\u00f3n de lo que nosotros queramos, ya sea alfab\u00e9ticamente, por usuarios, direcciones etc.</p> <p>Generalmente un servidor LDAP se encarga de almacenar informaci\u00f3n de autenticaci\u00f3n, es decir, el usuario y la contrase\u00f1a, para posteriormente dar acceso a otro protocolo o servicio del sistema. Adem\u00e1s de almacenar el nombre de usuario y la contrase\u00f1a, tambi\u00e9n puede almacenar otra informaci\u00f3n como datos de contacto del usuario, ubicaci\u00f3n de los recursos de la red local, certificados digitales de los propios usuarios y mucho m\u00e1s.</p> <p>LDAP es un protocolo que nos permite acceder a los recursos de la red local, sin necesidad de crear los diferentes usuarios en el sistema operativo, adem\u00e1s, es mucho m\u00e1s vers\u00e1til. Por ejemplo, LDAP permite realizar tareas de autenticaci\u00f3n y autorizaci\u00f3n a usuarios de diferentes softwares como Docker, OpenVPN, servidores de archivos como los usados por QNAP, Synology o ASUSTOR entre otros, y muchos m\u00e1s usos.</p> <p></p> <p>LDAP puede ser utilizado tanto por un usuario al que se pide unos  credenciales de acceso, como tambi\u00e9n por las aplicaciones para saber si tienen acceso a determinada informaci\u00f3n del sistema o no. Generalmente un servidor LDAP se encuentra en una red privada, es decir, redes de \u00e1rea local, para autenticar las diferentes aplicaciones y usuarios, pero tambi\u00e9n podr\u00eda funcionar sobre redes p\u00fablicas sin ning\u00fan problema.</p> <p>Info</p> <p>En definitiva, LDAP nos proporciona un serivicio de autenticaci\u00f3n y autorizaci\u00f3n para poder acceder a distintos recursos en red, como por ejemplo, a un sitio web. Si recordamos la pr\u00e1ctica 2.2, nuestro usuario se autenticaba utilizando usuarios creados en el mismo sistema operativo (Debian Linux) donde se hab\u00eda instalado el servidor web Nginx.</p> <p>Tenemos, por tanto, la posibilidad de utilizar otra autenticaci\u00f3n centralizada para el mismo cometido con LDAP.</p>"},{"location":"P6.3/#implementaciones-de-ldap","title":"Implementaciones de LDAP","text":"<p>Microsoft Active Directory utiliza internamente el protocolo LDAP para realizar todas las comunicaciones desde los clientes hasta el servidor o servidores, por lo tanto, se encarga de que los clientes puedan autenticarse y acceder a cualquier dato almacenado, adem\u00e1s, debemos tener en cuenta que este protocolo es multiplataforma, no solamente lo tenemos en sistemas operativos Windows sino que tambi\u00e9n es compatible con Linux, Unix y macOS, todo ello a trav\u00e9s del protocolo. Para que os hag\u00e1is una idea, los siguientes servicios de directorio usan este protocolo para su comunicaci\u00f3n:</p> <ul> <li>Active Directory de Microsoft</li> <li>Apache</li> <li>Servicio de directorio de Red Hat</li> <li>OpenLDAP</li> </ul> <p>Y muchos otros servicios tambi\u00e9n lo usan, sobre todo el \u00faltimo, OpenLDAP, el cual es una implementaci\u00f3n de c\u00f3digo abierto del protocolo y que se puede instalar en cualquier sistema, ya que est\u00e1 disponible el c\u00f3digo fuente para compilarlo. No obstante, en la mayor\u00eda de distribuciones de Linux lo tenemos disponible en sus repositorios.</p>"},{"location":"P6.3/#como-se-organiza-la-informacion-en-ldap","title":"\u00bfC\u00f3mo se organiza la informaci\u00f3n en LDAP?","text":"<p>En LDAP, las entradas est\u00e1n organizadas en una estructura jer\u00e1rquica en \u00e1rbol. Tradicionalmente, esta estructura reflejaba los l\u00edmites geogr\u00e1ficos y organizacionales.</p> <p>Las entradas que representan pa\u00edses aparecen en la parte superior del \u00e1rbol. Debajo de ellos, est\u00e1n las entradas que representan los estados y las organizaciones nacionales. Debajo de est\u00e1s, pueden estar las entradas que representan las unidades organizacionales, empleados, impresoras, documentos o todo aquello que pueda imaginarse. La siguiente figura muestra un ejemplo de un \u00e1rbol de directorio LDAP haciendo uso del nombramiento tradicional.</p> <p></p> <p>El \u00e1rbol tambi\u00e9n se puede organizar bas\u00e1ndose en los nombres de dominio de Internet. Este tipo de nombramiento es muy popular, ya que permite localizar un servicio de directorio haciendo uso de los DNS. La siguiente figura muestra un ejemplo de un directorio LDAP que hace uso de los nombres basados en dominios.</p> <p></p>"},{"location":"P6.3/#como-se-referencia-la-informacion","title":"\u00bfC\u00f3mo se referencia la informaci\u00f3n?","text":"<p>Una entrada es referenciada por su nombre distinguido (DN), que es construido por el nombre de la propia entrada (llamado Nombre Relativo Distinguido o RDN) y la concatenaci\u00f3n de los nombres de las entradas que le anteceden. </p> <p>Por ejemplo, la entrada para Nuno Gon\u00e7alves en el ejemplo del nombramiento de Internet anterior tiene el siguiente RDN: uid=nuno y su DN ser\u00eda: uid=nuno,ou=estig,dc=ipb,dc=pt.  </p>"},{"location":"P6.3/#como-se-accede-a-la-informacion","title":"C\u00f3mo se accede a la informaci\u00f3n?","text":"<p>LDAP define operaciones para interrogar y actualizar el directorio. Provee operaciones para a\u00f1adir y borrar entradas del directorio, modificar una entrada existente y cambiar el nombre de una entrada. La mayor parte del tiempo, sin embargo, LDAP se utiliza para buscar informaci\u00f3n almacenada en el directorio. Las operaciones de b\u00fasqueda de LDAP permiten buscar entradas que concuerdan con alg\u00fan criterio especificado por un filtro de b\u00fasqueda. La informaci\u00f3n puede ser solicitada desde cada entrada que concuerda con dicho criterio.</p> <p>Por ejemplo, imaginemos que queremos buscar en el sub\u00e1rbol del directorio que est\u00e1 por debajo de dc=ipb,dc=pt a personas con el nombre Nuno Gon\u00e7alves, obteniendo la direcci\u00f3n de correo electr\u00f3nico de cada entrada que concuerde. LDAP permite hacer esto f\u00e1cilmente. O tal vez preferimos buscar las organizaciones que posean la cadena IPB en su nombre, posean n\u00famero de fax y est\u00e9n debajo de la entrada st=Bragan\u00e7a,c=PT. LDAP permite hacer esto tambi\u00e9n.</p> <p>LDAP ofrece una autenticaci\u00f3n y autorizaci\u00f3n optimizadas y una b\u00fasqueda eficaz de datos de direcciones y de usuarios. Debido a sus muchas ventajas para las empresas. LDAP sirve a modo de un est\u00e1ndar de la industria y es compatible con la mayor\u00eda de los productos de software. Las ventajas principales son la rapidez de las consultas y conexiones, un lenguaje de consulta sencillo y un protocolo claramente estructurado</p>"},{"location":"P6.3/#modulos-en-apache","title":"M\u00f3dulos en Apache","text":"<p>Un m\u00f3dulo es una parte independiente de un programa. La mayor parte de la funcionalidad de Apache est\u00e1 contenida en m\u00f3dulos que pueden incluirse o excluirse. Como decimos, existen una gran cantidad de M\u00f3dulos para utilizarse con Apache, algunos ejemplo son: \"Virtual Hosting\",\"Mod_JK(Java)\" y \"Rewrite\".</p> <p>Una de las principales razones de emplear m\u00f3dulos en Apache, es que no toda instalaci\u00f3n requiere de las mismas funcionalidades, esto es, una instalaci\u00f3n que utilice PHP probablemente no requiera de Tomcat (Java), o bien posiblemente no todas las instalaciones requieran de \"Virtual Hosting\".</p> <p>As\u00ed las cosas, para no incluir todas las funcionalidades de Apache, necesarias e innecesarias para cada ocasi\u00f3n, en un \u00fanico paquete de instalaci\u00f3n que lo har\u00eda demasiado grande en tama\u00f1o y pesado en recursos, se hace uso de los m\u00f3dulos, de tal forma que s\u00f3lo cargaremos en memoria los que nos hagan falta en cada ocasi\u00f3n.</p> <p>Los m\u00f3dulos le permiten a los administradores del servidor activar y desactivar funcionalidades adicionales. Apache tiene m\u00f3dulos de seguridad, almacenamiento en cach\u00e9, reescritura de URL, autenticaci\u00f3n de contrase\u00f1a y m\u00e1s.</p> <p>Info</p> <p>En Apache hay dos tipos de m\u00f3dulos:</p> <ul> <li>Est\u00e1ticos: Son a\u00f1adidos al compilar el servidor.</li> <li>Din\u00e1micos: Se cargan din\u00e1micamente al iniciar el servidor. </li> </ul> <p>Se puede habilitar cualquiera de los m\u00f3dulos de la lista con el comando <code>a2enmod (nombre del m\u00f3dulo)</code> (usando el <code>sudo</code> si no se es superusuario), y deshabilitar cualquiera de ellos previamente habilitado mediante el comando <code>a2dismod (nombre del m\u00f3dulo)</code>  (usando el <code>sudo</code> si no se es superusuario).</p>"},{"location":"P6.3/#modulos-en-nginx","title":"M\u00f3dulos en Nginx","text":"<p>Los m\u00f3dulos est\u00e1ticos existen desde sus inicios en Nginx y los din\u00e1micos desde la versi\u00f3n 1.9.11 (Febrero de 2016).</p> <p>Nginx es, de hecho, una colecci\u00f3n de m\u00f3dulos. Incluso funciones b\u00e1sicas tales como HTTP o servir ficheros est\u00e1ticos dentro de HTTP, est\u00e1n implementadas por m\u00f3dulos.</p> <p>Se puede extender la funcionalidad de Nginx a\u00f1adiendo m\u00f3dulos propios. Esta arquitectura modular permite modificar f\u00e1cilmente Nginx.</p>"},{"location":"P6.3/#modulo-autenticacion-ldap-en-nginx","title":"M\u00f3dulo autenticaci\u00f3n LDAP en Nginx","text":"<p>La soluci\u00f3n aprovecha el m\u00f3dulo ngx_http_auth_request_module de Nginx y NGINX, que reenv\u00eda las peticiones de autenticaci\u00f3n a un servicio externo. En la implementaci\u00f3n de referencia, ese servicio es un demonio que llamamos ldap-auth. Est\u00e1 escrito en Python y se comunica con un servidor de autenticaci\u00f3n del Protocolo Ligero de Acceso a Directorios (LDAP) - OpenLDAP por defecto, pero hemos probado el demonio ldap-auth tambi\u00e9n con configuraciones por defecto de Microsoft\u00ae Windows\u00ae Server Active Directory (tanto la versi\u00f3n 2003 como la 2012).</p> <p>Para realizar la autenticaci\u00f3n, el m\u00f3dulo http_auth_request realiza una subconsulta HTTP al demonio ldap-auth, que act\u00faa como intermediario e interpreta la subconsulta para el servidor LDAP - utiliza HTTP para la comunicaci\u00f3n con Nginx y la API apropiada para la comunicaci\u00f3n con el servidor LDAP.</p> <p></p> <p>Para realizar la autenticaci\u00f3n, el m\u00f3dulo http_auth_request realiza una subconsulta HTTP al demonio ldap-auth, que act\u00faa como intermediario e interpreta la subconsulta para el servidor LDAP - utiliza HTTP para la comunicaci\u00f3n con Nginx y la API apropiada para la comunicaci\u00f3n con el servidor LDAP.</p> <p>A continuaci\u00f3n se describe paso a paso el proceso de autenticaci\u00f3n en la implementaci\u00f3n de referencia. Los detalles se determinan por los ajustes en el archivo de configuraci\u00f3n nginx-ldap-auth.conf; ver Configuraci\u00f3n de la implementaci\u00f3n de referencia m\u00e1s abajo. </p> <p>El diagrama de flujo debajo de los pasos resume el proceso.</p> <p></p> <ol> <li> <p>Un cliente env\u00eda una solicitud HTTP para un recurso protegido alojado en un servidor para el que Nginx est\u00e1 actuando como proxy inverso.</p> </li> <li> <p>Nginx (concretamente, el m\u00f3dulo http_auth_request) reenv\u00eda la solicitud al demonio ldap-auth, que responde con el c\u00f3digo HTTP 401 porque no se han proporcionado credenciales.</p> </li> <li> <p>Nginx reenv\u00eda la solicitud a <code>http://backend/login</code>, que corresponde al demonio del backend. Escribe el URI de la solicitud original en la cabecera X-Target de la solicitud reenviada.</p> </li> <li> <p>El demonio del backend env\u00eda al cliente un formulario de inicio de sesi\u00f3n (el formulario est\u00e1 definido en el c\u00f3digo Python del demonio). Tal y como se configura en la directiva error_page, NGINX establece el c\u00f3digo HTTP del formulario de inicio de sesi\u00f3n en 200.</p> </li> <li> <p>El usuario rellena los campos Nombre de usuario y Contrase\u00f1a en el formulario y hace clic en el bot\u00f3n Login. Seg\u00fan el c\u00f3digo del formulario, el cliente genera una petici\u00f3n HTTP POST dirigida a <code>/login</code>, que Nginx reenv\u00eda al demonio del backend.</p> </li> <li> <p>El demonio del backend construye una cadena con el formato nombre de <code>usuario:contrase\u00f1a</code>, aplica la codificaci\u00f3n Base64, genera una cookie llamada nginxauth con su valor establecido a la cadena codificada, y env\u00eda la cookie al cliente. Establece el flag httponly para evitar el uso de JavaScript para leer o manipular la cookie (protegiendo contra la vulnerabilidad cross-site scripting [XSS]).</p> </li> <li> <p>El cliente retransmite su solicitud original (del paso 1), esta vez incluyendo la cookie en el campo Cookie de la cabecera HTTP. Nginx reenv\u00eda la solicitud al demonio <code>ldap-auth</code> (como en el paso 2).</p> </li> <li> <p>El demonio <code>ldap-auth</code> decodifica la cookie y env\u00eda el nombre de usuario y la contrase\u00f1a al servidor LDAP en una solicitud de autenticaci\u00f3n.</p> </li> <li> <p>La siguiente acci\u00f3n depende de si el servidor LDAP autentifica con \u00e9xito al usuario:</p> <ul> <li> <p>Si la autenticaci\u00f3n tiene \u00e9xito, el demonio <code>ldap-auth</code> env\u00eda el c\u00f3digo HTTP 200 a Nginx. Nginx solicita el recurso al demonio del backend y \u00e9ste devuelve el c\u00f3digo del sitio web.</p> <p>El archivo <code>nginx-ldap-auth.conf</code> incluye directivas para el almacenamiento en cach\u00e9 de los resultados del intento de autenticaci\u00f3n.</p> </li> <li> <p>Si la autenticaci\u00f3n falla, el demonio <code>ldap-auth</code> env\u00eda el c\u00f3digo HTTP 401 a Nginx. Nginx reenv\u00eda la solicitud al demonio del backend de nuevo (como en el paso 3), y el proceso se repite.</p> </li> </ul> </li> </ol>"},{"location":"P6.3/#despliegue-con-docker-de-nginx-demonio-de-autenticacion-ldap-openldap","title":"Despliegue con Docker de NGINX + demonio de autenticaci\u00f3n LDAP + OpenLDAP","text":"<p>Para esta pr\u00e1ctica nos crearemos un directorio que contendr\u00e1 nuestro index.html, con un texto muy simple:</p> <pre><code>$ mkdir app\n\n$ cat &lt;&lt; EOF &gt; app/index.html\n&lt;html&gt;\n&lt;body&gt;\n&lt;h1&gt;\u00a1Hola Mundo!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEOF\n</code></pre> <p>As\u00ed como otro directorio, con el contenido de la configuraci\u00f3n pertinente de Nginx:</p> <p><pre><code>$ mkdir conf\n\n$ cat &lt;&lt; EOF &gt; conf/ldap_nginx.conf\n    server {\nlisten 8080;\nlocation = / {\nauth_request /auth-proxy;\n}\nlocation = /auth-proxy {\ninternal;\nproxy_pass http://nginx-ldap:8888;\n# URL y puerto para conectarse al servidor LDAP\nproxy_set_header X-Ldap-URL \"ldap://openldap:1389\";\n# Base DN\nproxy_set_header X-Ldap-BaseDN \"dc=example,dc=org\";\n# Bind DN\nproxy_set_header X-Ldap-BindDN \"cn=admin,dc=example,dc=org\";\n# Bind password\nproxy_set_header X-Ldap-BindPass \"adminpassword\";\n}\n}\n</code></pre> En esta configuraci\u00f3n le decimos a Nginx:</p> <ul> <li>Que escuche en el puerto 8080 las peticiones HTTP</li> <li>Que cuando se acceda al sitio web, se solicite autorizaci\u00f3n en el directorio del sitio web llamado /auth-proxy</li> <li>Se crea un nuevo location para ese directorio /auth-proxy y que es donde se realizar\u00e1 la configuraci\u00f3n de c\u00f3mo conectarnos a nuestro openldap, de acuerdo con la documentaci\u00f3n oficial de Nginx a prop\u00f3sito de su m\u00f3dulo de autenticaci\u00f3n:</li> <li>Se indica la URL de nuestro openldap (es el nombre del contenedor que hemos levantado, ya que Docker tiene un DNS propio entre sus contenedores)</li> <li>El DN (Nombre distinguido) base sobre el que se realizar\u00e1n las b\u00fasquedas en openldap</li> <li>El usuario y contrase\u00f1a con el que nos conectaremos al openldap para realizar las consultas</li> </ul> <p>Y ahora, procedemos con el siguiente <code>docker-compose.yml</code>:</p> <pre><code>version: '2'\nservices:\nnginx-ldap:  # (1)\nimage: bitnami/nginx-ldap-auth-daemon # (2)\nports: # (3)\n- 8888:8888\nnginx: # (4)\nimage: bitnami/nginx\nports: - 8080:8080\nvolumes: # (5)\n- ./app:/app\n- ./conf/ldap_nginx.conf:/opt/bitnami/nginx/conf/server_blocks/ldap_nginx.conf\nopenldap: # (6)\nimage: bitnami/openldap\nports:\n- '1389:1389'    environment: # (7)\n- LDAP_ADMIN_USERNAME=admin\n- LDAP_ADMIN_PASSWORD=adminpassword\n- LDAP_USERS=customuser\n- LDAP_PASSWORDS=custompassword\n</code></pre> <ol> <li>Nombre del contenedor</li> <li>Imagen que descargaremos del Dockerhub y a partir de la cual crearemos nuestro contenedor</li> <li>Puerto/s que se publicar\u00e1n para el contenedor</li> <li>Nombre del contenedor</li> <li>Vol\u00famenes o directorios compartidos entre nuestra m\u00e1quina y el contenedor</li> <li>Nombre del contenedor</li> <li>Variables de entorno utilizadas para la configuraci\u00f3n de este contenedor. Incluye credenciales del administrador de openldap, as\u00ed como un usuario que se crear\u00e1 en dicho openldap (pod\u00e9is cambiar usuario y contrase\u00f1a si quer\u00e9is, pero luego deb\u00e9is recordarlas)</li> </ol> <p>Tras esto s\u00f3lo queda ejecutar compose:</p> <pre><code>docker-compose up\n</code></pre> <p>Y comprobar que no se producen errores.</p>"},{"location":"P6.3/#despliegue-con-docker-de-php-apache-con-autenticacion-ldap","title":"Despliegue con Docker de PHP + Apache con autenticaci\u00f3n LDAP","text":"<ol> <li> <p>Creamos un directorio que se llame <code>Practica6.3</code></p> </li> <li> <p>En primer lugar, como es obvio, dentro del directorio creado debemos crear el <code>index.php</code> de nuestra aplicaci\u00f3n:</p> <pre><code>  &lt;?php\necho 'Well, hello LDAP authenticated user!';\n</code></pre> </li> <li> <p>Dentro de nuestro directorio de trabajo, creado anteriormente, crearemos otro directorio llamado <code>Docker</code> y dentro de \u00e9l, un Dockerfile (<code>./Docker/Dockerfile</code>)</p> <p>Nota</p> <p>En Linux, cuando queremos hacer referencia al directorio actual, lo hacemos con un punto <code>.</code> </p> <p>Si dentro de nuestro directorio actual tenemos una carpeta llamada <code>prueba</code>, podemos hacer referencia a ella como <code>./prueba</code>, ya que el <code>.</code> hace referencia precisamente al directorio donde nos encontramos.</p> <p>Para completar este Dockerfile con las opciones/directivas adecuadas, leed los comentarios y pod\u00e9is apoyaros en la teor\u00eda o en este cheatsheet:</p> <pre><code># ./Docker/Dockerfile --&gt; directorio donde se encuentra este archivo\n# Imagen base sobre la que vamos a trabajar\n____ php:7-apache\n\n# Activamos el m\u00f3dulo LDAP de Apache ejecutand el siguiente comando\n____ a2enmod authnz_ldap\n\n# A\u00f1adimos las reglas/configuraci\u00f3n de LDAP al directorio conf-enabled de Apache\n# (crearemos este archivo en el siguiente paso)\n____ Docker/ldap-demo.conf /etc/apache2/conf-enabled/\n\n# A\u00f1adimos ayuda de depuraci\u00f3n (debugging) en la configuraci\u00f3n de apache\n# En caso de necesitarlo, lo descomentamos para ejecutar el siguiente comando\n# ____ echo \"LogLevel debug\" &gt;&gt; apache2.conf\n# Establecemos el directorio de trabajo adecuado\n____ /var/www/html/demo\n\n# Configuramos Apache para usar la configuraci\u00f3n ldap definida arriba, la copiamos de nuestro ordenador al contenedor\n____ Docker/.htaccess ./.htaccess\n\n#  Copiamos los archivos del proyecto que necesitamos, al contenedor\n____ index.php ./\n</code></pre> <p>Tarea</p> <p>Completa el Dockerfile.</p> </li> <li> <p>Ahora crearemos el archivo <code>./Docker/ldap-demo.conf</code>, que es la configuraci\u00f3n LDAP. Aqu\u00ed establecemos los criterios de conexi\u00f3n con el contenedor de Openldap, password y URL.</p> <p>Las directivas <code>PassEnv</code> al principio del archivo nos permiten omitir nuestras credenciales y pasarlas luego como variables de entorno al correr la imagen del contenedor:</p> <pre><code># ./Docker/ldap-demo.conf\nPassEnv LDAP_BIND_ON\nPassEnv LDAP_PASSWORD\nPassEnv LDAP_URL\n&lt;AuthnProviderAlias ldap demo&gt;\n    AuthLDAPBindDN ${LDAP_BIND_ON}\nAuthLDAPBindPassword ${LDAP_PASSWORD}\nAuthLDAPURL ${LDAP_URL}\n&lt;/AuthnProviderAlias&gt; </code></pre> </li> <li> <p>Creamos el archivo .htaccess:</p> <pre><code># ./.htaccess\nAuthBasicProvider demo\nAuthType Basic\nAuthName \"Protected Area\"\nRequire valid-user\n</code></pre> </li> <li> <p>Dentro de nuestro directorio de trabajo, construimos la imagen con el siguiente comando:</p> <pre><code>docker build \\\n-t docker-ldap \\\n-f ./Docker/dockerfile \\\n.\n</code></pre> </li> <li> <p>Corremos el contenedor indicando las credenciales de nuestra cuenta LDAP mediante variables de entorno con la flag <code>-e</code>. Para este caso, vamos a probar un servidor LDAP externo, csimulando que tuvi\u00e9ramos que integrar nuestro despliegue con un servidor ya existente en la empresa. Utilizaremos un servidor p\u00fablico en Internet dedicado a pruebas: https://www.forumsys.com/2022/05/10/online-ldap-test-server/</p> <pre><code>docker run \\\n-p 3000:80 \\\n--name ldap_demo \\\n-e LDAP_BIND_ON='cn=read-only-admin,dc=example,dc=com' \\\n-e LDAP_PASSWORD='password' \\\n-e LDAP_URL='LDAP://ldap.forumsys.com/dc=example,dc=com' \\\ndocker-ldap\n</code></pre> </li> <li> <p>No nos queda m\u00e1s que visitar <code>http://IP-M\u00e1q-Debian:3000/demo</code>. Si todo ha ido bien, nos solicitar\u00e1 nuestras credenciales para loguearnos contra el servidor openldap.</p> </li> </ol> <p>Tarea</p> <p>Documenta todo el proceso de la pr\u00e1ctica, siguiendo los pasos y con las capturas y explicaciones pertinentes.</p>"},{"location":"P6.3/#referencias","title":"Referencias","text":"<p>Para qu\u00e9 sirve el protocolo LDAP y c\u00f3mo funciona</p> <p>OpenLDAP conceptos te\u00f3ricos</p> <p>Using Nginx and NGINX to Authenticate Application Users with LDAP</p> <p>Simple Docker/Apache/PHP Authentication with LDAP</p> <p>bitnami/nginx-ldap-auth-daemon</p> <p>nginxinc/nginx-ldap-auth</p> <p>Dockerfile cheatsheet</p> <p>Difference between RUN and CMD in a Dockerfile</p>"},{"location":"ServAplic/","title":"Servidores de aplicaciones","text":""},{"location":"ServAplic/#introduccion","title":"Introducci\u00f3n","text":"<p>Un servidor de aplicaciones es un marco mixto de software que permite tanto la creaci\u00f3n de aplicaciones web como un entorno de servidor para ejecutarlas.</p> <p>A menudo puede ser una pila compleja de diferentes elementos computacionales que ejecutan tareas espec\u00edficas que necesitan trabajar como uno solo para alimentar m\u00faltiples nubes y software y aplicaciones basadas en la web.</p> <p>Situado entre el servidor web y el nivel de backend del servidor de bases de datos, el servidor de aplicaciones es esencialmente un intermediario para el servidor de bases de datos y los usuarios de las aplicaciones empresariales o de consumo que soporta mediante el uso de varios protocolos e interfaces de programaci\u00f3n de aplicaciones (API).</p> <p></p> <p>Es habitual que se utilice junto con un servidor web o que contenga un servidor web, por lo que ambos pueden converger y denominarse servidor de aplicaciones web. Tambi\u00e9n es lo suficientemente vers\u00e1til como para ser utilizado con otros servidores de aplicaciones simult\u00e1neamente.</p> <p>Los servidores de aplicaciones tambi\u00e9n pueden contener sus propias interfaces gr\u00e1ficas de usuario para su gesti\u00f3n a trav\u00e9s de PC, pero tambi\u00e9n pueden ocuparse de sus propios recursos, as\u00ed como del procesamiento de transacciones, la mensajer\u00eda, la agrupaci\u00f3n de recursos y conexiones, y la realizaci\u00f3n de tareas de seguridad.</p>"},{"location":"ServAplic/#servidor-de-aplicaciones","title":"Servidor de aplicaciones","text":"<p>Las aplicaciones vienen en todas las formas, tama\u00f1os y casos de uso. En un mundo en el que dependemos de una serie de procesos empresariales cr\u00edticos, los servidores de aplicaciones son los ordenadores de gran potencia que proporcionan recursos de aplicaciones a los usuarios y clientes web.</p> <p>Los servidores de aplicaciones, como ya hemos dicho, se sit\u00faan f\u00edsica o virtualmente entre los servidores de bases de datos que almacenan los datos de las aplicaciones y los servidores web que se comunican con los clientes. Los servidores de aplicaciones y el middleware af\u00edn son los sistemas operativos que soportan el desarrollo y la entrega de una aplicaci\u00f3n. Ya sea una aplicaci\u00f3n de escritorio, m\u00f3vil o web, los servidores de aplicaciones desempe\u00f1an un papel fundamental en la conexi\u00f3n de un mundo de dispositivos.</p>"},{"location":"ServAplic/#terminologia-de-los-servidores-de-aplicaciones","title":"Terminolog\u00eda de los servidores de aplicaciones","text":"T\u00e9rmino Descripci\u00f3n Servidor web Responsable de almacenar, procesar y entregar los datos de E/S de las p\u00e1ginas web Cliente web Punto final que intenta acceder a los recursos de la web o de la aplicaci\u00f3n HTTPS Protocolo de comunicaci\u00f3n seguro entre el servidor web y los clientes web JSON Lenguaje para el intercambio entre los servidores web y de aplicaciones L\u00f3gica de negocio Reglas para el almacenamiento de datos y la transferencia de recursos de la aplicaci\u00f3n Aplicaci\u00f3n Un programa de software o un sitio web unido a una base de datos"},{"location":"ServAplic/#el-papel-del-servidor-de-aplicaciones-en-la-arquitectura-de-servicios","title":"El papel del servidor de aplicaciones en la arquitectura de servicios","text":"<p>Cuando los usuarios de las aplicaciones, ya sea usuarios f\u00edsicos o los clientes web, solicitan acceso a una aplicaci\u00f3n, el servidor de aplicaciones suele hacer el trabajo pesado en el backend para almacenar y procesar las solicitudes din\u00e1micas de las aplicaciones.</p>"},{"location":"ServAplic/#por-que-necesitamos-servidores-de-aplicaciones","title":"\u00bfPor qu\u00e9 necesitamos servidores de aplicaciones?","text":"<p>Miles de millones de clientes web hacen peticiones HTTP cada d\u00eda, esperando un acceso instant\u00e1neo a la aplicaci\u00f3n en cuesti\u00f3n. Headspace durante la rutina de la ma\u00f1ana, Google Docs para el informe extenso, Twitter durante la pausa para el caf\u00e9, no importa la aplicaci\u00f3n en uso, est\u00e1 siendo consultada en un servidor de aplicaciones y devuelta a trav\u00e9s de un servidor web.</p> <p>Los servidores web se encargan de servir a los clientes web peticiones HTTP con respuestas HTTP. A diferencia de los servidores de aplicaciones, el dise\u00f1o del servidor web es lo suficientemente ligero como para procesar las solicitudes de datos est\u00e1ticos de varias aplicaciones (o sitios web), manteniendo la seguridad. Las peticiones din\u00e1micas, a menudo en forma de aplicaciones, requieren asistencia adicional.</p>"},{"location":"ServAplic/#los-servidores-de-aplicaciones-optimizan-el-trafico-y-anaden-seguridad","title":"Los servidores de aplicaciones optimizan el tr\u00e1fico y a\u00f1aden seguridad","text":"<p>Para conseguir una agilidad \u00f3ptima del servidor web, no sirve gestionar tanto las peticiones HTTP de los clientes web como pasar o almacenar recursos de m\u00faltiples sitios web. Los servidores de aplicaciones llenan este vac\u00edo con un dise\u00f1o de alta potencia construido para manejar las solicitudes de contenido web din\u00e1mico.</p> <p>Los servidores de aplicaciones tambi\u00e9n proporcionan redundancia de programas y una capa adicional de seguridad. Una vez desplegado entre una base de datos y un servidor web, el trabajo de preservar y duplicar la arquitectura de la aplicaci\u00f3n a trav\u00e9s de la red es m\u00e1s factible. El paso adicional entre las potenciales comunicaciones web maliciosas y las joyas de la corona en el servidor de base de datos a\u00f1ade una capa de seguridad adicional. Dado que los servidores de aplicaciones pueden procesar solicitudes de l\u00f3gica empresarial, un intento de inyecci\u00f3n SQL es tambi\u00e9n mucho m\u00e1s dif\u00edcil.</p> <p>Las organizaciones pueden proteger a\u00fan m\u00e1s sus datos con un servidor proxy inverso colocado delante de sus bases de datos. Los servidores proxy y las VPN pueden hacer maravillas para anonimizar y encriptar la comunicaci\u00f3n para proteger a los usuarios y los datos de la empresa.</p> <p></p>"},{"location":"ServAplic/#como-funcionan-los-servidores-de-aplicaciones","title":"\u00bfC\u00f3mo funcionan los servidores de aplicaciones?","text":"<p>Pongamos como ejemplo un servidor de aplicaciones Java.</p> <p>\u00bfQu\u00e9 son los servlets?</p> <p>Un servlet es un programa Java que se ejecuta en un servidor Web y construye o sirve p\u00e1ginas web. De esta forma se pueden construir p\u00e1ginas din\u00e1micas, basadas en diferentes fuentes variables: datos proporcionados por el usuario, fuentes de informaci\u00f3n variable (p\u00e1ginas de noticias, por ejemplo), o programas que extraigan informaci\u00f3n de bases de datos.</p> <p>Comparado con un CGI, un servlet es m\u00e1s sencillo de utilizar, m\u00e1s eficiente (se arranca un hilo por cada petici\u00f3n y no un proceso entero), m\u00e1s potente y portable. Con los servlets podremos, entre otras cosas, procesar, sincronizar y coordinar m\u00faltiples peticiones de clientes, reenviar peticiones a otros servlets o a otros servidores u otros.</p> <p>Como la mayor\u00eda de los servidores de hoy en d\u00eda, los servidores de aplicaciones contienen caracter\u00edsticas de seguridad, transacciones, servicios, clustering, diagn\u00f3sticos y bases de datos. En lo que se diferencian los servidores de aplicaciones es en su capacidad para procesar peticiones de servlets (programas Java) desde un servidor web.</p> <p>En la imagen anterior, se muestra el flujo general de los servidores de aplicaciones web:</p> <ol> <li>El cliente abre un navegador y solicita acceso a un sitio web</li> <li>El servidor web recibe la petici\u00f3n HTTP y responde con la p\u00e1gina web deseada</li> <li>El servidor web gestiona las peticiones de datos est\u00e1ticos, pero el cliente quiere utilizar una herramienta interactiva</li> <li>Al tratarse de una petici\u00f3n de datos din\u00e1micos, el servidor web transfiere la petici\u00f3n a un servidor de aplicaciones</li> <li>El servidor de aplicaciones recibe la petici\u00f3n HTTP y la convierte en una petici\u00f3n de servlet</li> <li>El servlet llega al servidor de la base de datos, y el servidor de aplicaciones recibe una respuesta del servlet</li> <li>El servidor de aplicaciones traduce la respuesta del servlet al formato HTTP para el acceso del cliente</li> </ol> <p>Al recibir una solicitud de servlet de un servidor web, el servidor de aplicaciones procesa la solicitud y responde al servidor web mediante la respuesta de servlet. Dado que los servidores de aplicaciones trabajan principalmente con peticiones de l\u00f3gica de negocio, el servidor web traduce la respuesta del servlet y pasa una respuesta HTTP accesible para el usuario.</p> <p></p> Servidor de aplicaciones Servidor web Dise\u00f1ado para Sirve peticiones HTTP y de otra l\u00f3gica de negocio Sirve peticiones HTTP Almacena y proporciona L\u00f3gica de negocio Contenido web est\u00e1tico La utilizaci\u00f3n de los recursos es Pesada Ligera Soporta Transacciones distribuidas y Enterprise JavaBeans (EJB) Servlets, Java Server Pages (JSP) y JSON"},{"location":"ServAplic/#servidores-de-aplicaciones-en-la-decada-de-2020","title":"Servidores de aplicaciones en la d\u00e9cada de 2020","text":"<p>El mercado de los servidores de aplicaciones espera crecer a una CAGR del 13,2%, pasando de cerca de 17.000 millones de d\u00f3lares en 2020 a 41.000 millones en 2026. El crecimiento continuo no es una sorpresa, ya que la conectividad a Internet y la dependencia de las aplicaciones crece.</p> <p>La migraci\u00f3n a las plataformas y servicios en la nube y el auge de los dispositivos IoT son dos impulsores clave en el mercado de infraestructura de aplicaciones y middleware moderno. A esto hay que a\u00f1adir un movimiento hacia las pol\u00edticas BYOD (Bring Your Own Device) y una fuerza de trabajo remota que depende de una mayor conectividad y eficiencia operativa.</p>"},{"location":"ServAplic/#servidores-de-aplicaciones-el-mejor-amigo-de-un-servidor-web","title":"Servidores de aplicaciones: El mejor amigo de un servidor web","text":"<p>Los servidores de aplicaciones son fundamentales para las exigencias actuales de interconexi\u00f3n. Las empresas, en \u00faltima instancia, est\u00e1n al servicio de los intereses de los clientes por lo que sin una conexi\u00f3n escalable y estable a los recursos de las aplicaciones, los clientes modernos huir\u00e1n sin mirar atr\u00e1s.</p> <p>Los servidores de aplicaciones asumen el papel de conector y mejor amigo de los servidores web. Cuando los servidores web tienen una petici\u00f3n del cliente que es demasiado para soportar, los servidores de aplicaciones hacen posible mantener la comunicaci\u00f3n sin problemas con el contenido web din\u00e1mico.</p>"},{"location":"ServAplic/#que-es-el-despliegue-de-aplicaciones-web","title":"\u00bfQu\u00e9 es el despliegue de aplicaciones web?","text":"<p>El despliegue en el desarrollo de software y web significa pasar los cambios o actualizaciones de un entorno de funcionamiento a otro. Al configurar un sitio web, siempre se tendr\u00e1 el sitio web en vivo, que se llama el entorno en vivo o entorno de producci\u00f3n.</p> <p>Si se quiere tener la capacidad de hacer cambios sin afectar a un sitio web en producci\u00f3n, se puede (y se debe) a\u00f1adir entornos adicionales. Estos entornos se llaman entornos de desarrollo o entornos de despliegue. Los entornos de desarrollo adicionales suelen ser un entorno local, un entorno de desarrollo y un entorno de preparaci\u00f3n o preproducci\u00f3n. El n\u00famero de entornos que se necesitan depende de cada caso y de la complejidad del proyecto en el que se est\u00e9 trabajando.</p> <p>Aunque los modelos de despliegue pueden variar, el m\u00e1s com\u00fan es el cl\u00e1sico modelo de despliegue \"de izquierda a derecha\" cuando se trabaja con m\u00faltiples entornos de despliegue. En este modelo, los cambios se realizan en entornos locales, de desarrollo o de preparaci\u00f3n (dependiendo de la configuraci\u00f3n) y se van pasando de izquierda a derecha a trav\u00e9s de los diferentes entornos, terminando en el de producci\u00f3n.</p> <p>Una vez completado este proceso de despliegue, los nuevos cambios ser\u00e1n visibles en el entorno activo.</p> <p></p> <p>En la imagen anterior se muestra una forma muy simplificada y cl\u00e1sica de manejar los despliegues cuando se trabaja con sitios web en un CMS. No necesariamente se necesitan todos los entornos anteriores, pero el proceso sigue siendo el mismo.</p> <p>Al utilizar m\u00faltiples entornos se obtiene una lista de ventajas - la principal es que se pueden hacer cambios sin que afecten a su sitio web en vivo. Una vez que los cambios se hacen, se prueban y est\u00e1n listos para ser pasados a producci\u00f3n, el proceso de despliegue se encarga del resto.</p>"},{"location":"ServAplic/#de-que-pasos-consta-el-proceso-despliegue","title":"\u00bfDe qu\u00e9 pasos consta el proceso despliegue?","text":"<p>El flujo del proceso de despliegue consta de 5 pasos: Planificaci\u00f3n, desarrollo, pruebas, despliegue y supervisi\u00f3n.</p> <p>A continuaci\u00f3n nos adentraremos en cada uno de los 5 pasos, pero antes una nota r\u00e1pida.</p> <p>El flujo del proceso de despliegue que aparece a continuaci\u00f3n cubre los aspectos fundamentales, que se dividen en 5 pasos. Esto no significa que sea la \u00fanica manera de hacerlo - podr\u00eda haber un proceso mejor para cada caso. Es una simplificaci\u00f3n para que cubra las partes m\u00e1s importantes.</p> <ol> <li> <p>Recordar tener un plan de despliegue de software</p> <p>Para asegurarse de que el proceso de despliegue se desarrolle con la mayor fluidez posible, lo mejor es tener un plan de despliegue que se siga en todo momento. Al tener un plan nos aseguramos de que todo se haga de la misma manera cada vez que se realicen cambios. Esto es especialmente \u00fatil cuando varios usuarios trabajan en el mismo proyecto.</p> <p>Un plan de despliegue debe incluir reglas sobre cu\u00e1ndo desplegar desde los entornos locales a los sitios de desarrollo o de puesta en escena, as\u00ed como horarios para cuando los nuevos cambios pueden ir a un entorno en vivo. Al tener un plan establecido, se reduce el riesgo de conflictos entre los diferentes cambios y se asegura que el proceso de despliegue sea lo m\u00e1s f\u00e1cil y fluido posible. Si se est\u00e1 trabajando en un proyecto de c\u00f3digo abierto, tambi\u00e9n da la oportunidad de hacer Release Candidates y dejar que la comunidad lo pruebe para detectar cualquier error que se pueda haber pasado por alto.</p> <p>Adem\u00e1s de un plan general, tambi\u00e9n es importante planificar cada uno de los cambios que se vaya a realizar. Este proceso ser\u00e1 muy r\u00e1pido para los cambios menores, pero deber\u00eda ser mucho m\u00e1s extenso para los grandes cambios. Si se planifica con mucha antelaci\u00f3n, se estar\u00e1 mucho m\u00e1s preparado para tener un proceso de despliegue sin problemas.</p> </li> <li> <p>El desarrollo propiamente dicho</p> <p>Una vez que se tenga el plan en marcha, es el momento de realizar el desarrollo real. Para garantizar que cualquier desarrollo pueda realizarse simult\u00e1neamente y sin romper nada, es importante trabajar \u00fanicamente en entornos locales o de desarrollo. Una vez que el proceso de desarrollo est\u00e1 hecho, es el momento de empezar a probar y desplegar los cambios a trav\u00e9s de la configuraci\u00f3n de su entorno.</p> </li> <li> <p>Probar los cambios</p> <p>Probar los cambios es crucial para garantizar que no haya errores en el entorno de producci\u00f3n final. Pero las pruebas no pueden completarse sin desplegar los cambios en nuevos entornos. </p> <p>Una vez que se haya comprobado que todos los cambios funcionan en el entorno local o de desarrollo, es el momento de desplegar los cambios en el siguiente entorno. Esto debe hacerse hasta el entorno de preproducci\u00f3n, donde se deben realizar las pruebas finales de control de calidad. Si todo est\u00e1 correctamente probado y funciona en un entorno parecido al entorno real, es el momento de desplegarlo en vivo.</p> <p>Si se descubren errores por el camino en cualquier entorno, es importante tener un plan para manejarlos. Por lo general, cualquier cambio que no pase las pruebas en el entorno de ensayo debe ser enviado de nuevo a la fase de desarrollo y -una vez corregido- volver a trabajar en los entornos.</p> </li> <li> <p>Desplegar los cambios en el entorno real</p> <p>Una vez que se han realizado todas las pruebas en los entornos anteriores y se han corregido los errores, es el momento de desplegar los cambios en el entorno real. Esto deber\u00eda ser algo bastante seguro, pero todos los que han trabajado en el desarrollo de software saben que algo puede salir mal.</p> <p>As\u00ed que, aunque es f\u00e1cil detenerse aqu\u00ed, es importante incluir el \u00faltimo paso del proceso: la monitorizaci\u00f3n.</p> </li> <li> <p>Supervisar los cambios</p> <p>Una vez que los nuevos cambios est\u00e9n en marcha y los usuarios reales utilicen activamente el sitio web o la aplicaci\u00f3n, es importante supervisar que todo funcione seg\u00fan lo previsto. Independientemente de la planificaci\u00f3n realizada, existe la posibilidad de que los usuarios se encuentren con problemas o realicen acciones que usted no hab\u00eda previsto durante la planificaci\u00f3n y el desarrollo.</p> <p>Un buen consejo para la monitorizaci\u00f3n es planificar los lanzamientos para los momentos en los que la menor cantidad de usuarios lo noten y en los que se tengan recursos de desarrollo listos en caso de que haya que arreglar algo. De este modo, el n\u00famero de usuarios afectados por cualquier error ser\u00e1 m\u00ednimo y se tendr\u00e1 gente preparada para arreglarlo o revertir los cambios si es necesario. </p> <p>Si se han de revertir los cambios, es importante mantener la calma y tener un proceso para manejarlo con la misma minuciosidad con la que se manejan los despliegues.</p> </li> </ol>"},{"location":"ServAplic/#diferentes-tipos-de-despliegue","title":"Diferentes tipos de despliegue","text":"<p>Cuando se trata del tipo de despliegue, a menudo se divide en dos partes. Por lo general, se dividir\u00e1 entre metadatos y contenido, ya que estos tienen diferentes impactos en un nuevo entorno y deben ser manejados de manera diferente.</p>"},{"location":"ServAplic/#despliegue-de-metadatos","title":"Despliegue de metadatos","text":"<p>Los metadatos incluyen los cambios en el c\u00f3digo, las plantillas, las hojas de estilo, los archivos, etc. Estos cambios a menudo requerir\u00e1n una comprobaci\u00f3n de validaci\u00f3n entre entornos para ver si tiene alg\u00fan conflicto imprevisto que deba resolverse. Muchas herramientas de despliegue incluyen comprobaciones de coherencia y ayudan a guiarte en caso de conflictos.</p>"},{"location":"ServAplic/#despliegue-de-contenidos","title":"Despliegue de contenidos","text":"<p>El contenido, como el texto, las im\u00e1genes y los v\u00eddeos, se maneja de forma diferente durante el despliegue, ya que es menos complicado moverlo entre entornos que los metadatos. Por esa raz\u00f3n, a menudo ver\u00e1s que las herramientas de despliegue hacen que el despliegue de contenido sea accesible para los editores de contenido y no s\u00f3lo para los desarrolladores. De esta manera, un editor de contenidos no depende de un desarrollador cuando se trata de enviar nuevos contenidos a un entorno activo.</p>"},{"location":"ServAplic/#mejores-practicas-de-despliegue","title":"Mejores pr\u00e1cticas de despliegue","text":"<p>Cuando se trabaja con entornos de despliegue, es importante, como se ha mencionado anteriormente, tener un plan y un proceso claro para ello en el equipo. Para ampliar ese proceso hemos reunido algunas mejores pr\u00e1cticas que son buenas para implementar como parte de su proceso.</p> <p>Se ha de tener en cuenta que las siguientes pr\u00e1cticas recomendadas se refieren principalmente al desarrollo de software y de la web. Si  se est\u00e1n llevando a cabo otros tipos de desarrollo puede haber otras cosas a considerar en el flujo de trabajo de despliegue.</p>"},{"location":"ServAplic/#utilizar-git","title":"Utilizar Git","text":"<p>Esto puede parecer obvio, pero tener un sistema de control de versiones es inestimable para cualquier flujo de trabajo de despliegue. Sin \u00e9l, es probable que se produzcan errores si se trabaja en equipo.</p> <p>Incluso si eres el \u00fanico desarrollador que trabaja en un proyecto, es muy recomendable utilizar Git en caso de que necesites volver a versiones anteriores o si alguien nuevo se une a tu equipo.</p> <p>Sin Git ser\u00e1 dif\u00edcil asegurar la consistencia en el flujo de trabajo de despliegue y puede llevar a que se cometan m\u00e1s errores por desplegar c\u00f3digo inacabado o por no tener a todos los miembros del equipo trabajando en la misma versi\u00f3n del c\u00f3digo.</p>"},{"location":"ServAplic/#trabajar-en-ramas","title":"Trabajar en ramas","text":"<p>Como regla general, tu equipo deber\u00eda trabajar en ramas. Hacerlo as\u00ed permitir\u00e1 trabajar en varias cosas al mismo tiempo sin que se afecten entre s\u00ed.</p> <p>Un ejemplo es cuando se encuentra un error que debe ser corregido. Si un desarrollador est\u00e1 utilizando una rama para trabajar en una nueva caracter\u00edstica, puede hacer r\u00e1pidamente una nueva rama del entorno de desarrollo para trabajar en el error. De este modo, habr\u00e1 dos ramas diferentes que no chocar\u00e1n ni crear\u00e1n posibles conflictos de fusi\u00f3n m\u00e1s adelante.</p> <p>Trabajar con ramas tambi\u00e9n ayuda al equipo con las preguntas y respuestas a la hora de desplegar en un entorno de preproducci\u00f3n. Tener los cambios en ramas separadas y fusionarlas dar\u00e1 a los testers una mejor visi\u00f3n de lo que se empuj\u00f3 (se hizo push) y lo que deben probar.</p>"},{"location":"ServAplic/#utilizar-un-entorno-local-como-entorno-de-desarrollo","title":"Utilizar un entorno local como entorno de desarrollo","text":"<p>Aunque es posible trabajar directamente en un entorno de desarrollo, en la mayor\u00eda de los casos se ahorrar\u00e1 mucho tiempo trabajando localmente. Al instalar el sitio web o el software de forma local, se podr\u00e1 trabajar de forma m\u00e1s eficiente y acelerar las pruebas y la verificaci\u00f3n del c\u00f3digo.</p> <p>En primer lugar, no tienes hay que confirmar, empujar y desplegar constantemente un cambio antes de poder verificar si funciona. Y cuando algo no funciona (esto nos pasa a todos) tendr\u00e1s que revertirlo, empujarlo de nuevo y volver a desplegarlo.</p> <p>En lugar de eso, puedes simplemente ejecutarlo todo localmente y, una vez que funcione como es debido, puedes empujarlo directamente al entorno de preparaci\u00f3n para una prueba m\u00e1s rigurosa. </p>"},{"location":"ServAplic/#revisar-las-diferencias-antes-de-desplegarlo-en-el-entorno-real","title":"Revisar las diferencias antes de desplegarlo en el entorno real","text":"<p>Una vez que el equipo de pruebas se haya asegurado de que todo funciona en el entorno de pruebas, es el momento de desplegar el c\u00f3digo en el entorno real. </p> <p>Pero antes de hacer el despliegue final, es importante hacer una revisi\u00f3n final de las diferencias entre el entorno actual en producci\u00f3n y el entorno de desarrollo del que se parte. </p> <p>Incluso despu\u00e9s de las pruebas exhaustivas y la garant\u00eda de calidad, las cosas pueden ir mal tan pronto como se llega al entorno real. Y una vez que eso sucede, a menudo puede ser muy estresante implementar correcciones r\u00e1pidas o hacer una reversi\u00f3n completa de la versi\u00f3n. Por lo general, se querr\u00e1 evitar esto a toda costa, por lo que es muy recomendable hacer una revisi\u00f3n final del c\u00f3digo antes de pulsar el bot\u00f3n de despliegue.</p>"},{"location":"ServAplic/#considerar-tener-grupos-de-usuarios-con-diferentes-permisos","title":"Considerar tener grupos de usuarios con diferentes permisos","text":"<p>Mientras que cualquier desarrollador debe ser capaz de empujar los cambios a los entornos de test, puede ser una buena idea para restringir qui\u00e9n puede desplegarlos en vivo.</p> <p>Para los equipos m\u00e1s peque\u00f1os, esto puede no tener mucho sentido, ya que puede crear un cuello de botella para implantar nuevos cambios. Pero si se trata de un equipo m\u00e1s grande con un nivel de experiencia muy variado entre los miembros del equipo, puede ser una gran idea dejar que s\u00f3lo los desarrolladores senior desplieguen en el entorno de producci\u00f3n.</p> <p>Esto asegura efectivamente un mayor nivel de control sobre el flujo de releases y tambi\u00e9n significa que al menos un par de ojos senior han visto lo que est\u00e1 pasando en el entorno real. Si lo que se tiene es un enfoque muy iterativo con lanzamientos r\u00e1pidos como el utilizado en la metodolog\u00eda CD (Continous Delivery), esto podr\u00eda ralentizarlo todo demasiado. Aun as\u00ed, dado que los cambios que se empujan son normalmente m\u00e1s peque\u00f1os con este enfoque, probablemente no se sufrir\u00e1n grandes retrasos. Y si significa detectar algunos errores m\u00e1s, el tiempo que se ahorra al no tener que corregir errores compensar\u00e1 el tiempo invertido.</p> <p>Hablando de romper cosas...</p>"},{"location":"ServAplic/#mantener-la-calma-incluso-si-algo-se-rompe","title":"Mantener la calma, incluso si algo se rompe","text":"<p>Acabas de desplegar en tu entorno de producci\u00f3n y ahora tu sitio web est\u00e1 roto. Menuda liada, \u00bfahora qu\u00e9 se hace?</p> <p>Desgraciadamente, estas cosas ocurren - no importa lo cuidadoso que se sea. Pero en lugar de entrar en p\u00e1nico y aplicar hotfixes o retroceder inmediatamente, es importante mantener la calma y asegurarse de que lo que est\u00e1 haciendo no va a romper las cosas a\u00fan m\u00e1s.</p> <p>En primer lugar, se deber\u00eda comprobar si es posible realizar una reversi\u00f3n o rollback y si realmente se arreglar\u00eda algo. En algunas situaciones, es posible que se hayan hecho cambios que son irreversibles y un rollback s\u00f3lo causar\u00eda problemas a\u00fan mayores.</p> <p>Tambi\u00e9n hay que comprobar si lo que se ha roto es una caracter\u00edstica existente o nueva. De nuevo, si la cosa que se rompi\u00f3 no era parte de la nueva versi\u00f3n, probablemente no servir\u00e1 de nada hacer un rollback.</p> <p>As\u00ed que en lugar de entrar en p\u00e1nico, se debe tener un plan preparado y respirar hondo antes de ponerse a trabajar en la b\u00fasqueda de una soluci\u00f3n. Puede parecer sencillo, pero puede ayudar a salir de una mala situaci\u00f3n mucho m\u00e1s r\u00e1pido que si lanz\u00e1ndose directamente.</p>"},{"location":"ServAplic/#a-que-hora-del-dia-se-deben-desplegar-los-cambios","title":"\u00bfA qu\u00e9 hora del d\u00eda se deben desplegar los cambios?","text":"<p>En caso de que algo se rompa al desplegar en el entorno de producci\u00f3n, es importante encontrar el mejor momento para hacerlo. Y aunque este momento var\u00eda mucho de un proyecto a otro, hay dos preguntas que pueden hacerse para determinar cu\u00e1ndo desplegar los cambios:</p> <ol> <li>\u00bfCu\u00e1ndo tiene la menor cantidad de usuarios activos?</li> <li>\u00bfCu\u00e1ndo tiene a alguien preparado para supervisar y solucionar los problemas despu\u00e9s del despliegue?</li> </ol>"},{"location":"ServAplic/#cuando-tiene-el-menor-numero-de-usuarios-activos","title":"\u00bfCu\u00e1ndo tiene el menor n\u00famero de usuarios activos?","text":"<p>Por lo general, lo que se quiere es que el menor n\u00famero posible de personas se vea afectado por sus nuevos cambios. Por lo tanto, como regla general, debe buscar cualquier momento del d\u00eda en el que el menor n\u00famero de usuarios est\u00e9 utilizando activamente el sitio web o software.</p> <p>En el caso de los sitios web, esto puede hacerse consultando las herramientas de an\u00e1lisis de datos que se tengan en marcha, por ejemplo, Google Analytics. All\u00ed se podr\u00e1n crear informes personalizados que muestren a qu\u00e9 hora del d\u00edase  tiene menos tr\u00e1fico, as\u00ed como identificar las horas punta en las que definitivamente no se deber\u00eda hacer ning\u00fan cambio.</p> <p>Adem\u00e1s de mirar la hora del d\u00eda, tambi\u00e9n puede valer la pena mirar c\u00f3mo se reparte la actividad de los usuarios entre los d\u00edas de la semana. </p> <p>Este an\u00e1lisis es muy bueno, pero a menudo acabar\u00e1 con la misma respuesta: Deber\u00edan publicarse los cambios durante la noche. Y aunque esto podr\u00eda parecer una gran idea si s\u00f3lo nos fij\u00e1ramos en esta cuesti\u00f3n, es importante que tambi\u00e9n tengamos en cuenta la siguiente.</p>"},{"location":"ServAplic/#hay-alguien-despierto-y-preparado-para-solucionar-posibles-problemas-en-ese-momento","title":"\u00bfHay alguien despierto y preparado para solucionar posibles problemas en ese momento?","text":"<p>Si la respuesta es no, entonces desplegar los cambios en mitad de la noche podr\u00eda no ser la mejor idea.</p> <p>En su lugar, se deber\u00edan identificar las franjas horarias en las que puedas encontrar el mejor equilibrio entre el n\u00famero de usuarios activos y los desarrolladores dispuestos a solucionar los problemas. Esto variar\u00e1 mucho dependiendo del proyecto y del equipo, pero en general, se deber\u00edan encontrar algunas opciones. Y si ya se tiene un horario fijo de despliegue, incluso puede convencerse al equipo de que est\u00e9 listo a horas extra\u00f1as del d\u00eda. Es mucho m\u00e1s f\u00e1cil convencer a alguien de que venga unas horas antes si sabe que s\u00f3lo ocurre una vez cada ciclo o sprint. </p> <p>Es por este motivo que en muchas empresas se trabaja con guardias rotativas para ofrecer una disponibilidad total.</p> <p>Info<p>Aunque no hay un momento perfecto para el despliegue, definitivamente hay momentos que son mejores que otros.</p> </p>"},{"location":"ServAplic/#cuales-son-las-ventajas-del-despliegue-y-de-los-entornos-multiples","title":"\u00bfCu\u00e1les son las ventajas del despliegue y de los entornos m\u00faltiples?","text":""},{"location":"ServAplic/#reduccion-del-riesgo-de-romper-un-sitio-web-en-produccion","title":"Reducci\u00f3n del riesgo de romper un sitio web en producci\u00f3n","text":"<p>Una de las principales razones para utilizar m\u00faltiples entornos y confiar en el despliegue es reducir el riesgo de que los cambios tengan un impacto negativo en un sitio web en vivo. Mientras que los cambios menores se pueden hacer f\u00e1cilmente directamente en un sitio web en vivo, los cambios m\u00e1s grandes se pueden hacer en entornos separados sin el riesgo de romper nada en el entorno en vivo.</p> <p>Tener varios usuarios trabajando en el mismo sitio web tambi\u00e9n garantiza que nadie se arriesgue a romper algo debido a los cambios de otro usuario.</p>"},{"location":"ServAplic/#ahorro-de-tiempo","title":"Ahorro de tiempo","text":"<p>Sin la preocupaci\u00f3n de romper algo en un sitio web en vivo, se pueden realizar los cambios en el orden que se prefiera. Esto significa que se puede optimizar el flujo de trabajo para realizar los cambios sin tener en cuenta el aspecto o el funcionamiento del sitio web mientras se lleva a cabo.</p> <p>Si se trabaja en un entorno local tambi\u00e9n existe la ventaja de que los cambios se procesan m\u00e1s r\u00e1pido y no hay dependencias de ning\u00fan problema de conectividad.</p> <p>A la hora de desplegar los cambios, tambi\u00e9n se ahorrar\u00e1 tiempo, ya que se podr\u00e1n realizar todos los cambios al mismo tiempo en lugar de tener que hacerlo en varios pasos m\u00e1s peque\u00f1os.</p>"},{"location":"ServAplic/#el-contenido-sensible-al-tiempo-es-mas-facil-de-gestionar","title":"El contenido sensible al tiempo es m\u00e1s f\u00e1cil de gestionar","text":"<p>Si se est\u00e1n llevando a cabo campa\u00f1as que son sensibles al tiempo y que s\u00f3lo pueden ponerse en marcha a partir de un determinado d\u00eda u hora, entonces la ejecuci\u00f3n de m\u00faltiples entornos y el uso del despliegue pueden ahorrar una gran cantidad de estr\u00e9s.</p> <p>Al crear todo el contenido en un entorno de puesta en escena/preprod (o similar) puedes terminar tu campa\u00f1a sin preocuparte de que sea visible para tus usuarios. Y cuando llegue el momento de lanzarla, podr\u00e1 hacerla visible en muy poco tiempo despleg\u00e1ndola en su entorno real.</p> <p>Y si la herramienta de despliegue incluye roles de usuario con configuraci\u00f3n de permisos, es posible que un editor de contenidos haga todo esto -incluyendo el despliegue de los cambios- sin involucrar a un desarrollador en el proceso.</p>"},{"location":"ServAplic/#despliegue-de-aplicaciones-java","title":"Despliegue de aplicaciones Java","text":""},{"location":"ServAplic/#introduccion_1","title":"Introducci\u00f3n","text":"<p>En el lado del servidor, tenemos que conseguir que nuestro servidor HTTP sea capaz de ejecutar programas de aplicaci\u00f3n que recojan los par\u00e1metros de peticiones del cliente, los procesen y devuelvan al servidor un documento que \u00e9ste pasar\u00e1 a su vez al cliente.</p> <p>As\u00ed, para el cliente el servidor no habr\u00e1 hecho nada distinto a lo estipulado en el protocolo HTTP, pero el servidor podr\u00e1 valerse de herramientas externas para procesar y servir la petici\u00f3n solicitada, pudiendo as\u00ed no limitarse a servir p\u00e1ginas est\u00e1ticas, sino utilizar otras aplicaciones (servlets, JSP...) para servir documentos con contenido din\u00e1mico.</p> <p>Los programas de aplicaci\u00f3n son t\u00edpicamente programas que realizan consultas a bases de datos, procesan la informaci\u00f3n resultante y devuelven la salida al servidor, entre otras tareas.</p> <p>Vamos a centrarnos en las aplicaciones web JavaEE, en las que los componentes din\u00e1micos que recibir\u00e1n las peticiones HTTP en el servidor ser\u00e1n los servlets y JSPs. Estos componentes podr\u00e1n analizar esta petici\u00f3n y utilizar otros componentes Java para realizar las acciones necesarias (beans, EJBs, etc).</p>"},{"location":"ServAplic/#estructura-de-una-aplicacion-java","title":"Estructura de una aplicaci\u00f3n Java","text":"<p>Una aplicaci\u00f3n web JavaEE que utilice servlets o p\u00e1ginas JSP debe tener una estructura de ficheros y directorios determinada:</p> <ul> <li> <p>En el directorio ra\u00edz de la aplicaci\u00f3n se colocan las p\u00e1ginas HTML o JSP (podemos dividirlas tambi\u00e9n en directorios si queremos)</p> </li> <li> <p>Colgando del directorio inicial de la aplicaci\u00f3n, se tiene un directorio WEB-INF, que contiene la informaci\u00f3n Web relevante para la aplicaci\u00f3n.</p> </li> <li> <p>El resto de elementos de la aplicaci\u00f3n (im\u00e1genes, etc), podemos estructurarlos como nos convenga.</p> </li> </ul> <p>Esta estructura estar\u00e1 contenida dentro de alg\u00fan directorio, que ser\u00e1 el directorio correspondiente a la aplicaci\u00f3n Web, y que podremos, si lo hacemos convenientemente, copiar en el servidor que nos convenga. Es decir, cualquier servidor Web JavaEE soporta esta estructura en una aplicaci\u00f3n Web, s\u00f3lo tendremos que copiarla en el directorio adecuado de cada servidor.</p> <p>Cada aplicaci\u00f3n web JavaEE es un contexto, una unidad que comprende un conjunto de recursos, clases Java y su configuraci\u00f3n. Cuando hablemos de contexto, nos estaremos refiriendo a la aplicaci\u00f3n web en conjunto.</p>"},{"location":"ServAplic/#empaquetamiento","title":"Empaquetamiento","text":"<p>Una forma de distribuir aplicaciones Web es empaquetar toda la aplicaci\u00f3n (a partir de su directorio inicial) dentro de un fichero WAR (de forma parecida a como se hace con un TAR o un JAR), y distribuir dicho fichero. Podemos crear un fichero WAR de la misma forma que creamos un JAR, utilizando la herramienta JAR.</p> <p>Estos ficheros WAR son un est\u00e1ndar de JavaEE, por lo que podremos utilizarlos en los diferentes servidores de aplicaciones JavaEE existentes. </p>"},{"location":"ServAplic/#despliegue-de-archivos-war","title":"Despliegue de archivos WAR","text":"<p>Los archivos WAR, son un tipo especial de JAR utilizado para distribuir los artefactos o contenido de las aplicaciones Web en tecnolog\u00eda JEE: p\u00e1ginas Web HTML o JSP,clases Java, servlets Java, archivos XML, librer\u00edas de etiquetas (tag libraries) y otros recursos.</p> <p>El empaquetamiento en archivos WAR es algo est\u00e1ndar, pero no as\u00ed el proceso de despliegue, que es dependiente del servidor. No obstante, la mayor\u00eda de servidores JavaEE funcionan en este aspecto de modo similar: permiten desplegar las aplicaciones desde una consola de administraci\u00f3n y tambi\u00e9n \"dejando caer\" el fichero en determinado directorio.</p>"},{"location":"ServAplic/#maven","title":"Maven","text":"<p>Maven es una herramienta open-source, que se cre\u00f3 en 2001 con el objetivo de simplificar los procesos de build (compilar y generar ejecutables a partir del c\u00f3digo fuente).</p> <p>Antes de existir Maven, si quer\u00edamos compilar y generar ejecutables de un proyecto, ten\u00edamos que analizar qu\u00e9 partes de c\u00f3digo se deb\u00edan compilar, qu\u00e9 librer\u00edas utilizaba el c\u00f3digo, d\u00f3nde incluirlas, qu\u00e9 dependencias de compilaci\u00f3n hab\u00eda en el proyecto\u2026</p> <p>En el mejor de los casos, se empleaban unos pocos minutos para saber c\u00f3mo hacer una build del proyecto. En el peor de los casos, el proceso de build era tan complejo que un desarrollador pod\u00eda tardar horas en saber c\u00f3mo compilar y generar los ejecutables a partir del c\u00f3digo.</p> <p>Ahora, la build de cualquier proyecto Maven, independientemente de sus m\u00f3dulos, dependencias o librer\u00edas, consiste simplemente en ejecutar el comando <code>mvn install</code>.</p> <p>Por otra parte, antes de Maven, cada vez que sal\u00eda una nueva versi\u00f3n de un analizador est\u00e1tico de c\u00f3digo, de un framework de pruebas unitarias (como JUnit) o cualquier librer\u00eda, hab\u00eda que parar todo el desarrollo para reajustar el proceso de build a las nuevas necesidades.</p> <p>Y\u2026 \u00bfc\u00f3mo se ejecutaban las pruebas? \u00bfC\u00f3mo se generaban informes? Sin Maven, en cada proyecto esto se hac\u00eda de distinta manera.</p> <p></p> <p>Lo cierto es que Maven es mucho m\u00e1s que una herramienta que hace builds del c\u00f3digo.</p> <p>Podr\u00edamos decir, que Maven es una herramienta capaz de gestionar un proyecto software completo, desde la etapa en la que se comprueba que el c\u00f3digo es correcto, hasta que se despliega la aplicaci\u00f3n, pasando por la ejecuci\u00f3n de pruebas y generaci\u00f3n de informes y documentaci\u00f3n.</p> <p>Para ello, en Maven se definen tres ciclos de build del software con una serie de etapas diferenciadas. Por ejemplo el ciclo por defecto tiene las etapas de:</p> <ul> <li>Validaci\u00f3n (validate): Validar que el proyecto es correcto.</li> <li>Compilaci\u00f3n (compile).</li> <li>Test (test): Probar el c\u00f3digo fuente usando un framework de pruebas unitarias.</li> <li>Empaquetar (package): Empaquetar el c\u00f3digo compilado y transformarlo en alg\u00fan formato tipo .jar o .war.</li> <li>Pruebas de integraci\u00f3n (integration-test): Procesar y desplegar el c\u00f3digo en alg\u00fan entorno donde se puedan ejecutar las pruebas de integraci\u00f3n.</li> <li>Verificar que el c\u00f3digo empaquetado es v\u00e1lido y cumple los criterios de calidad (verify).</li> <li>Instalar el c\u00f3digo empaquetado en el repositorio local de Maven, para usarlo como dependencia de otros proyectos (install).</li> <li>Desplegar el c\u00f3digo a un entorno (deploy).</li> </ul> <p>Para poder llevar a cabo alguna de estas fases en nuestro c\u00f3digo, tan solo tendremos que ejecutar <code>mvn</code> y el nombre de la fase (la palabra que puse entre par\u00e9ntesis). Adem\u00e1s van en cadena, es decir, si empaquetamos el c\u00f3digo (package), Maven ejecutar\u00e1 desde la fase de validaci\u00f3n (validate) a empaquetaci\u00f3n (package). As\u00ed de simple.</p> <p>Por otra parte, con Maven la gesti\u00f3n de dependencias entre m\u00f3dulos y distintas versiones de librer\u00edas se hace muy sencilla. En este caso, solo tenemos que indicar los m\u00f3dulos que componen el proyecto, o qu\u00e9 librer\u00edas utiliza el software que estamos desarrollando en un fichero de configuraci\u00f3n de Maven del proyecto llamado POM (Project Object Module).</p> <p>Adem\u00e1s, en el caso de las librer\u00edas, no tienes ni tan siquiera que descargarlas a mano. Maven posee un repositorio remoto (Maven central) donde se encuentran la mayor\u00eda de librer\u00edas que se utilizan en los desarrollos de software, y que la propia herramienta se descarga cuando sea necesario.</p> <p>Digamos que Maven aporta una sem\u00e1ntica com\u00fan al proceso de build y desarrollo del software.</p> <p>Incluso, establece una estructura com\u00fan de directorios para todos los proyectos. Por ejemplo el c\u00f3digo estar\u00e1 en <code>${ra\u00edz del proyecto}/src/main/java</code>, los recursos en <code>${ra\u00edz del proyecto }/src/main/resources</code>. Los tests est\u00e1n en <code>${ra\u00edz del proyecto }/src/test</code>.</p>"},{"location":"ServAplic/#despliegue-de-aplicaciones-nodejs-con-express","title":"Despliegue de aplicaciones Node.js con Express","text":""},{"location":"ServAplic/#que-es-nodejs","title":"\u00bfQu\u00e9 es Node.js?","text":"<p>Node JS es un entorno de ejecuci\u00f3n de JavaScript r\u00e1pido que utilizamos para construir aplicaciones del lado del servidor, pero por s\u00ed mismono sabe c\u00f3mo servir archivos, manejar peticiones ni m\u00e9todos HTTP, as\u00ed que aqu\u00ed es donde entra en juego Express JS.</p> <p>Node.js no es un lenguaje de programaci\u00f3n. M\u00e1s bien, es un entorno de ejecuci\u00f3n que se utiliza para ejecutar JavaScript fuera del navegador.</p> <p></p> <p>Node.js tampoco es un framework (una plataforma para desarrollar aplicaciones de software). El tiempo de ejecuci\u00f3n de Node.js se construye sobre un lenguaje de programaci\u00f3n -en este caso, JavaScript- y ayuda a la ejecuci\u00f3n de los propios frameworks.</p> <p>En resumen, Node.js no es un lenguaje de programaci\u00f3n ni un marco de trabajo; es un entorno para ellos.</p>"},{"location":"ServAplic/#que-es-express","title":"\u00bfQu\u00e9 es Express?","text":"<p>Express JS es un framework de Node.js dise\u00f1ado para construir aplicaciones web de API's y aplicaciones m\u00f3viles multiplataforma de forma r\u00e1pida y hacer  que Node.js sea f\u00e1cil.</p> <p></p>"},{"location":"ServAplic/#que-es-npm","title":"\u00bfQu\u00e9 es npm?","text":"<p>NPM responde a las siglas de Node Package Manager o manejador de paquetes de node, es la herramienta por defecto de JavaScript para la tarea de compartir e instalar paquetes.</p> <p></p> <p>Tal como reza su documentaci\u00f3n, npm se compone de al menos dos partes principales.</p> <ul> <li> <p>Un repositorio online para publicar paquetes de software libre para ser utilizados en proyectos Node.js</p> </li> <li> <p>Una herramienta para la terminal (command line utility) para interactuar con dicho repositorio que te ayuda a la instalaci\u00f3n de utilidades, manejo de dependencias y la publicaci\u00f3n de paquetes.</p> </li> </ul> <p>As\u00ed pues, NPM es un gestor de paquetes para Javascript. Es una especie de Maven para paquetes Javascript, es decir, sirve para instalar y gestionar versiones de paquetes y librer\u00edas js.</p> <p>NPM lleva mucho tiempo siendo el referente en cuanto a gestores de paquetes javascript, pero desde hace un tiempo le ha salido un competidor: Yarn. Los de yarn aseguran que su gestor de librer\u00edas js es mucho m\u00e1s r\u00e1pido y potente, pero de momento el uso de NPM es mayoritario.</p>"},{"location":"ServAplic/#packagejson","title":"package.json","text":"<p>Cada proyecto en JavaScript puede enfocarse como un paquete npm con su propia informaci\u00f3n de paquete y su archivo <code>package.json</code> para describir el proyecto.</p> <p><code>package.json</code> se generar\u00e1 cuando se ejecute npm init para inicializar un proyecto JavaScript/Node.js, con los siguientes metadatos b\u00e1sicos proporcionados por los desarrolladores:</p> <ul> <li> <p>name: el nombre de la librer\u00eda/proyecto JavaScript</p> </li> <li> <p>version: la versi\u00f3n del proyecto. </p> </li> <li> <p>description: la descripci\u00f3n del proyecto</p> </li> <li> <p>license: la licencia del proyecto</p> </li> </ul>"},{"location":"ServAplic/#npm-scripts","title":"NPM scripts","text":"<p>package.json tambi\u00e9n soporta la propiedad scripts que puede definirse para ejecutar herramientas de l\u00ednea de comandos que se instalan en el contexto local del proyecto. Por ejemplo, la porci\u00f3n de scripts de un proyecto npm puede tener un aspecto similar a este:</p> <p><pre><code>{\n\"scripts\": {\n\"build\": \"tsc\",\n\"format\": \"prettier --write **/*.ts\",\n\"format-check\": \"prettier --check **/*.ts\",\n\"lint\": \"eslint src/**/*.ts\",\n\"pack\": \"ncc build\",\n\"test\": \"jest\",\n\"all\": \"npm run build &amp;&amp; npm run format &amp;&amp; npm run lint &amp;&amp; npm run pack &amp;&amp; npm test\"\n}\n}\n</code></pre> Con eslint, prettier, ncc, jest no necesariamente instalados como ejecutables globales sino como locales de tu proyecto dentro de <code>node_modules/.bin/</code>.</p>"},{"location":"ServAplic/#cicd-continous-integrationcontinous-deployment-delivery","title":"CI/CD (Continous Integration/Continous Deployment-Delivery)","text":"<p>La CI/CD es un m\u00e9todo para distribuir las aplicaciones a los clientes con frecuencia mediante el uso de la automatizaci\u00f3n en las etapas del desarrollo de aplicaciones. Los principales conceptos que se le atribuyen son la integraci\u00f3n, la distribuci\u00f3n y la implementaci\u00f3n continuas. Se trata de una soluci\u00f3n para los problemas que puede generar la integraci\u00f3n del c\u00f3digo nuevo para los equipos de desarrollo y de operaciones (tambi\u00e9n conocida como \"el infierno de la integraci\u00f3n\").</p> <p>En concreto, el proceso de integraci\u00f3n y distribuci\u00f3n continuas incorpora la automatizaci\u00f3n y la supervisi\u00f3n permanentes en todo el ciclo de vida de las aplicaciones, desde las etapas de integraci\u00f3n y prueba hasta las de distribuci\u00f3n e implementaci\u00f3n. Este conjunto de pr\u00e1cticas se conoce como \"canales de CI/CD\" y cuenta con el respaldo de los equipos de desarrollo y de operaciones que trabajan en conjunto de manera \u00e1gil, con un enfoque de DevOps o de ingenier\u00eda de confiabilidad del sitio (SRE).</p>"},{"location":"ServAplic/#cual-es-la-diferencia-entre-la-integracion-la-distribucion-y-la-implementacion-continuas","title":"\u00bfCu\u00e1l es la diferencia entre la integraci\u00f3n, la distribuci\u00f3n y la implementaci\u00f3n continuas?","text":"<p>Estas siglas tienen diferentes significados. \"CI\" siempre se refiere a la integraci\u00f3n continua, que es un proceso de automatizaci\u00f3n para los desarrolladores. El \u00e9xito de la CI implica que se dise\u00f1en, prueben y combinen los cambios nuevos en el c\u00f3digo de una aplicaci\u00f3n con regularidad en un repositorio compartido. Supone una soluci\u00f3n al problema de que se desarrollen demasiadas divisiones de una aplicaci\u00f3n al mismo tiempo, que luego podr\u00edan entrar en conflicto entre s\u00ed.</p> <p>La sigla \"CD\" se refiere a la distribuci\u00f3n o la implementaci\u00f3n continuas, y se trata de conceptos relacionados que suelen usarse indistintamente. Ambos se refieren a la automatizaci\u00f3n de las etapas posteriores del proceso, pero a veces se usan por separado para explicar hasta d\u00f3nde llega la automatizaci\u00f3n.</p> <p>Por lo general, la distribuci\u00f3n continua se refiere a que los cambios que implementa un desarrollador en una aplicaci\u00f3n se someten a pruebas autom\u00e1ticas de errores y se cargan en un repositorio (como GitHub o un registro de contenedores), para que luego el equipo de operaciones pueda implementarlos en un entorno de producci\u00f3n en vivo. Es una soluci\u00f3n al problema de la falta de supervisi\u00f3n y comunicaci\u00f3n entre los equipos comerciales y de desarrollo, as\u00ed que su prop\u00f3sito es garantizar que la implementaci\u00f3n del c\u00f3digo nuevo se lleve a cabo con el m\u00ednimo esfuerzo.</p> <p>La implementaci\u00f3n continua (la otra definici\u00f3n de \"CD\") hace referencia al lanzamiento autom\u00e1tico de los cambios que implementa el desarrollador desde el repositorio hasta la producci\u00f3n, para ponerlos a disposici\u00f3n de los clientes. As\u00ed ya no se sobrecarga a los equipos de operaciones con procesos manuales que retrasan la distribuci\u00f3n de las aplicaciones. Con este tipo de implementaci\u00f3n, se aprovechan los beneficios de la distribuci\u00f3n continua y se automatiza la siguiente etapa del proceso.</p> <p></p> <p>La CI/CD puede incluir solamente la integraci\u00f3n y la distribuci\u00f3n continuas, o las tres pr\u00e1cticas vinculadas, con la implementaci\u00f3n continua. Para complicar un poco m\u00e1s las cosas, a veces se utiliza el t\u00e9rmino \"distribuci\u00f3n continua\" para abarcar tambi\u00e9n los procesos de la implementaci\u00f3n continua.</p> <p>En realidad, no vale la pena profundizar en la sem\u00e1ntica. Solo debe recordar que la integraci\u00f3n y la distribuci\u00f3n continuas son un proceso que suele percibirse como una canalizaci\u00f3n e implica incorporar un alto nivel de automatizaci\u00f3n permanente y supervisi\u00f3n constante al desarrollo de las aplicaciones.</p> <p>El significado de los t\u00e9rminos var\u00eda en cada caso y depende de la cantidad de automatizaci\u00f3n que se haya incorporado a la canalizaci\u00f3n de integraci\u00f3n y distribuci\u00f3n continuas. Muchas empresas comienzan con la incorporaci\u00f3n de la CI, y luego van automatizando la distribuci\u00f3n y la implementaci\u00f3n, por ejemplo, con las aplicaciones desarrolladas directamente en la nube.</p> <p>Nuestros especialistas pueden ayudar a que su empresa desarrolle las pr\u00e1cticas, las herramientas y la cultura necesarias para modernizar las aplicaciones actuales y dise\u00f1ar otras nuevas con mayor eficiencia.</p>"},{"location":"ServAplic/#integracion-continua","title":"Integraci\u00f3n continua","text":"<p>El objetivo del dise\u00f1o de las aplicaciones modernas es que los desarrolladores puedan trabajar de forma simult\u00e1nea en distintas funciones de la misma aplicaci\u00f3n. Sin embargo, si una empresa fusiona todo el c\u00f3digo fuente diversificado en un solo d\u00eda (conocido como el \"d\u00eda de la fusi\u00f3n\"), las tareas pueden tornarse tediosas, manuales y muy lentas. Esto se debe a que si un desarrollador que trabaja de forma aislada implementa un cambio en una aplicaci\u00f3n, existe la posibilidad de que entre en conflicto con las modificaciones que otros desarrolladores implementaron al mismo tiempo. El problema puede agravarse a\u00fan m\u00e1s si cada desarrollador personaliza su propio entorno de desarrollo integrado (IDE) local, en lugar de que todo el equipo adopte un IDE basado en la nube.</p> <p></p> <p>La integraci\u00f3n continua (CI) permite que los desarrolladores incorporen los cambios del c\u00f3digo a un repositorio compartido con mayor frecuencia, o incluso a diario. Una vez que se incorporan las modificaciones del desarrollador, se validan con la compilaci\u00f3n autom\u00e1tica de la aplicaci\u00f3n y la ejecuci\u00f3n de distintas pruebas automatizadas (generalmente, de unidad e integraci\u00f3n), para garantizar que los cambios no hayan introducido una falla. Esto significa que se debe probar todo, desde las clases y el funcionamiento hasta los distintos m\u00f3dulos que conforman toda la aplicaci\u00f3n. Si una prueba autom\u00e1tica detecta un conflicto entre el c\u00f3digo nuevo y el actual, la CI facilita la resoluci\u00f3n de esos errores con rapidez.</p>"},{"location":"ServAplic/#distribucion-continua","title":"Distribuci\u00f3n continua","text":"<p>Despu\u00e9s de la automatizaci\u00f3n de las compilaciones y las pruebas de unidad e integraci\u00f3n de la CI, la distribuci\u00f3n continua automatiza el traslado del c\u00f3digo validado hacia un repositorio. Por eso, para que la distribuci\u00f3n continua sea eficaz, es importante que la CI ya est\u00e9 incorporada al proceso de desarrollo. El objetivo de la distribuci\u00f3n continua es tener una base de c\u00f3digo que pueda implementarse en el entorno de producci\u00f3n en cualquier momento.</p> <p></p> <p>Cada etapa (desde la incorporaci\u00f3n de los cambios al c\u00f3digo hasta la distribuci\u00f3n de las compilaciones listas para la producci\u00f3n) implica la automatizaci\u00f3n de las pruebas y del lanzamiento del c\u00f3digo. Al final de este proceso, el equipo de operaciones puede implementar una aplicaci\u00f3n para la producci\u00f3n de forma r\u00e1pida y sencilla. Descubra las otras implementaciones que puede automatizar</p>"},{"location":"ServAplic/#implementacion-continua","title":"Implementaci\u00f3n continua","text":"<p>La \u00faltima etapa del canal consolidado de CI/CD es la implementaci\u00f3n continua, que automatiza el lanzamiento de una aplicaci\u00f3n a la producci\u00f3n, ya que es una extensi\u00f3n de la distribuci\u00f3n continua, la cual automatiza el traslado de una compilaci\u00f3n lista para la producci\u00f3n a un repositorio del c\u00f3digo. Debido a que no hay ninguna entrada manual en la etapa anterior a la producci\u00f3n, la implementaci\u00f3n continua depende en gran medida del correcto dise\u00f1o de la automatizaci\u00f3n de las pruebas.</p> <p></p> <p>En la pr\u00e1ctica, los cambios que implementan los desarrolladores en la aplicaci\u00f3n en la nube podr\u00edan ponerse en marcha unos cuantos minutos despu\u00e9s de su creaci\u00f3n (siempre que hayan pasado las pruebas automatizadas). Esto facilita mucho m\u00e1s la recepci\u00f3n e incorporaci\u00f3n permanente de los comentarios de los usuarios. En conjunto, todas estas pr\u00e1cticas de CI/CD permiten que se implementen las aplicaciones con menos riesgos, ya que es m\u00e1s f\u00e1cil incorporar los cambios en las aplicaciones de a poco, en lugar de hacerlo todo de una sola vez. Sin embargo, tambi\u00e9n deben realizarse muchas inversiones iniciales, ya que se deben dise\u00f1ar las pruebas automatizadas para que se adapten a las distintas etapas de prueba y lanzamiento en el canal de la CI/CD.</p>"},{"location":"ServAplic/#conclusion","title":"Conclusi\u00f3n","text":"<p>Se ha explicado en este tema cu\u00e1les son las caracter\u00edsticas, usos y diferencias entre los servidores web y los servidores de aplicaciones.</p> <p>Tambi\u00e9n hemos explicado detalladamente en qu\u00e9 consiste un proceso de despliegue cl\u00e1sico de una aplicaci\u00f3n web, cu\u00e1les son sus fases y caracter\u00edsticas. Para reforzar este proceso, hemos listado una serie de buenas pr\u00e1cticas a la hora de llevarlo a cabo.</p> <p>Por \u00faltimo, hemos presentado las nuevas tendencias en el mundo del despliegue, como son las t\u00e9cnicas de CI/CD, que abordaremos de forma m\u00e1s profunda en el Tema 7.</p>"},{"location":"ServAplic/#referencias","title":"Referencias","text":"<p>What is an application server? (I)</p> <p>What is an application server? (II)</p> <p>What is deployment in software and web development</p> <p>Simple y r\u00e1pido. Entiende qu\u00e9 es Maven en menos de 10 min.</p> <p>Maven in 5 Minutes</p> <p>T\u00edtulo de experto universitario en desarrollo de aplicaciones y servicios con JavaEE</p> <p>Qu\u00e9 es Node.js y por qu\u00e9 deber\u00eda usarlo</p> <p>\u00bfQu\u00e9 son la integraci\u00f3n y la distribuci\u00f3n continuas (CI/CD)?</p>"},{"location":"cicd/","title":"CI/CD (Integraci\u00f3n y despliegue continuo)","text":"<p>Informaci\u00f3n</p> <p>Estos apuntes est\u00e1n basados en gran medida en unos apuntes de Domingo Gallardo y se distribuyen porque su licencia as\u00ed lo permite.</p>"},{"location":"cicd/#continuous-delivery-cd","title":"Continuous Delivery (CD)","text":"<p>Una idea fundamental de las metodolog\u00edas \u00e1giles es entregar valor frecuentemente para obtener una pronta retroalimentaci\u00f3n del cliente. Para ello es necesario tener muy engrasados los procesos de despliegue y puesta en producci\u00f3n del software. </p> <p>Una de las formas que facilita la optimizaci\u00f3n de la puesta en producci\u00f3n de software es la pr\u00e1ctica de XP (eXtreme Programming) de Integraci\u00f3n continua (Continuous Integration). En esta pr\u00e1ctica los miembros del equipo integran sus commits diariamente en el proyecto y en cada integraci\u00f3n se lanzan tests automatizados que verifican que los cambios no introducen errores.</p> <p>Adem\u00e1s de esta pr\u00e1ctica, debemos tener tambi\u00e9n automatizados todos los procesos de compilaci\u00f3n (build) y despliegue (deployment) de la aplicaci\u00f3n en los distintos entornos de prueba. Esto es lo que se denomina Despliegue continuo (Continuous Deployment). En esta l\u00ednea, se han popularizado herramientas como Docker o Kubernetes que facilitan el despliegue del software y su automatizaci\u00f3n y cada vez se demandan m\u00e1s profesionales (denominados DevOps) con capacidad de gestionar estos despliegues automatizados.</p> <p>Y en los \u00faltimos a\u00f1os se ha dado un paso m\u00e1s all\u00e1 y se ha comenzado a hablar de Entrega continua (Continous Delivery en ingl\u00e9s) con la idea de promover software que est\u00e9 listo en cualquier momento para salir a producci\u00f3n.</p> <p>En este tema veremos todos estos conceptos, con la idea de tomar un primer contacto con todos ellos. Necesitar\u00edamos un curso (o m\u00e1s) para verlos en profundidad. Intentaremos al menos conocer los conceptos b\u00e1sicos para poder seguir profundizando en alguno de ellos en el futuro.</p>"},{"location":"cicd/#el-problema-de-la-puesta-en-produccion","title":"El problema de la puesta en producci\u00f3n","text":"<p>En las empresas tradicionales no \u00e1giles el proceso de subir a producci\u00f3n una nueva versi\u00f3n es un proceso muy complicado y estresante. Se hace pocas veces, cuatro o cinco veces al a\u00f1o, durante el fin de semana cuando todos los servicios est\u00e1n parados.</p> <p>El proceso de genera muchos trastornos y dolores de cabeza. El equipo de operaciones tiene que estar pendiente del m\u00f3vil para detectar posibles problemas y ca\u00eddas del sistema. Una vez puesto el software en producci\u00f3n el equipo de desarrollo se dedicar\u00e1 continuamente a corregir bugs y solucionar problemas detectados por los usuarios.</p> <p>Esto no es \u00e1gil. Esto no permite conseguir lo que hemos comentado muchas veces de un ciclo corto de retroalimentaci\u00f3n para que el cliente pueda probar r\u00e1pidamente las nuevas caracter\u00edsticas y se pueda comprobar su valor. Recordemos que en ambientes inciertos y no predecibles es fundamental poder validar con el cliente las nuevas funcionalidades introducidas, para adaptarse y corregir posibles errores.</p> <p>La realizaci\u00f3n de entregas frecuentes tambi\u00e9n permite minimizar el riesgo. Todo el tiempo que estamos desarrollando algo sin ponerlo en producci\u00f3n es un riesgo acumulado. Hasta que no est\u00e1 en producci\u00f3n y ha sido aceptado por el cliente no sabemos si lo que estamos desarrollando va a ser validado o no. Cuanto menos tardemos en validarlo, menor ser\u00e1 el riesgo.</p> <p>La siguiente figura est\u00e1 sacada de la charla de Eduardo Ferro (@eferro) Continuous Delivery: Germinando una cultura \u00e1gil moderna. </p> <p></p> <p>En la figura de la izquierda se entrega mucho valor de golpe y el riesgo que se ha ido acumulando es mucho mayor que en la figura de la derecha, en la que se entregan peque\u00f1os incrementos de valor que nos permiten tener una retroalimentaci\u00f3n m\u00e1s r\u00e1pida y adaptar mucho mejor el producto a las necesidades de los clientes.</p> <p></p> <p>El proceso de puesta en producci\u00f3n del software depende mucho del tipo de software. En un extremo, por ejemplo, una p\u00e1gina web se puede cambiar modificando directamente el fichero HTML en la propia m\u00e1quina en la que se est\u00e1 ejecutando el servidor web. No hace falta ni recompilar, ni reiniciar el servidor. En el otro extremo, un software de control de una placa de un satelite espacial puede estar embebido en el propio firmware de la placa y para realizar un cambio puede ser necesario hasta volver a grabar y producir la placa.</p> <p>En general, la mayor\u00eda de sistemas software se encuentran entre ambos extremos. Es importante analizar con detalle cu\u00e1l es el proceso de despliegue de nuestro software, cu\u00e1nto tarda en subir a producci\u00f3n un cambio de una l\u00ednea de c\u00f3digo y cu\u00e1les son los cuellos de botella en el proceso.</p> <p></p> <p>La denominada ultima milla consiste en los pasos necesarios para la puesta en producci\u00f3n de nuestro sistema. De nada nos sirve tener un equipo \u00e1gil que hace iteraciones y reuniones con el cliente si despu\u00e9s tenemos un equipo de QA (Quality Assurance) con un 90% de pruebas manuales y otro de operaciones que tiene que configurar manualmente cualquier nuevo despliegue a producci\u00f3n y al que le cuesta dos d\u00edas revertir un despliegue fallido.</p> <p>Debemos analizar cu\u00e1l es nuestro proceso de release y hacer lo posible por mejorarlo. Encontrar los cuellos de botella, reducir los tiempos, automatizar todo lo que podamos. De forma que pasemos de un release por trimestre a un release mensual. Y despu\u00e9s a un release cada dos semanas. Y despu\u00e9s a un release semanal. Y despu\u00e9s a un posible release con cada posible cada cambio. Al final, como dice Eduardo Ferro en la charla mencionada anteriormente, el tiempo de subir un commit a producci\u00f3n debe ser de menos de 15 minutos y debemos de poder automatizar el proceso de puesta en producci\u00f3n hasta el extremo que lo podamos hacer a discreci\u00f3n, cuando queramos, \u00fanicamente pulsando un bot\u00f3n.</p> <p>Un elemento central de todo el proceso de despliegue es la configuraci\u00f3n de un pipeline de despliegue lo m\u00e1s automatizada posible.</p> <p></p> <p>el pipeline representa todos los pasos necesarios que llevan el c\u00f3digo fuente hasta producci\u00f3n. Lo veremos en detalle m\u00e1s adelante, pero es interesante adelantarla aqu\u00ed. En la imagen se puede ver:</p> <ul> <li>Compilaci\u00f3n de todas las dependencias en binarios. En el caso de una   aplicaci\u00f3n Java podr\u00edamos tener dependencias   externas (que no har\u00eda falta compilar, s\u00f3lo descargarse) y   dependencias de librer\u00edas internas que s\u00ed que estamos modificando y   que deber\u00edamos recompilar.</li> <li>Empaquetamiento, construcci\u00f3n de un \u00fanico binario a partir de todos   los binarios existentes. En el caso de una aplicaci\u00f3n Java, la fase   de package (por ejemplo, realizada con Maven) generar\u00eda un fichero   WAR que podr\u00edamos distribuir. Tambi\u00e9n, si utilizamos Docker, en esta   fase generaremos una m\u00e1quina Docker que podremos distribuir.</li> <li>Despliegue en distintos   entornos de   prueba y lanzamiento de pruebas en los distintos entornos. Cada   entorno tiene su propia configuraci\u00f3n, definida por variables de   entorno o par\u00e1metros de los comandos de puesta en marcha.</li> <li>Despliegue en entorno de staging (r\u00e9plica muy similar al entorno de   producci\u00f3n).</li> <li>Despliegue en entorno de producci\u00f3n.</li> </ul> <p>En el enfoque de entrega continua el proceso anterior est\u00e1 completamente automatizado y la puesta en producci\u00f3n se puede modular y realizar en el momento que nos interese pulsando \u00fanicamente un bot\u00f3n en cualquier momento. </p> <p>Recordemos que la forma m\u00e1s tradicional de enfrentar el problema del lanzamiento es separar una rama de release de la rama de desarrollo.</p> <p></p> <p>Al separar la rama de release podemos seguir introduciendo cambios en la rama de desarrollo sin afectar para nada al release. En la rama de release se realiza todo el pipeline de despliegue y se prueba en todos los entornos. Se introducen correcciones de peque\u00f1os bugs encontrados y se tambi\u00e9n se puede incluir alg\u00fan commit escogido de la rama de desarrollo haciendo un <code>cherry-pick</code>. Finalmente, la \u00faltima versi\u00f3n comprobada se pasa a producci\u00f3n y mezcla con la rama de releases y con la de desarrollo.</p> <p>En el enfoque de lanzamiento continuo no existen ramas de release, sino que en cualquier commit de la rama principal es candidato a ser puesto en producci\u00f3n. </p> <p></p>"},{"location":"cicd/#integracion-continua","title":"Integraci\u00f3n continua","text":"<p>La Integraci\u00f3n continua es una pr\u00e1ctica en la que los miembros del equipo integran su trabajo frecuentemente en el proyecto. Se trata de una pr\u00e1ctica de XP (eXtreme Programming) en la que se recomienda que cada miembro integre sus cambios diariamente. Esto lleva a m\u00faltiples integraciones cada d\u00eda. Cada integraci\u00f3n es verificada por una compilaci\u00f3n autom\u00e1tica (automated build) en la que se lanzan todos los tests y se detectan errores lo m\u00e1s r\u00e1pidamente posible.</p> <p>Esta pr\u00e1ctica obliga a que todos los cambios realizados por los desarrolladores sean puestos en com\u00fan continuamente, lo que promueve la compartici\u00f3n de conocimiento entre todos los miembros del equipo. Cuando una persona va a integrar sus cambios primero debe comprobar que \u00e9stos son compatibles con los cambios que ha habido en el proyecto. Como se integra diariamente, \u00e9stos no ser\u00e1n demasiados y si hay alg\u00fan error ser\u00e1 f\u00e1cil de solucionar.</p> <p>Sin embargo, si se desarrolla una versi\u00f3n separada que tarda mucho en integrarse ser\u00e1 muy posible que cuando se realice la integraci\u00f3n surjan muchos problemas de m\u00e1s dif\u00edcil soluci\u00f3n.</p>"},{"location":"cicd/#trunk-based-vs-feature-branches","title":"Trunk based vs. feature branches","text":"<p>Uno de los debates frecuentes relacionados con los flujos de trabajo de Git es si es m\u00e1s conveniente un flujo de trabajo trunk based (basado en la rama principal) o uno con feature branches (ramas de caracter\u00edsticas).</p> <p></p> <p>La imagen anterior est\u00e1 tambi\u00e9n sacada de la charla de Eduardo Ferro. En ella se muestran los dos flujos de trabajo y se muestran parejas de desarrolladores porque est\u00e1n aplicando tambi\u00e9n pair programming.</p> <p>En el flujo de desarrollo trunk based todos los desarrolladores publican sus commits continuamente (al menos una vez al d\u00eda) sobre la rama principal del proyecto. Esto obliga a mantenerse continuamente al d\u00eda sobre los cambios que otros est\u00e1n introduciendo y a tener cuidado de que nuestros cambios vayan en la misma direcci\u00f3n.</p> <p>El desarrollador actualiza su repositorio local y comienza a programar un peque\u00f1o incremento (c\u00f3digo y tests). Cuando termina lanza todos los tests para asegurarse de que no se ha roto nada. Antes de publicar los cambios, vuelve a actualizar el repositorio local con los nuevos cambios que se han a\u00f1adido a la rama principal y vuelve a lanzar los tests. Si todo funciona bien, publica los cambios en el repositorio compartido.</p> <p>Entre las ventajas de esta t\u00e9cnica se encuentran:</p> <ul> <li>La integraci\u00f3n de un nuevo commit es f\u00e1cil porque la rama principal   ha cambiado poco desde el commit anterior que integramos. No ha   habido demasiado tiempo para que el proyecto diverja mucho.</li> <li>La transparencia en los cambios hace que se detecten antes los   error</li> <li>El conocimiento del equipo evoluciona conjuntamente. Todo el mundo   tiene informaci\u00f3n actualizada a diario de los cambios que se van   introduciendo en el proyecto.</li> <li>Obliga a dividir los cambios grandes en cambios peque\u00f1os que se van   integrando poco a poco. Esto obliga a hacer un mayor esfuerzo de   dise\u00f1o y utilizar mejores arquitecturas de software.</li> </ul> <p>Entre los inconvenientes podemos destacar:</p> <ul> <li>Interrupciones m\u00e1s frecuentes en el flujo de trabajo del equipo   debido a problemas introducidos por malos commits.</li> <li>No se pueden hacer pull requests en los que se haga una revisi\u00f3n de   c\u00f3digo.</li> <li>Necesidad m\u00e1s frecuente de reverts que corrigen equivocaciones.</li> <li>Obliga al equipo a una gran disciplina y a una gran madurez. No se   deben buscar culpables por los errores introducidos. Los errores   nos hacen aprender.</li> </ul> <p>El flujo de desarrollo de ramas de caracter\u00edsticas se basa en separar ramas de caracter\u00edsticas de la rama principal. En cada rama de caracter\u00edstica se desarrolla una caracter\u00edstica y se integra en la rama principal cuando est\u00e9 terminada. Esta integraci\u00f3n se puede hacer usando un pull request.</p> <p>Ventajas:</p> <ul> <li>Se integran en la rama principal cambios completos.</li> <li>Durante el desarrollo de la caracter\u00edstica puedes aislarte del resto   del desarrollo del proyecto y centrarte \u00fanicamente en la   caracter\u00edstica que est\u00e1s desarrollando.</li> <li>Los fallos son locales a la rama. Un fallo no afecta al resto del   equipo. Puedes tomarte un tiempo en arreglar el fallo sin que el   resto del equipo se quede bloqueado.</li> <li>Posibilidad de usar pull requests y realizar revisiones de c\u00f3digo.</li> </ul> <p>Inconvenientes:</p> <ul> <li>Si las ramas tienen una duraci\u00f3n muy larga el proyecto puede haberse   modificado mucho cuando vayamos a hacer la integraci\u00f3n, haci\u00e9ndola   bastante complicada.</li> <li>El conocimiento compartido sobre el c\u00f3digo del proyecto es mucho   menor y se limita a los posibles conflictos que podemos tener en la   rama que hemos desarrollado.</li> <li>El primero que integra su rama no tiene problemas, los problemas los   tienen las siguientes integraciones. Esto crea un efecto perverso en   el que intentamos ser los primeros posiblemente a costa de menos   calidad en el c\u00f3digo.</li> </ul> <p>Posiblemente, la mejor opci\u00f3n sea comenzar con ramas de caracter\u00edsticas e ir haci\u00e9ndolas cada vez m\u00e1s cortas, de forma que se integren cada dos o tres d\u00edas como m\u00e1ximo. Al igual que en el enfoque de trunk based podr\u00edan no ser caracter\u00edsticas completas, sino peque\u00f1os incrementos. Por ejemplo, una rama podr\u00eda contener la parte de backend de la caracter\u00edstica y despu\u00e9s har\u00edamos la de frontend. Y cuando el equipo se acostumbre a hacer ramas cada vez m\u00e1s peque\u00f1as, podr\u00edamos plantearnos la opci\u00f3n de pasar a un modelo basado en trunk.</p>"},{"location":"cicd/#herramientas-de-integracion-continua","title":"Herramientas de integraci\u00f3n continua","text":"<p>Una de las caracter\u00edsticas fundamentales de la integraci\u00f3n continua es que cada vez que se integra un commit en la rama principal se debe realizar una construcci\u00f3n autom\u00e1tica del proyecto, lanz\u00e1ndose todos los tests en el entorno de integraci\u00f3n continua y construy\u00e9ndose el binario candidato a desplegar en producci\u00f3n.</p> <p>La forma de realizar esto es mediante las denominadas herramientas de integraci\u00f3n continua.</p> <p></p> <p>Podemos elegir como herramientas de integraci\u00f3n continua una herramienta que instalamos en nuestros propios servidores de integraci\u00f3n (CI server) o construcci\u00f3n continua (continuous build server) como Jenkins o tambi\u00e9n en un servicio en la nube como GitHub Actions.</p> <p>Cualquiera de estas herramientas permiten automatizar el lanzamiento de tests y la compilaci\u00f3n autom\u00e1tica de la aplicaci\u00f3n y la generaci\u00f3n de una aplicaci\u00f3n distribuible. Esta aplicaci\u00f3n puede ser un binario, un JAR o WAR, una m\u00e1quina Docker, etc. que puede ser desplegada en distintos entornos, incluido el de producci\u00f3n.</p> <p></p> <p>El servicio de integraci\u00f3n continua genera tambi\u00e9n notificaciones autom\u00e1ticas a todos los miembros del equipo indicando el estado de la compilaci\u00f3n. Tambi\u00e9n suele proporcionar un panel de control con la indicaci\u00f3n del estado de cada build.</p> <p></p>"},{"location":"cicd/#generacion-del-ejecutable","title":"Generaci\u00f3n del ejecutable","text":"<p>El resultado de la compilaci\u00f3n autom\u00e1tica realizada por el servidor de integraci\u00f3n continua debe ser un artefacto desplegable en los distintos entornos en los que vamos a probar la aplicaci\u00f3n. La aplicaci\u00f3n s\u00f3lo se debe compilar una \u00fanica vez y el resultado debe almacenarse en un sitio accesible por cualquier proceso y miembro del equipo.</p> <p>Es fundamental que las herramientas usadas para construir la aplicaci\u00f3n puedan ser usadas desde l\u00ednea de comando. De esta forma es mucho m\u00e1s sencillo adaptar y configurar distintos tipos de scripts de compilaci\u00f3n (build scripts). Entre las herramientas m\u00e1s usadas destacamos las siguientes:</p> <ul> <li>Make (C, Unix)</li> <li>Rake (Ruby) </li> <li>Maven (Java)</li> <li>Gradle (Java, Scala, etc.)</li> <li>sbt (Scala, Play Framework)</li> </ul> <p>Igual que hay distintas herramientas de compilaci\u00f3n para los diferentes lenguajes de programaci\u00f3n, existen diferentes formatos en los que se guardan los artefactos binarios resultantes de la compilaci\u00f3n. </p> <p></p> <p>Por ejemplo, el binario resultante de una aplicaci\u00f3n C es un fichero compilado que se ejecutar\u00e1 en el sistema operativo para el que haya sido compilada la aplicaci\u00f3n, mientras que el resultante de una aplicaci\u00f3n Java es un fichero JAR que podremos desplegar en cualquier m\u00e1quina en la que tengamos instalado un JRE (Java Runtime Environment).</p> <p>Adem\u00e1s tenemos el problema a\u00f1adido de generaci\u00f3n de distintos binarios para diferentes sistemas operativos. Por ejemplo, si estamos desarrollando una aplicaci\u00f3n de escritorio que va a funcionar en Windows, Linux y Mac deberemos generar los binarios correspondientes a esas distintas plataformas y despu\u00e9s testearlos de forma autom\u00e1tica en distintos ordenadores cada uno con su sistema operativo espec\u00edfico.</p> <p>En la actualidad se est\u00e1 haciendo cada vez m\u00e1s popular la utilizaci\u00f3n de im\u00e1genes Docker como artefacto binario a distribuir y ejecutar. </p> <p></p> <p>Entre las ventajas de este enfoque se encuentran el ser multiplaforma (para ejecutarlas basta con tener instalado el Docker Engine) y que los contenedores (servicios en ejecuci\u00f3n) se pueden configurar y combinar o ejecutar en clusters usando herramientas como Kubernetes.</p> <p>Es una buena pr\u00e1ctica darle a cada artefacto binario compilado un nombre distinto en el que aparezca el n\u00famero de versi\u00f3n. En el caso de la integraci\u00f3n continua, normalmente se le da al binario un nombre en el que aparece la fecha e incluso la hora de la compilaci\u00f3n. De esta forma, las distintas compilaciones pueden ser identificadas de forma \u00fanica. </p> <p>En el caso en que nuestra aplicaci\u00f3n dependa de paquetes externos es conveniente descargarlos y almacenarlos en un sitio centralizado de forma que no tengan que descargarse de Internet cada vez que se realiza una nueva compilaci\u00f3n. Para ello es conveniente configurar correctamente las cach\u00e9s del sistema de build que estemos utilizando.</p> <p>La aplicaci\u00f3n desplegable debe consistir en un \u00fanico artefacto con el nombre correcto que contenga todo lo necesario para ejecutarse en distintos entornos de prueba y pueda ser puesto en producci\u00f3n. El artefacto debe almacenarse en un lugar centralizado, accesible desde los distintos entornos de forma autom\u00e1tica. Por ejemplo, podemos usar un servidor web local y dejar el fichero en una URL concreta.</p>"},{"location":"cicd/#principios-y-practicas-de-integracion-continua","title":"Principios y pr\u00e1cticas de integraci\u00f3n continua","text":"<p>A continuaci\u00f3n presentamos en forma de \u00edtems un resumen de los elementos importantes de la integraci\u00f3n continua que hemos visto hasta ahora.</p> <ul> <li>Desarrollo de c\u00f3digo<ul> <li>El sistema debe siempre poder ser construido (build) y probado con \u00e9xito. </li> <li>Todo el mundo hace merge de los cambios con frecuencia.</li> <li>Despu\u00e9s de cada commit, el sistema se integra inmediata y autom\u00e1ticamente.</li> <li>Se desarrolla el sistema en peque\u00f1os incrementos.</li> </ul> </li> <li>Testing<ul> <li>Los desarrolladores prueban su c\u00f3digo en sus espacios de trabajo privados. </li> <li>Despu\u00e9s mezclan los cambios en el repositorio.</li> </ul> </li> <li>Servidor de integraci\u00f3n continua (CI server):<ul> <li>Monitoriza el repositorio y comprueba los cambios cuando ocurren.</li> <li>Construye el sistema y ejecuta las pruebas unitarias y de integraci\u00f3n.</li> <li>Informa al equipo de la construcci\u00f3n con \u00e9xito o de los fallos.</li> </ul> </li> <li>Errores en los build<ul> <li>El equipo arregla el problema lo antes posible.</li> <li>Continuar para integrar y probar continuamente durante todo el   proyecto. </li> </ul> </li> <li>El \u00faltimo ejecutable compilado debe estar f\u00e1cilmente disponible<ul> <li>El resultado de la compilaci\u00f3n debe ser un artefacto ejecutable   disponible para desplegar en distintos entornos, incluso en   producci\u00f3n.</li> </ul> </li> </ul>"},{"location":"cicd/#configuracion-del-despliegue","title":"Configuraci\u00f3n del despliegue","text":"<p>Para hacer integraci\u00f3n continua es necesario tener m\u00faltiples entornos. En el entorno de trabajo del desarrollador se pueden lanzar los tests m\u00e1s r\u00e1pidos y utilizar una configuraci\u00f3n en la que usemos una base de datos en memoria (como H2) que acelere la velocidad de los tests que utilicen base de datos.</p> <p>Se puede configurar un primer entorno de integraci\u00f3n continua para que se ejecuten en \u00e9l tests m\u00e1s lentos y con una configuraci\u00f3n m\u00e1s parecida a la del entorno de producci\u00f3n. Por ejemplo, se puede utilizar una configuraci\u00f3n en la que se utilice una base de datos similar a la que se usa en producci\u00f3n, poblada con datos de prueba. En este entorno se deben lanzar los tests r\u00e1pidos y tambi\u00e9n tests m\u00e1s lentos de integraci\u00f3n.</p> <p>Y despu\u00e9s tendremos otros entornos cada vez m\u00e1s similares al entorno de producci\u00f3n en los que tambi\u00e9n se realizar\u00e1n todos los tests autom\u00e1ticos y otros tests manuales necesarios para tener la confirmaci\u00f3n de que todo est\u00e1 funcionando correctamente.</p> <p>En todos estos entornos deberemos instalar la misma aplicaci\u00f3n compilada, y tendremos que modificar en cada caso su configuraci\u00f3n. Es importante tener la capacidad de automatizar tanto la gesti\u00f3n de entornos de despliegue (arrancar las bases de datos correctas, configurar puertos, etc.) como la instalaci\u00f3n y ejecuci\u00f3n de la aplicaci\u00f3n en el entorno.</p> <p>Antiguamente los distintos entornos eran m\u00e1quinas f\u00edsicas distintas, con configuraciones distintas previamente instaladas en cada una de ellas. Hoy en d\u00eda es mucho m\u00e1s com\u00fan utilizar entornos virtuales f\u00e1cilmente construibles a partir de scripts y c\u00f3digo usando herramientas de virtualizaci\u00f3n como Docker, Kubernetes, etc. Tambi\u00e9n es habitual la utilizaci\u00f3n de entornos en la nube (Heroku, GitHub Actions, Amazon Web Services, etc.) tanto para prueba como para producci\u00f3n.</p>"},{"location":"cicd/#entornos-de-despliegue","title":"Entornos de despliegue","text":"<p>Podemos diferenciar diferentes tipos de entornos (configuraci\u00f3n de servicios y servidores) en los que se despliega y prueba el build de la aplicaci\u00f3n. En general, ordenados de menor a mayor parecido a producci\u00f3n, podemos diferenciar.</p> <ul> <li>Local: ordenador del desarrollador. Se ejecutan tests unitarios de la caracter\u00edstica que se est\u00e1 desarrollando. </li> <li>Desarrollo/Trunk/Master: ordenador de integraci\u00f3n continua conectado a la rama de desarrollo en el que se ejecutan todos los tests unitarios continuamente. </li> <li>Integraci\u00f3n: Entorno en el que se sustituyen los mocks y bases de datos de memoria por servicios reales, aunque con copias parciales de los datos de producci\u00f3n.</li> <li>Test/QA: Entornos en los que se realizan pruebas funcionales, de interfaz de usuario, de performance o de seguridad, entre otros. Pueden ser manuales y/o automatizados.</li> <li>Stage/Preproducci\u00f3n: Entorno id\u00e9ntico al de producci\u00f3n en el que se hace la \u00faltima validaci\u00f3n de la nueva versi\u00f3n a desplegar a producci\u00f3n. Copia de la base de datos de producci\u00f3n y con servidores similares a los de producci\u00f3n, para poder comprobar rendimiento.</li> <li>Producci\u00f3n: Entorno que usan los clientes reales de la aplicaci\u00f3n.</li> </ul>"},{"location":"cicd/#configuracion-de-la-aplicacion","title":"Configuraci\u00f3n de la aplicaci\u00f3n","text":"<p>La aplicaci\u00f3n debe poder funcionar en distintos entornos sin tener que ser recompilada. Para ello es necesario poder configurar su funcionamiento definiendo par\u00e1metros que podamos modificar previamente a su ejecuci\u00f3n sin tener que recompilarla.</p> <p>Existen multitud de elementos que podemos necesitar configurar dependiendo del entorno en que queremos que funcione la aplicaci\u00f3n. Por ejemplo:</p> <ul> <li>URL de conexi\u00f3n a la base de datos</li> <li>Usuario y contrase\u00f1a de conexi\u00f3n a la base de datos</li> <li>Puerto en el que la aplicaci\u00f3n va a recibir las peticiones</li> <li>Direcciones de los servicios a los que debe conectarse (por ejemplo,   servicio SMTP de correo electr\u00f3nico)</li> </ul> <p>En cada entorno en los que va a funcionar la aplicaci\u00f3n estos par\u00e1metros van a tener unos valores distintos que hay que pasarle a la aplicaci\u00f3n cuando se ponga en funcionamiento. </p> <p>Existen diversas formas de definir estas propiedades. Las m\u00e1s usuales son:</p> <ul> <li>Mediante ficheros de configuraci\u00f3n de la aplicaci\u00f3n.</li> <li>Mediante variables de entorno cuyos valores establecemos con scripts   antes de lanzar la aplicaci\u00f3n.</li> <li>Mediante argumentos del comando que lanza la aplicaci\u00f3n</li> </ul> <p>Estas distintas configuraciones deben estar tambi\u00e9n guardadas en el control de versiones, igual que el c\u00f3digo de la aplicaci\u00f3n, para poder tambi\u00e9n controlar su evoluci\u00f3n y sus cambios.</p>"},{"location":"cicd/#configuracion-de-imagenes-docker","title":"Configuraci\u00f3n de im\u00e1genes Docker","text":"<p>Docker tambi\u00e9n tiene muchas estrategias que permiten configurar la ejecuci\u00f3n de una imagen. Una de las m\u00e1s utilizadas es hacer que la imagen utilice variables de entorno que pueden ser modificadas en al lanzar el contenedor. Para ello debemos definir en la imagen estas variables con el comando <code>ENV</code>, pudiendo dar valores por defecto.</p> <p>Por ejemplo, podemos definir el siguiente <code>Dockerfile</code>:</p> <pre><code>FROM alpine\nENV saludo=\"Hola, mundo!\"\nCMD echo $saludo\n</code></pre> <p>Creamos la imagen:</p> <pre><code>$ docker build -t saludo .\n</code></pre> <p>Si lanzamos la imagen muestra el saludo por defecto:</p> <pre><code>$ docker run saludo\nHola, mundo!\n</code></pre> <p>Y podemos configurar el saludo de varias formas. Por ejemplo, indicando el valor del par\u00e1metro al hacer <code>run</code>:</p> <pre><code>$ docker run -e \"saludo=\u00bfQu\u00e9 tal est\u00e1s?\" saludo\n\u00bfQu\u00e9 tal est\u00e1s?\n</code></pre> <p>O guardando el valor del par\u00e1metro en un fichero de propiedades que pasamos al ejecutar la imagen. Por ejemplo, en el fichero <code>propiedades.txt</code> escribimos lo siguiente:</p> <pre><code>saludo=\u00bfQu\u00e9 passsa, colega?\n</code></pre> <p>Y ejecutamos la imagen de la siguiente forma:</p> <pre><code>$ docker run --env-file=propiedades.txt saludo\n\u00bfQu\u00e9 passsa, colega?\n</code></pre>"},{"location":"cicd/#entrega-continua","title":"Entrega continua","text":"<p>El concepto de Entrega continua (Continuous Delivery) es una extensi\u00f3n de la Integraci\u00f3n continua que se populariz\u00f3 a ra\u00edz del libro que publicaron en 2010 Jez Humble y David Farley (ver las referencias).</p> <p></p> <p>Es un concepto que parte de la integraci\u00f3n continua para llegar a una automatizaci\u00f3n completa de la puesta en producci\u00f3n. El objetivo es conseguir una puesta en producci\u00f3n (release) del software:</p> <ul> <li>Poco arriesgada</li> <li>Frecuente</li> <li>Barata</li> <li>R\u00e1pida</li> <li>Predecible</li> <li>Reproducible</li> </ul> <p>En palabras de Jez Humble, la entrega continua consiste en:</p> <p>\u201cReduce the cost, time, and risk of delivering incremental changes to users\u201d</p> <p>Jez Humble (2013), Charla Adopting Continuous Delivery</p> <p>Otra frase muy importante, que ya hemos comentado alguna vez:</p> <p>\u201cHow long would it take your organization to deploy a change that involved just one single line of code? Do you do this on a repeatable, reliable basis?\u201d </p> <p>Mary Poppendieck</p> <p>Algunas t\u00e9cnicas que se utilizan en la Entrega continua (muchas de ellas ya las hemos visto):</p> <ul> <li>Peque\u00f1os cambios que se despliegan continuamente</li> <li>Todos los builds son candidatos al release </li> <li>Todo en el control de versiones (se debe poder probar cualquier release)</li> <li>Pipelines de despliegue (deployment pipelines) </li> <li>Integraci\u00f3n continua: automatizaci\u00f3n de builds, tests, despliegues, entornos</li> </ul>"},{"location":"cicd/#pipeline-de-despliegue","title":"Pipeline de despliegue","text":"<p>Tal y como hemos comentado cuando habl\u00e1bamos de integraci\u00f3n continua, un elemento central es de la automatizaci\u00f3n es el pipeline de despliegue. un pipeline de despliegue es una implementaci\u00f3n automatizada del proceso de construcci\u00f3n, despliegue, prueba y lanzamiento de nuestro sistema.</p> <p>La utilizaci\u00f3n de un pipeline de despliegue garantiza la visibilidad de todo el proceso, lo que garantiza un feedback temprano y un control continuo del mismo.</p> <p>Explicaci\u00f3n del libro de Jeff Humble:</p> <p>Cada cambio que se realiza sobre la configuraci\u00f3n de la aplicaci\u00f3n, su c\u00f3digo fuente o sus datos, lanza la creaci\u00f3n de una nueva instancia de el pipeline. Uno de los primeros pasos en el pipeline es crear los binarios y los instaladores. El resto de el pipeline ejecuta una serie de tests sobre los binarios para probar que pueden ser lanzados. Cada test que pasa el candidato a release nos da m\u00e1s confianza de que funcionar\u00e1 correctamente esta combinaci\u00f3n particular de c\u00f3digo binario, informaci\u00f3n de configuraci\u00f3n, entorno y datos. Si el candidato a release pasa todos los tests, puede ser lanzado.</p> <p>En el libro de Humble y Farley se muestra el siguiente esquema que representa sus distintos elementos.</p> <p></p> <ul> <li>En la parte superior se muestra el sistema de control de versiones,   en donde se almacena el c\u00f3digo del proyecto y los datos de las   distintas configuraciones de los entornos y de la aplicaci\u00f3n. Las   configuraciones de los entornos y de la aplicaci\u00f3n se deben guardar   en el sistema de control de versiones para gestionar su evoluci\u00f3n y   modificaci\u00f3n de la misma forma que gestionamos la evoluci\u00f3n del   c\u00f3digo.</li> <li>En la parte inferior se muestra el repositorio de artefactos en   donde se almacenan los binarios de la aplicaci\u00f3n. Puede ser, por   ejemplo, Docker Hub en el caso de ser una aplicaci\u00f3n dockerizada.</li> <li>En la fase de commit el c\u00f3digo se compila y se lanzan los tests   unitarios. Se generan los binarios que se almacenan en el   repositorio de artefactos.</li> <li>En la fase de aceptaci\u00f3n se configuran y despliegan los binarios en   un entorno similar al de producci\u00f3n. Se realizan test de   aceptaci\u00f3n/integraci\u00f3n y se valida la aplicaci\u00f3n y se deja lista para ser   publicada a producci\u00f3n por parte de Operaciones.</li> <li>En la fase de UAT (User Acceptance Testing) se realizan pruebas   manuales en un entorno lo m\u00e1s parecido posible al de producci\u00f3n.</li> <li>En la fase capacidad se realizan tests de rendimiento.</li> <li>El binario se despliega en producci\u00f3n si todas las fases anteriores   se pasan con \u00e9xito.</li> </ul> <p>En la siguiente figura se muestra un ejemplo de posible secuencia de despliegue:</p> <p></p> <p>Son muy \u00fatiles los tableros de control de el pipeline de despliegue, como por ejemplo el que proporciona Jenkins.</p> <p></p>"},{"location":"cicd/#pequenos-cambios","title":"Peque\u00f1os cambios","text":"<p>Tal y como hemos comentado en la introducci\u00f3n del tema, una pr\u00e1ctica fundamental de los equipos que utilizan las t\u00e9cnicas de entrega continua es subir a producci\u00f3n continuamente peque\u00f1os cambios con los que se van introduciendo poco a poco las nuevas funcionalidades.</p> <p></p> <p>Por ejemplo, en la charla de Juan Ignacio S\u00e1nchez Continuous Integration at CartoDB (v\u00eddeo) se explica c\u00f3mo es el proceso de integraci\u00f3n continua en Carto, una importante empresa espa\u00f1ola de gesti\u00f3n de datos geogr\u00e1ficos.</p> <p>Algunas de las m\u00e9tricas que muestra en la charla reflejan claramente cu\u00e1l es el funcionamiento de la integraci\u00f3n continua en la empresa. Su producto opensource m\u00e1s importante es CartoDB (enlace a su repositorio GitHub). En la \u00e9poca de la charla el producto integraba una media de 22 pull requests semanales y 15 despliegues en producci\u00f3n.</p> <p>Si todos los cambios son peque\u00f1os, \u00bfc\u00f3mo se introducen los cambios grandes en el proyecto?. Por ejemplo, nuevas caracter\u00edsticas complejas en las que se necesitan combinar distintas funcionalidades elementales.</p> <p>Es posible ir desarrollando, probando y colocando las piezas en el c\u00f3digo (sin mostrar en la interfaz de usuario) para que el sistema evolucione hacia un momento futuro en sea f\u00e1cil introducir una caracter\u00edstica totalmente nueva mediante un peque\u00f1o cambio. Como dice Kent Beck:</p> <p>Make the change easy, then make the easy change.</p> <p>Para ello podemos usar las siguientes estrategias:</p> <ul> <li>Codificaci\u00f3n y prueba de las peque\u00f1as funcionalidades por separado.</li> <li>Buen dise\u00f1o de c\u00f3digo, por ejemplo seleccionar una implementaci\u00f3n   concreta utilizando interfaces y factor\u00edas, pero dejar la estructura   lista para introducir futuros cambios.</li> <li>Peque\u00f1os cambios en las APIs compatibles con los tests de   regresi\u00f3n.</li> <li>Uso de mocks.</li> <li>Interruptores de caracter\u00edsticas.</li> </ul> <p></p> <p>Esta \u00faltima t\u00e9cnica es muy interesante. Consiste en definir interruptores o flags booleanos en el c\u00f3digo que hagan que ciertas caracter\u00edsticas se muestren o no en la aplicaci\u00f3n dependiendo de si los flags est\u00e1n o no activos.</p> <p>En este art\u00edculo se puede encontrar una explicaci\u00f3n en profundidad de m\u00faltiples t\u00e9cnicas usadas para implementar los interruptores de caracter\u00edsticas. Dependiendo de la t\u00e9cnica es posible hasta definir interruptores que se puedan modificar en tiempo de ejecuci\u00f3n e incluso que se puedan mostrar o no la funcionalidad a seg\u00fan qu\u00e9 usuarios implementando un sistema de canary release. </p>"},{"location":"cicd/#canary-release","title":"Canary release","text":"<p>La idea del canary release consiste en configurar un sistema de despliegue que permita mantener simult\u00e1neamente en producci\u00f3n dos versiones de la aplicaci\u00f3n. En el caso de una aplicaci\u00f3n web, podr\u00edamos configurar un proxy o router intermedio que se encargue de encauzar las peticiones de los usuarios a una versi\u00f3n de la aplicaci\u00f3n o a otra.</p> <p>Cuando se lanza una caracter\u00edstica nueva se puede configurar el proxy para que s\u00f3lo sea probada por una peque\u00f1a cantidad de usuarios y detectar posibles errores en este despliegue reducido. Cuando se haya comprobado con este peque\u00f1o grupo que todo funciona correctamente se modifica la configuraci\u00f3n del proxy para que todos accedan a la nueva versi\u00f3n.</p> <p>La configuraci\u00f3n del proxy puede llegar a ser bastante compleja, haciendo el filtro de usuarios en funci\u00f3n de par\u00e1metros que nos interesen (localizaci\u00f3n, tipo de usuario, etc.).</p> <p>Este sistema tambi\u00e9n puede utilizarse, junto con el de interruptores de caracter\u00edsticas, para realizar pruebas A/B de nuevas caracter\u00edsticas.</p>"},{"location":"cicd/#devops","title":"DevOps","text":"<p>Tradicionalmente el trabajo de los desarrolladores y el de los t\u00e9cnicos de operaciones (responsables de la puesta en producci\u00f3n del sistema, monitorizaci\u00f3n de servidores, etc. ) son contrapuestos.</p> <ul> <li>Developers:<ul> <li>Su trabajo es a\u00f1adir nuevas caracter\u00edsticas.</li> <li>Trabajan en entornos locales (\u201cen mim\u00e1quina funciona\u201d).</li> <li>Utilizan herramientas y lenguajes que permiten abstraer y automatizar.</li> </ul> </li> <li>Operations: <ul> <li>Su trabajo es mantener el sitio web seguro, estable y r\u00e1pido.</li> <li>Detectar problemas, apagar fuegos.</li> </ul> </li> </ul> <p>Los desarrolladores quieren introducir cambios r\u00e1pidamente en el sistema, mientras que a los t\u00e9cnicos de operaciones les gustar\u00eda mantener el sistema lo m\u00e1s estable posible.</p> <p>Los profesionales DevOps representan una nueva filosof\u00eda de trabajo, que combina elementos propios de los desarrolladores y de operaciones, incorporando todas las nuevas t\u00e9cnicas de las que hemos estado hablando en este tema y herramientas denominadas Infrastructure-as-code como Docker, Kubernetes, Ansible, Terraform,etc. en las que podemos definir la configuraci\u00f3n de entornos y servidores usando c\u00f3digo y ficheros almacenables en un sistema de control de versiones, en lugar de tener que configurar f\u00edsicamente el hardware.</p>"},{"location":"cicd/#principos-y-buenas-practicas","title":"Principos y buenas pr\u00e1cticas","text":"<p>En la charla mencionada anteriormente sobre pr\u00e1cticas de integraci\u00f3n continua en Carto, Juan Ignacio S\u00e1nchez lista 10 buenas pr\u00e1cticas que ellos est\u00e1n siguiendo. Muchas ya las hemos visto, pero es interesante repasarlas todas juntas, validadas por la experiencia de su \u00e9xito en una empresa puntera de desarrollo de software. Son las siguientes:</p> <ol> <li>Mantener un repositorio de c\u00f3digo</li> <li>Automatizar la compilaci\u00f3n</li> <li>Hacer la compilaci\u00f3n auto-testeable (mediante test autom\u00e1ticos)</li> <li>Todo el mundo realiza commits en la rama principal todos los d\u00edas</li> <li>Cada commit en la rama principal debe ser compilado</li> <li>Mantener la compilaci\u00f3n r\u00e1pida</li> <li>Testear en un clon del entorno de producci\u00f3n</li> <li>Hacer f\u00e1cil de obtener los \u00faltimos productos compilados</li> <li>Todo el mundo puede ver los resultados de las \u00faltimas compilaciones</li> <li>Automatizar el despliegue</li> </ol>"},{"location":"cicd/#consejos-adicionales","title":"Consejos adicionales","text":"<p>La integraci\u00f3n continua y el despliegue continuo son dos conceptos que pueden convertirse en aliados muy poderosos para nuestro equipo si ponemos los medios necesarios.</p> <p>Es obvio que nada de esto es posible sin una bater\u00eda de pruebas s\u00f3lidas, extensas y consistentes. Si no disponemos de pruebas unitarias de calidad y que cubran la totalidad de nuestro c\u00f3digo, lo m\u00e1s probable es que nuestro CI nos de muchos falsos positivos (fallos que no han sido detectados por las pruebas unitarias), que a su vez provocar\u00e1 que se desplieguen fallos en nuestros entornos de pre-producci\u00f3n y producci\u00f3n.</p> <p>Por ejemplo, si el proceso de integraci\u00f3n continua se ejecuta en nuestro servidor de Gitlab en vez de en el ordenador de cada desarrollador de nuestro equipo, estaremos facilitando la tarea de comprobaci\u00f3n automatizada de error. A\u00fan m\u00e1s importante, si dicho proceso se ejecuta en pocos minutos, estaremos creando un h\u00e1bito entre las personas del proyecto de enviar m\u00e1s a menudo sus cambios al repositorio, ya que hacerlo les permitir\u00e1 obtener una visi\u00f3n r\u00e1pida sobre la calidad de su trabajo. Esto a su vez har\u00e1 que la frecuencia de los cambios que se env\u00edan al repositorio sea m\u00e1s alta, mientras que el tama\u00f1o de cada cambio enviado sea m\u00e1s peque\u00f1o. Las tareas de revisi\u00f3n se har\u00e1n m\u00e1s amenas y f\u00e1ciles, y por lo tanto, mejora la velocidad con la que se integran dichos cambios en \u00abdevelop\u00bb. Nuestro equipo de control de calidad podr\u00e1 tener un flujo continuo de trabajo, lo cual reducir\u00e1 los tiempos \u00abmuertos\u00bb (personas \u00abbloqueadas\u00bb a la espera de que otras personas terminen su trabajo).</p> <p>Por \u00faltimo, cabe decir que no es obligatorio que el despliegue continuo tenga lugar en cuanto un cambio se mezcle en las ramas de \u00abdevelop\u00bb o \u00abmaster\u00bb. Existen muchos casos en los que el l\u00edder del equipo (o una persona con rol similar) deber\u00e1 tomar la decisi\u00f3n de dar luz verde al proceso de despliegue en base a m\u00e1s factores. Es decir, el proceso en s\u00ed puede estar automatizado (es lo mas recomendable), pero la acci\u00f3n que desencadena el despliegue puede ser humana.</p>"},{"location":"cicd/#referencias","title":"Referencias","text":"<ul> <li>Charla de Eduardo Ferro (2020): Continuous Delivery: Germinando una   cultura \u00e1gil moderna. </li> <li>Martin Fowler (2006): Continuous Integration</li> <li>Jez Humble y David Farley (2010): Continuous Delivery</li> <li>Integraci\u00f3n continua y despliegue continuo</li> </ul>"},{"location":"commands/","title":"Comandos de git","text":"<p>Esta secci\u00f3n describe algunos de los comandos m\u00e1s interesantes de git</p>"},{"location":"commands/#git-stash-reserva","title":"Git stash (reserva)","text":"<p>La orden <code>git stash</code> nos permite salvar moment\u00e1neamente el espacio de trabajo cuando tenemos que cambiar de rama o preparar la rama actual para sincronizar cambios.</p> <p>Las operaciones m\u00e1s importantes que podemos hacer con <code>git stash</code> son:</p>"},{"location":"commands/#git-stash-save","title":"git stash save","text":"<p>Es equivalente a poner solo <code>git stash</code> pero nos permite realizar m\u00e1s acciones como:</p> <pre><code>git stash save \"Tu mensaje\"\ngit stash save -u\n</code></pre> <p>El par\u00e1metro <code>-u</code> permite que se almacen tambi\u00e9n los ficheros sin seguimiento previo (untracked en ingl\u00e9s, aquellos ficheros que no se han metido nunca en el repositorio).</p>"},{"location":"commands/#git-stash-list","title":"git stash list","text":"<p>Permite mostrar la pila del stash.</p> <pre><code>$ git stash list\nstash@{0}: On master: Stash con mensaje\nstash@{1}: WIP on master: 4ab21df First commit\n</code></pre>"},{"location":"commands/#git-stash-apply","title":"git stash apply","text":"<p>Esta orden coge el stash que est\u00e1 arriba en la pila y lo aplica al espacio de trabajo actual. En este caso siempre es <code>stash@{0}</code>. El stash permanece en la pila.</p> <p>Se puede indicar como par\u00e1metro un stash en concreto.</p>"},{"location":"commands/#git-stash-pop","title":"git stash pop","text":"<p>Funciona igual que <code>git apply</code> con la diferencia de que el stash s\u00ed se borra de la pila.</p>"},{"location":"commands/#git-stash-show","title":"git stash show","text":"<p>Muestra un resumen de los ficheros que se han modificado en ese stash.</p> <pre><code>$ git stash show\nA.txt | 1 +\nB.txt | 3 +++\n2 file changed, 4 insertions(+)\n</code></pre> <p>Para ver los cambios podemos usar el par\u00e1metro <code>-p</code></p> <pre><code>$ git stash show -p\n--- a/A.txt\n+++ b/A.txt\n@@ -45,6 +45,7 @@ nav:\n+ This is a change\n</code></pre> <p>Por defecto siempre muestra la cabeza de la pila. Igual que en casos anteriores podemos indicar un stash en concreto.</p> <pre><code>$ git stash show stash@{1}\n</code></pre>"},{"location":"commands/#git-stash-branch","title":"git stash branch","text":"<p>Permite crear una nueva rama a partir del \u00faltimo stash. Adem\u00e1s, el mismo es borrado de la pila. Se puede especificar uno en concreto si lo queremos, como en el resto de comandos.</p> <pre><code>git stash branch nombre-de-nueva-rama stash@{1}\n</code></pre>"},{"location":"commands/#git-stash-clear","title":"git stash clear","text":"<p>Este comando borrar todos los stash de la pila. Es destructiva y no se puede deshacer.</p>"},{"location":"commands/#git-stash-drop","title":"git stash drop","text":"<p>Permite borrar un stash en concreto (o el \u00faltimo si no se indica ninguno). Como con clear, borrarlo implica que no se puede recuperar.</p>"},{"location":"commands/#git-worktree","title":"Git worktree","text":"<p>Uno de los problemas m\u00e1s habituales es tener que tocar una rama distinta a la que tenemos actualmente. Eso implica que si estamos en medio de un trabajo tendr\u00edamos que hacer un commit o un stash, lo cual a veces es bastante molesto.</p> <p>Con <code>git worktree</code> podemos crear un directorio de trabajo que contenga otra rama distinta, de forma temporal. No supone otro clon del repositorio porque ambos usan el mismo.</p>"},{"location":"commands/#git-worktree-add","title":"git worktree add","text":"<p>Esta funci\u00f3n es la que crea el espacio de trabajo temporal. Imaginemos que estamos en una rama llamada <code>develop</code>:</p> <pre><code>$ git worktree add ../project-master master\n$ git worktree add -b fix ../project-fix master\n</code></pre> <p>La primera orden crea un directorio llamado project-master que contiene el estado de master. La segunda, que contiene el par\u00e1metro <code>-b</code> equivale a crear una nueva rama llamada fix, que se crea desde master (suponemos que no existe fix).</p>"},{"location":"commands/#git-worktree-list","title":"git worktree list","text":"<p>Muestra el listado de directorios y espacios de trabajo.</p> <pre><code>$git worktree list\n/home/sergio/taller-de-git  3b63b4b [master]\n/home/sergio/fix           3b63b4b [fix]\n</code></pre>"},{"location":"commands/#git-worktree-remove","title":"git worktree remove","text":"<p>Borrar un espacio de trabajo. Hay que indicar el nombre entre corchetes que aparece en el listado</p> <pre><code>$ git worktree delete fix\n</code></pre>"},{"location":"commands/#git-worktree-prune","title":"git worktree prune","text":"<p>Una cuesti\u00f3n importante, es que las ramas que est\u00e9n desplegadas en otro espacio de trabajo, se encuentran bloqueadas y no se pueden desbloquear en otro distinto.</p> <p>Esto significa que si estamos trabajando en la rama developer, creamos otro worktree en otro directorio de la rama master, no podemos hacer pasar a master. No es posible tener la misma rama en varios espacios de trabajo.</p> <p>Si se ha borrado el directorio a mano (en vez de usando remove), eso no implica que el bloqueo desparezca. Con esta orden podemos hacer que git compruebe que los espacios de trabajo secundario se comprueben de nuevo para ver si siguen existiendo y se elimine el bloqueo.</p>"},{"location":"commands/#git-blame","title":"Git blame","text":"<p>Lo ideal en un equipo de desarrollo es que el c\u00f3digo pase por todas las manos para as\u00ed mejorar su calidad.</p> <p>Con git blame podemos saber qui\u00e9n fue el \u00faltimo en modificar una l\u00ednea concreta de c\u00f3digo, en qu\u00e9 commit y en qu\u00e9 fecha lo hizo.</p> <pre><code>$ git blame ejemplo.php\n33cdd02c (Sergio G\u00f3mez 2020-01-20 16:58:52 +0100  8)   name: \"material\"\n33cdd02c (Sergio G\u00f3mez 2020-01-20 16:58:52 +0100  9)   language: \"es\"\n</code></pre>"},{"location":"containers/","title":"Contenedores","text":"<p>Los contenedores son instancias de las im\u00e1genes que hemos creado o hemos descargado que se ejecutan de forma aislada.</p>"},{"location":"containers/#listado","title":"Listado","text":"<p>La orden para ver el listado de contenedores del sistema es <code>docker container ls</code> o la forma abreviada <code>docker ps</code>. Si lo ejecutamos nos dar\u00e1 un listado vac\u00edo porque no hay ning\u00fan contenedor activo.</p> <p>Probemos con el par\u00e1metro <code>--all</code> o <code>-a</code>.</p> <p><pre><code>$ docker container ls -a\nCONTAINER ID  IMAGE        COMMAND     CREATED         STATUS      PORTS  NAMES\n4bd76e08b07f  wordpress    \"docker-\u2026\"  11 minutes ago  Exited (0)         peaceful_murdock\n69a3c34c224d  hello-world  \"/hello\"    18 minutes ago  Exited (0)         blissful_goldwasser\n</code></pre> Estos contenedores est\u00e1n parados y se pueden volver a ejecutar, con el mismo estado que tuviera el sistema de archivos cuando se detuvieron.</p>"},{"location":"containers/#ejecutar-comandos-dentro-de-un-contenedor","title":"Ejecutar comandos dentro de un contenedor","text":"<p>Ya hemos usado <code>docker run</code> para crear e iniciar un contenedor. Tambi\u00e9n podemos usar este comando para ejecutar programas que est\u00e9n dentro del contenedor. Por ejemplo:</p> <pre><code>docker run --name ubuntu_bash --rm -i -t ubuntu bash\n</code></pre> <p>Info</p> <p>Las primeras versiones de Docker eran m\u00e1s limitadas, respecto a la creaci\u00f3n de objetos. As\u00ed que sali\u00f3 con comandos como <code>docker start</code>, <code>docker stop</code>, etc. relacionados con los contenedores. Cuando surgieron m\u00e1s objetos no hab\u00eda consistencia entre los comandos de otros objetos (como <code>docker volumes ls</code>) y los de los contenedores.</p> <p>As\u00ed que se ha creado una jerarqu\u00eda nueva de subcomandos bajo el comando <code>container</code> que son equivalentes y se mantienen por compatibilidad:</p> Antiguo Nuevo <code>docker run</code> <code>docker container run</code> <code>docker start</code> <code>docker container start</code> <code>docker stop</code> <code>docker container stop</code> <code>docker rm</code> <code>docker container rm</code> <code>docker inspect</code> <code>docker container inspect</code> <code>docker exec</code> <code>docker container exec</code> <p>No hay m\u00e1s diferencia entre ellos que el nombre.</p> <p>Pero esta forma de ejecutar cosas, crea un nuevo contenedor. Si queremos ejecutar un comando en un contenedor que ya est\u00e9 iniciado, debemos usar <code>docker container exec</code>.</p> <p>Ejecuta lo siguiente en otro terminal (no cierres el anterior).</p> <pre><code>docker exec -w /tmp ubuntu_bash touch my_file.sh\n</code></pre> <p>El par\u00e1metro <code>-w</code> indica el directorio de trabajo, despu\u00e9s indicamos el contenedor donde queremos ejecutar el comando (<code>ubuntu_bash</code>) y por \u00faltimo el comando a ejecutar (<code>touch my_file.sh</code>).</p> <p>Si en el primer terminal ejecutamos un listado del directorio tmp:</p> <p><pre><code># ls /tmp\nmy_file.sh\n</code></pre> Vemos como podemos modificar un contenedor ya iniciado con <code>docker container exec</code>.</p> <p>Pulsa <code>Control+C</code> en el primer terminal para cerrar y borrar el contenedor.</p>"},{"location":"containers/#iniciar-un-contenedor","title":"Iniciar un contenedor","text":"<p>Con <code>docker container start</code> podemos iniciar un contenedor parado:</p> <p><pre><code>$ docker container start peaceful_murdock peaceful_murdock\n$ docker ps\nCONTAINER ID  IMAGE      COMMAND    CREATED         STATUS  PORTS                 NAMES\n4bd76e08b07f  wordpress  \"docker\u2026\"  14 minutes ago  Up      0.0.0.0:8080-&gt;80/tcp  peaceful_murdock\n</code></pre> Veremos que la web de instalaci\u00f3n de WordPress est\u00e1 de nuevo disponible. Solo que ahora el contenedor se ejecuta en segundo plano y no lo podemos detener como antes.</p>"},{"location":"containers/#detener-un-contenedor","title":"Detener un contenedor","text":"<p>Con <code>docker container stop</code> podemos detener un contenedor iniciado, indicando su id o su nombre</p> <pre><code>$ docker container stop 4bd76e08b07f\n4bd76e08b07f\n</code></pre> <p>Tip</p> <p>Podemos hacer referencia a los contenedores por su ID o por su nombre.</p>"},{"location":"containers/#borrar-un-contenedor","title":"Borrar un contenedor","text":"<p>Un contenedor detenido ocupa espacio. Si hemos dejado de necesitar un contenedor podemos borrarlo con <code>docker container rm</code>. Igualmente hay que indicar id o nombre.</p> <pre><code>$ docker container rm 4bd76e08b07f\n4bd76e08b07f\n</code></pre> <p>Danger</p> <p>Hay que tener cuidado al borrar contenedores. Cuando un contenedor se borra se elimina cualquier informaci\u00f3n que contenga y no est\u00e9 almacenada en alg\u00fan lugar externo al propio contenedor.</p>"},{"location":"cvs/","title":"Sistemas de control de versiones","text":""},{"location":"cvs/#definicion-clasificacion-y-funcionamiento","title":"Definici\u00f3n, clasificaci\u00f3n y funcionamiento","text":"<p>Se llama control de versiones a la gesti\u00f3n de los diversos cambios que se realizan sobre los elementos de alg\u00fan producto o una configuraci\u00f3n del mismo. Una versi\u00f3n, revisi\u00f3n o edici\u00f3n de un producto, es el estado en el que se encuentra dicho producto en un momento dado de su desarrollo o modificaci\u00f3n. Aunque un sistema de control de versiones puede realizarse de forma manual, es muy aconsejable disponer de herramientas que faciliten esta gesti\u00f3n dando lugar a los llamados sistemas de control de versiones o SVC (del ingl\u00e9s System Version Control).</p> <p>Estos sistemas facilitan la administraci\u00f3n de las distintas versiones de cada producto desarrollado, as\u00ed como las posibles especializaciones realizadas (por ejemplo, para alg\u00fan cliente espec\u00edfico). Ejemplos de este tipo de herramientas son entre otros: CVS, Subversion, SourceSafe, ClearCase, Darcs, Bazaar , Plastic SCM, Git, Mercurial, Perforce.</p>"},{"location":"cvs/#terminologia","title":"Terminolog\u00eda","text":"<p>Repositorio (\"repository\") : El repositorio es el lugar en el que se almacenan los datos actualizados e hist\u00f3ricos de cambios.</p> <p>Revisi\u00f3n (\"revision\") : Una revisi\u00f3n es una versi\u00f3n determinada de la informaci\u00f3n que se gestiona. Hay sistemas que identifican las revisiones con un contador (Ej. subversion). Hay otros sistemas que identifican las revisiones mediante un c\u00f3digo de detecci\u00f3n de modificaciones (Ej. git usa SHA1).</p> <p>Etiqueta (\"tag\") : Los tags permiten identificar de forma f\u00e1cil revisiones importantes en el proyecto. Por ejemplo se suelen usar tags para identificar el contenido de las versiones publicadas del proyecto.</p> <p>Rama (\"branch\") : Un conjunto de archivos puede ser ramificado o bifurcado en un punto en el tiempo de manera que, a partir de ese momento, dos copias de esos archivos se pueden desarrollar a velocidades diferentes o en formas diferentes de forma independiente el uno del otro.</p> <p>Cambio (\"change\") : Un cambio (o diff, o delta) representa una modificaci\u00f3n espec\u00edfica de un documento bajo el control de versiones. La granularidad de la modificaci\u00f3n que es considerada como un cambio var\u00eda entre los sistemas de control de versiones.</p> <p>Desplegar (\"checkout\") : Es crear una copia de trabajo local desde el repositorio. Un usuario puede especificar una revisi\u00f3n en concreto u obtener la \u00faltima. El t\u00e9rmino 'checkout' tambi\u00e9n se puede utilizar como un sustantivo para describir la copia de trabajo.</p> <p>Confirmar (\"commit\") : Confirmar es escribir o mezclar los cambios realizados en la copia de trabajo del repositorio. Los t\u00e9rminos 'commit' y 'checkin' tambi\u00e9n se pueden utilizar como sustantivos para describir la nueva revisi\u00f3n que se crea como resultado de confirmar.</p> <p>Conflicto (\"conflict\") : Un conflicto se produce cuando diferentes partes realizan cambios en el mismo documento, y el sistema es incapaz de conciliar los cambios. Un usuario debe resolver el conflicto mediante la integraci\u00f3n de los cambios, o mediante la selecci\u00f3n de un cambio en favor del otro.</p> <p>Cabeza (\"head\") : Tambi\u00e9n a veces se llama tip (punta) y se refiere a la \u00faltima confirmaci\u00f3n, ya sea en el tronco ('trunk') o en una rama ('branch'). El tronco y cada rama tienen su propia cabeza, aunque HEAD se utiliza a veces libremente para referirse al tronco.</p> <p>Tronco (\"trunk\") : La \u00fanica l\u00ednea de desarrollo que no es una rama (a veces tambi\u00e9n llamada l\u00ednea base, l\u00ednea principal o m\u00e1ster).</p> <p>Fusionar, integrar, mezclar (\"merge\") : Una fusi\u00f3n o integraci\u00f3n es una operaci\u00f3n en la que se aplican dos tipos de cambios en un archivo o conjunto de archivos. Algunos escenarios de ejemplo son los siguientes:</p> <ul> <li>Un usuario, trabajando en un conjunto de archivos, actualiza o sincroniza su copia de trabajo con los cambios realizados y confirmados, por otros usuarios, en el repositorio.</li> <li>Un usuario intenta confirmar archivos que han sido actualizado por otros usuarios desde el \u00faltimo despliegue ('checkout'), y el software de control de versiones integra autom\u00e1ticamente los archivos (por lo general, despu\u00e9s de preguntarle al usuario si se debe proceder con la integraci\u00f3n autom\u00e1tica, y en algunos casos s\u00f3lo se hace si la fusi\u00f3n puede ser clara y razonablemente resuelta).</li> <li>Un conjunto de archivos se bifurca, un problema que exist\u00eda antes de la ramificaci\u00f3n se trabaja en una nueva rama, y la soluci\u00f3n se combina luego en la otra rama.</li> <li>Se crea una rama, el c\u00f3digo de los archivos es independiente editado, y la rama actualizada se incorpora m\u00e1s tarde en un \u00fanico tronco unificado.</li> </ul>"},{"location":"cvs/#clasificacion","title":"Clasificaci\u00f3n","text":"<p>Podemos clasificar los sistemas de control de versiones atendiendo a la arquitectura utilizada para el almacenamiento del c\u00f3digo: locales, centralizados y distribuidos.</p>"},{"location":"cvs/#locales","title":"Locales","text":"<p>Los cambios son guardados localmente y no se comparten con nadie. Esta arquitectura es la antecesora de las dos siguientes.</p> <p></p>"},{"location":"cvs/#centralizados","title":"Centralizados","text":"<p>Existe un repositorio centralizado de todo el c\u00f3digo, del cual es responsable un \u00fanico usuario (o conjunto de ellos). Se facilitan las tareas administrativas a cambio de reducir flexibilidad, pues todas las decisiones fuertes (como crear una nueva rama) necesitan la aprobaci\u00f3n del responsable. Algunos ejemplos son CVS y Subversion.</p> <p></p>"},{"location":"cvs/#distribuidos","title":"Distribuidos","text":"<p>Cada usuario tiene su propio repositorio. Los distintos repositorios pueden intercambiar y mezclar revisiones entre ellos. Es frecuente el uso de un repositorio, que est\u00e1 normalmente disponible, que sirve de punto de sincronizaci\u00f3n de los distintos repositorios locales. Ejemplos: Git y Mercurial.</p> <p></p>"},{"location":"cvs/#ventajas-de-sistemas-distribuidos","title":"Ventajas de sistemas distribuidos","text":"<ul> <li>No es necesario estar conectado para guardar cambios.</li> <li>Posibilidad de continuar trabajando si el repositorio remoto no est\u00e1 accesible.</li> <li>El repositorio central est\u00e1 m\u00e1s libre de ramas de pruebas.</li> <li>Se necesitan menos recursos para el repositorio remoto.</li> <li>M\u00e1s flexibles al permitir gestionar cada repositorio personal como se quiera.</li> </ul>"},{"location":"data/","title":"Persistiendo datos","text":"<p>Por defecto ya hemos indicado que un contenedor est\u00e1 aislado de todo. Hemos visto como podemos conectar el contenedor a un puerto de red para poder acceder a \u00e9l. Eso incluye al sistema de archivos que contiene. De tal manera que si se elimina el contenedor, se eliminan tambi\u00e9n sus archivos.</p> <p>Si queremos almacenar datos (una web, una base de datos, etc.) dentro de un contenedor necesitamos una manera de almacenarlos sin perderlos.</p> <p>Docker ofrece tres maneras:</p> <ul> <li>A trav\u00e9s de vol\u00famenes, que son objetos de Docker como las im\u00e1genes y los contenedores.</li> <li>Montando un directorio de la m\u00e1quina anfitri\u00f3n dentro del contenedor.</li> <li>Almacen\u00e1ndolo en la memoria del sistema (aunque tambi\u00e9n se perder\u00edan al reiniciar el servidor).</li> </ul> <p>Lo normal es usar vol\u00famenes, pero habr\u00e1 ocasiones en que es preferible montar directamente un directorio de nuestro espacio de trabajo. Por ejemplo, para guardar los datos de una base de datos usaremos vol\u00famenes, pero para guardar el c\u00f3digo de una aplicaci\u00f3n o de una p\u00e1gina web montaremos el directorio.</p> <p>La raz\u00f3n para esto \u00faltimo es que tanto nuestro entorno de desarrollo como el contenedor tengan acceso a los archivos del c\u00f3digo fuente. Los vol\u00famenes, al contrario que los directorios montados, no deben accederse desde la m\u00e1quina anfitri\u00f3n.</p>"},{"location":"data/#crear-un-volumen","title":"Crear un volumen","text":"<p>Como necesitamos crear una base de datos para nuestro blog con WordPress vamos a crear un volumen donde guardar la informaci\u00f3n:</p> <pre><code>$ docker volume create wordpress-db\nwordpress-db\n</code></pre>"},{"location":"data/#listar-volumenes","title":"Listar vol\u00famenes","text":"<p>Con <code>docker volume ls</code> podemos visualizar todos los volumenes disponibles.</p> <pre><code>$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               wordpress-db\n</code></pre>"},{"location":"data/#visualizar-volumenes","title":"Visualizar vol\u00famenes","text":"<p>Los volumenes se crean en un directorio del sistema y no es recomendable acceder a \u00e9l, no al menos mientras haya un contenedor us\u00e1ndolo. En cualquier caso, si queremos ver los metadatos de un volumen podemos usar <code>docker volume inspect</code></p> <pre><code>$ docker volume inspect wordpress-db [\n    {\n        \"CreatedAt\": \"yyyy-mm-ddThh:ii:ss+Z\",\n        \"Driver\": \"local\",\n        \"Labels\": {},\n        \"Mountpoint\": \"/var/lib/docker/volumes/wordpress-db/_data\",\n        \"Name\": \"wordpress-db\",\n        \"Options\": {},\n        \"Scope\": \"local\"\n    }\n]\n</code></pre>"},{"location":"data/#borrar-volumenes","title":"Borrar volumenes","text":"<p>Como todos los objetos de Docker, los vol\u00famenes tambi\u00e9n pueden ser borrados, pero solo si no est\u00e1n en uso. Mucha precauci\u00f3n al borrar los vol\u00famenes, porque perder\u00edamos todos los datos que contenga.</p> <p>Para borrar un contenedor usaremos <code>docker volume rm</code> y el nombre del contenedor.</p>"},{"location":"debian/","title":"Instalaci\u00f3n y configuraci\u00f3n de nuestra m\u00e1quina virtual","text":""},{"location":"debian/#instalacion-de-debian","title":"Instalaci\u00f3n de Debian","text":"<p>Como servidor, utilizaremos la distribuci\u00f3n Linux Debian. Tal y como podemos leer en la propia p\u00e1gina de Debian:</p> <p>Quote</p> <p>Un CD de \"instalaci\u00f3n por red\" o \"netinst\" es un \u00fanico CD que posibilita que instale el sistema completo. Este \u00fanico CD contiene s\u00f3lo la m\u00ednima cantidad de software para instalar el sistema base y obtener el resto de paquetes a trav\u00e9s de Internet.</p> <p>As\u00ed pues, procedamos a descargar la imagen de Debian netinstall aqu\u00ed</p> <p>Info</p> <p>Queda muy lejos de la intenci\u00f3n de este m\u00f3dulo explicar como instalar m\u00e1quinas virtuales puesto que es algo que se supone aprendido del curso anterior y/u otros m\u00f3dulos. As\u00ed pues, se dar\u00e1n unas pautas generales para instalar la m\u00e1quina correctamente.</p> <p>La instalaci\u00f3n de esta m\u00e1quina virtual deber\u00eda servir a lo largo del m\u00f3dulo utilizado cualquier hipervisor (VMWare, VirtualBox, KVM, HyperV...). No obstante, se utilizar\u00e1 Virtualbox para esta explicaci\u00f3n.</p> <p>En primer lugar, debemos crear una m\u00e1quina virtual nueva, indicando su ubicaci\u00f3n, su nombre y el tipo de sistema operativo:</p> <p></p> <p>Le indicamos que monte como unidad de CD la iso de netinstall de Debian que hemos descargado previamente:</p> <p></p> <p>Tambi\u00e9n estableceremos un \u00fanico interfaz de red. Para ello, en el \u00fanico adaptador de red que debe tener la m\u00e1quina virtual, debemos configurarlo como tipo puente, de forma que obtenga una IP en el rango de la red local en la que nos encontremos conectados (casa, instituto...).</p> <p></p> <p>Sin entorno gr\u00e1fico la m\u00e1quina puede que funcione perfectamente con 1GB de RAM, no obstante se aconseja, si es posible, asignarle 2GB de RAM y, como m\u00ednimo, 2 procesadores.</p> <p>Pod\u00e9is instalar Debian tanto de forma gr\u00e1fica como de forma cl\u00e1sica en terminal. La primera de ellas es la que os recomiendo:</p> <p></p> <p>Le d\u00e1is el nombre que quer\u00e1is a vuestra m\u00e1quina. Recomendable un nombre corto pues luego aparecer\u00e1 en el prompt del terminal (<code>usuario@nombredemaquina</code>)</p> <p></p> <p>Os pedir\u00e1 tambi\u00e9n contrase\u00f1a de superusuario (root), nombre de vuestro usuario y contrase\u00f1a para este nuevo usuario:</p> <p></p> <p>Tras ello, para simplificar nuestro proceso, le diremos que utilice todo el disco para la instalaci\u00f3n:</p> <p></p> <p>E iremos dejando todas las opciones que nos vayan apareciendo por defecto y continuando la instalaci\u00f3n.</p> <p>Tras un rato, que puede ser m\u00e1s o menos largo, nos mostrar\u00e1 la opci\u00f3n de instalar un entorno gr\u00e1fico. En principio no nos hace falta ninguno y esta es la opci\u00f3n recomendada por un tema de economizaci\u00f3n de los recursos. </p> <p></p> <p>Pero si por alguna raz\u00f3n quer\u00e9is instalar alguno, os recomiendo LXDE puesto que es el que menos recursos consume:</p> <p></p> <p>Tambi\u00e9n deb\u00e9is marcar las opciones que aparecen en la imagen, SSH Server y Utilidades est\u00e1ndar.</p> <p>Le indicamos que s\u00ed que instale el gestor de arranque GRUB y continuamos con todas las opciones por defecto:</p> <p></p> <p>Y le indicamos que lo instale en el \u00fanico disco que tenemos: <code>/dev/sda1</code> (pinchad en el nombre o no lo instalar\u00e1 ah\u00ed)</p> <p></p> <p>Completar\u00e1 el proceso y pedir\u00e1 reiniciar, cosa que har\u00e9is. Tras ello, si no ten\u00e9is entorno gr\u00e1fico aparecer\u00e1 un terminal pidiendo login. </p> <p>Si hubier\u00e1is instalado el entorno gr\u00e1fico, os aparecer\u00e1 algo as\u00ed:</p> <p></p> <p>En ambos casos, introduciendo el nombre de usuario y contrase\u00f1a podremos loguearnos en el sistema.</p>"},{"location":"debian/#dar-permisos-de-sudo-a-nuestro-usuario","title":"Dar permisos de sudo a nuestro usuario","text":"<p>Una vez instalada nuestra Debian, tendremos un usuario raso que es el que le dijimos que crease durante la instalaci\u00f3n.</p> <p>Puesto que a lo largo de este m\u00f3dulo realizaremos incontables tareas de administraci\u00f3n, resulta un tanto inc\u00f3modo, as\u00ed como peligroso, el tener que cambiar de nuestro usuario a root cada vez que haya que instalar, configurar o modificar algo que as\u00ed lo requiera.</p> <p>As\u00ed pues, le daremos permisos de <code>sudo</code> a nuestro usuario. Estos permisos nos permitir\u00e1n que cualquier comando que ejecutemos en el terminal precedido de la palabra <code>sudo</code> se ejecute como root. De la misma forma, cualquier comando que ejecutemos con nuestro usuario sin <code>sudo</code>, ser\u00e1 ejecutado con los permisos de nuestro usuario, por lo que nos protegemos de liarla con un comando que no toca como root.</p> <p>Dicho esto, hay varias formas de proceder, veamos la m\u00e1s t\u00edpica y conocida. Se trata de modificar el archivo del sistema encargado de recoger estos permisos: <code>/etc/sudoers</code>. </p> <p>En primer lugar debemos conectarnos por SSH a nuestra m\u00e1quina Debian:</p> <pre><code>ssh -l nombre_de_usuario IP_MV_Debian\n</code></pre> <p>Donde:</p> <ul> <li><code>nombre_de_usuario</code> es vuestro nombre de usuario (el que configurast\u00e9is durante la instalaci\u00f3n)</li> <li><code>IP_MV_Debian</code> es la IP de la m\u00e1quina Debian</li> </ul> <p>Info</p> <p>Existen varias formas de conocer la IP de vuestra Debian pero quiz\u00e1s la m\u00e1s sencilla sea desde la propia m\u00e1quina virtual, con el comando:</p> <pre><code>ip a\n</code></pre> <p></p> <p>Ah\u00ed veo que esa IP est\u00e1 dentro del rango de mi red local. Adem\u00e1s, puesto que la m\u00e1quina s\u00f3lo tiene una interfaz de red, no puede ser ninguna otra. Esa ser\u00e1 la IP a la que conectarse.</p> <p>Cambiando de nuestro usuario al usuario root:</p> <pre><code>su root\n</code></pre> <p>Ejecutamos la aplicaci\u00f3n <code>visudo</code> que se encarga directamente de modificar el archivo de sudoers:</p> <pre><code># /usr/sbin/visudo\n</code></pre> <p>Y dejamos el archivo as\u00ed, claro est\u00e1, con vuestro propio nombre de usuario:</p> <pre><code># User privilege specification\nroot            ALL=(ALL:ALL) ALL \nnombreusuario   ALL=(ALL:ALL) ALL\n</code></pre> <p>Pulsamos <code>CTRL+x</code> y guardamos los cambios.</p> <p>Tras esto, debemos desloguearnos de nuestra sesi\u00f3n SSH y volver a loguearnos. Ahora podremos validar que ya podemos realizar acciones que requieran permisos de superusuario o root. Esta validaci\u00f3n puede realizarse con el comando:</p> <pre><code>sudo -v\n</code></pre> <p>Que en caso de no tener permisos nos devolver\u00e1 el siguiente mensaje:</p> <pre><code>Sorry, user [username] may not run sudo on [hostname].\n</code></pre> <p>Y en caso de tenerlos, no devolver\u00e1 nada.</p> <p>Si a\u00fan as\u00ed no os quedase del todo claro, pod\u00e9is utilizar este comando:</p> <pre><code>timeout 2 sudo id &amp;&amp; echo Access granted || echo Access denied\n</code></pre> <p>Que, en caso de tener los permisos de sudo devuelve:</p> <pre><code>uid=0(root) gid=0(root) grupos=0(root)\nAccess granted\n</code></pre> <p>Y si no los tuviera, devuelve:</p> <pre><code>[username] is not in the sudoers file.  This incident will be reported.\nAccess denied\n</code></pre>"},{"location":"debian/#configuracion","title":"Configuraci\u00f3n","text":"<p>En primer lugar nos crearemos nuestro par de claves, p\u00fablica y privada, en el ordenador que se conectar\u00e1 a nuestra debian, con el comando (sin sudo):</p> <pre><code>ssh-keygen -b 4096\n</code></pre> <p>Si dej\u00e1is las opciones por defecto, crear\u00e1 una clave privada <code>id_rsa</code> y una clave p\u00fablica <code>id_rsa.pub</code> en el directorio <code>/home/nombreusuario/.ssh</code>.</p> <p>Os pedir\u00e1 una contrase\u00f1a para proteger el uso de la clave privada. Puesto que precisamente queremos agilizar el proceso de conexi\u00f3n por SSH para no introducir contrase\u00f1as, deb\u00e9is dejarla vac\u00eda.</p> <p>Una vez creado el par de claves, tal y como hemos visto en el apartado anterior, el servidor SSH (Debian) debe poseer nuestra clave p\u00fablica para que podamos autenticarnos con nuestra clave privada, que como su nombre indica, s\u00f3lo debemos poseer nosotros y por eso nos identifica un\u00edvocamente.</p> <p>Este proceso de copia se puede realizar f\u00e1cilmente con el comando:</p> <pre><code>ssh-copy-id usuario@ip_servidor\n</code></pre> <p>Para no tener ning\u00fan problema con los permisos sobre directorios y archivos, ejecutad en Debian:</p> <pre><code>chmod 700 .ssh/\nchmod 600 .ssh/authorized_keys\n</code></pre> <p>Que no es m\u00e1s que una conexi\u00f3n SSH que adem\u00e1s copia la clave, por lo que:</p> <ul> <li>usuario: nombre de vuestro usuario en Debian</li> <li>ip_servidor: ip de la m\u00e1quina Debian</li> </ul> <p>Para Windows</p> <p>Este m\u00f3dulo est\u00e1 dise\u00f1ado desde un cliente Linux conect\u00e1ndose al servidor Linux, por lo que el cliente SSH est\u00e1 integrado en el propio terminal. Para Windows existen multitud de alternativas como cliente SSH, desde utilizar el propio WSL2 (Windows Subsystem Linux) de forma similar a lo que aqu\u00ed se describe, hasta utilizar cualquier otro de los varios clientes disponibles</p> <p>Por ejemplo, si utiliz\u00e1is Putty, deber\u00e9is seguir los pasos que detallan en este tutorial para configurar las claves.</p> <p>En caso de utilizar otro cliente, buscad la forma de hacerlo pues diferir\u00e1 en cada caso.</p>"},{"location":"debian/#referencias","title":"Referencias","text":"<p>\u00bfQu\u00e9 es un VPS? Todo lo que necesitas saber sobre servidores virtuales</p>"},{"location":"debian_teoria/","title":"Introducci\u00f3n","text":"<p>En este m\u00f3dulo vamos a simular escenarios reales donde apenas trabajaremos en local, en nuestro propio ordenador. Simularemos, mediante una m\u00e1quina virtual que es en la que realmente trabajaremos, que todos nuestros despliegues ocurren en una m\u00e1quina remota, tal y como ocurre en la realidad.</p> <p>De hecho, se simular\u00e1 un escenario donde tengamos contratado un VPS (Virtual Private Server) y debamos conectarnos de forma remota al mismo para poder trabajar. Un escenario muy com\u00fan en el mundo real.</p>"},{"location":"debian_teoria/#que-es-un-vps","title":"\u00bfQu\u00e9 es un VPS?","text":"<p>Un servidor es una computadora en la que tu proveedor de alojamiento web almacena los archivos y las bases de datos necesarios para tu sitio web. Cada vez que un visitante en l\u00ednea quiere acceder a tu sitio web, su navegador le env\u00eda una solicitud a tu servidor y transfiere los archivos necesarios a trav\u00e9s de Internet. El alojamiento VPS te proporciona un servidor en la nube que simula un servidor f\u00edsico; sin embargo, en realidad, la m\u00e1quina se comparte entre varios usuarios.</p> <p>Al usar la tecnolog\u00eda de virtualizaci\u00f3n, tu proveedor de alojamiento web instala una capa virtual sobre el sistema operativo del servidor. Esta capa divide el servidor en particiones y le permite a cada usuario instalar su propio sistema operativo y software.</p> <p>Por lo tanto, un servidor privado virtual (VPS) es tanto virtual como privado porque tienes control absoluto. Est\u00e1 separado de otros usuarios del servidor a nivel del sistema operativo. De hecho, la tecnolog\u00eda VPS es similar a la creaci\u00f3n de particiones en tu computadora cuando quieres ejecutar m\u00e1s de un sistema operativo (por ejemplo, Windows y Linux) sin tener que reiniciar.</p> <p></p> <p>Un VPS te permite configurar tu sitio web dentro de un contenedor seguro con recursos garantizados (memoria, espacio en disco, n\u00facleos de CPU, etc.) que no tienes que compartir con otros usuarios. Con el hosting VPS, tienes el mismo acceso de nivel ra\u00edz que si alquilaras un servidor dedicado, pero a un costo mucho m\u00e1s bajo.</p> <p>El VPS es una soluci\u00f3n m\u00e1s segura y estable que el hosting compartido, con el que no obtienes espacio de servidor dedicado. Sin embargo, es de menor escala y m\u00e1s barato que alquilar un servidor completo.</p> <p>El hosting VPS generalmente es elegido por los propietarios de sitios web que tienen un tr\u00e1fico de nivel medio que excede los l\u00edmites de los planes de hosting compartido pero que a\u00fan no necesitan los recursos de un servidor dedicado.</p>"},{"location":"debian_teoria/#conexion-mediante-ssh","title":"Conexi\u00f3n mediante SSH","text":"<p>Aunque nuestra m\u00e1quina virtual est\u00e9 en nuestro ordenador, ya hemos dicho que estamos simulando un VPS remoto. Para conectarnos a una m\u00e1quina de forma remota y segura, la opci\u00f3n m\u00e1s recomendable es SSH.</p> <p></p> <p>SSH o Secure Shell es un protocolo de red criptogr\u00e1fico para operar servicios de red de forma segura a trav\u00e9s de una red no protegida. Las aplicaciones t\u00edpicas incluyen l\u00ednea de comandos remota, inicio de sesi\u00f3n y ejecuci\u00f3n de comandos remota, pero cualquier servicio de red puede protegerse con SSH.</p> <p>SSH proporciona un canal seguro a trav\u00e9s de una red no segura mediante el uso de una arquitectura cliente-servidor , conectando una aplicaci\u00f3n cliente SSH con un servidor SSH.  El puerto TCP est\u00e1ndar para SSH es 22 y se usa generalmente para acceder a sistemas operativos similares a Unix, pero tambi\u00e9n se puede usar en Microsoft Windows.</p> <p>Proporciona un mecanismo para autenticar un usuario remoto, transferir entradas desde el cliente al host y retransmitir la salida de vuelta al cliente.</p> <p>SSH tiene muchas aplicaciones diferentes:</p> <ul> <li>Gesti\u00f3n de servidores a los que no se puede acceder localmente</li> <li>Transferencia segura de archivos</li> <li>Creaci\u00f3n de copias de seguridad</li> <li>Conexi\u00f3n entre dos ordenadores con encriptaci\u00f3n de extremo a extremo</li> <li>Mantenimiento remoto desde otros ordenadores</li> </ul>"},{"location":"debian_teoria/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>Los dos m\u00e9todos de autenticaci\u00f3n de usuario SSH m\u00e1s comunes que se utilizan son las contrase\u00f1as (cifrado sim\u00e9trico) y las claves SSH (cifrado asim\u00e9trico o de clave p\u00fablica). Los clientes env\u00edan contrase\u00f1as cifradas al servidor de forma segura. Sin embargo, las contrase\u00f1as son un m\u00e9todo de autenticaci\u00f3n arriesgado porque su solidez depende de que el usuario sepa qu\u00e9 hace que una contrase\u00f1a sea segura. </p> <p>Los pares de claves p\u00fablica-privada SSH encriptados asim\u00e9tricamente son una mejor opci\u00f3n. Una vez que el cliente descifra el mensaje, el servidor le otorga acceso al sistema.</p> <p>Es decir, SSH opta por el cifrado h\u00edbrido, donde se utiliza el cifrado asim\u00e9trico para intercambiar unas claves que ser\u00e1n las que se utilizar\u00e1n posteriormente en el intercambio de informaci\u00f3n.</p> <p>Este tipo de cifrado utiliza la misma clave para cifrar y para descifrar la informaci\u00f3n. Por este motivo, la clave debe ser secreta y s\u00f3lo conocida por el emisor y el receptor del mensaje.</p>"},{"location":"debian_teoria/#cifrados-simetricos-o-de-clave-privada","title":"Cifrados sim\u00e9tricos o de clave privada","text":"<p>Este tipo de cifrado utiliza la misma clave para cifrar y para descifrar la informaci\u00f3n. Por este motivo, la clave debe ser secreta y s\u00f3lo conocida por el emisor y el receptor del mensaje.</p> <p></p> <p>Ventajas</p> <ul> <li>Muy r\u00e1pidos \u2192 cifrar y descifrar un mensaje cada vez requiere un cierto tiempo, que si el algoritmo es complejo, puede ser elevado. </li> </ul> <p>Inconvenientes</p> <ul> <li>Si alguien no autorizado consigue la clave, podr\u00e1 espiar la comunicaci\u00f3n sin problemas</li> <li>\u00bfC\u00f3mo hacemos para que emisor y receptar conozcan la clave en un primer momento? \u2192 no se puede transmitir por el canal inseguro \u2192 hay que transmitirla por otro canal seguro     Ejemplos: PIN de la tarjeta del banco o archivo comprimido con contrase\u00f1a</li> </ul>"},{"location":"debian_teoria/#cifrados-asimetricos-o-de-clave-publica","title":"Cifrados asim\u00e9tricos o de clave p\u00fablica","text":"<p>En este tipo de cifrados cada usuario utiliza un par de claves: una clave p\u00fablica y una clave privada. Un mensaje cifrado con la clave p\u00fablica s\u00f3lo se puede descifrar con su correspondiente clave privada y viceversa.</p> <p></p> <p>La clave p\u00fablica es accesible a cualquier persona que quiera consultarla, no hace falta que sea transmitida por un canal seguro como en el caso anterior.</p> <p>La clave privada s\u00f3lo la debe conocer su due\u00f1o.</p> <p>Funcionamiento:</p> <ol> <li>El emisor cifra un mensaje con la clave p\u00fablica del receptor</li> <li>El receptor recibe el mensaje y es el \u00fanico que podr\u00e1 descifrarlo porque es el \u00fanico que posee la clave cifrada asociada</li> </ol> <p>Ventajas</p> <ul> <li>No se necesita un nuevo canal independiente y seguro para transmitir la clave</li> </ul> <p>Inconvenientes</p> <ul> <li>Son m\u00e1s lentos que los cifrados sim\u00e9tricos</li> <li>Hay que proteger muy bien la clave privada y tenerla siempre disponible para poder descifrar los mensajes (no es una contrase\u00f1a)</li> <li>Hay que asegurarse de que la clave p\u00fablica es de qui\u00e9n dice ser y no de un impostor que se est\u00e9 haciendo pasar por \u00e9l</li> </ul> <p>Nota</p> <p>Nosotros, para conectarnos por primera vez por SSH y comprobar la conectividad, utilizaremos el cifrado sim\u00e9trico (una contrase\u00f1a).</p> <p>Tras ello, simulando un entorno real que aporte comodidad (no introducir contrase\u00f1a cada vez que hagamos login) pero tambi\u00e9n y sobre todo, por seguridad, utilizaremos cifrado asim\u00e9trico. Esto es, un par de claves.</p>"},{"location":"debian_teoria/#referencias","title":"Referencias","text":"<p>\u00bfQu\u00e9 es un VPS? Todo lo que necesitas saber sobre servidores virtuales</p>"},{"location":"dns/","title":"Servicio DNS (Domain Name System)","text":""},{"location":"dns/#introduccion","title":"Introducci\u00f3n","text":"<p>El sistema de nombres de dominio DNS (Domain Name System) proporciona un mecanismo eficaz para llevar a cabo la resoluci\u00f3n de nombres de dominio a direcciones IP. Como usuarios (humanos) nos es m\u00e1s f\u00e1cil dirigirnos a un nombre de dominio (de host, de web, de servidor de correo, etc.) utilizando un texto identificativo (por ejemplo, www.gva.es) que a la direcci\u00f3n IP pertinente (por ejemplo, 193.144.127.85). el servicio DNS no s\u00f3lo permite hacer la resoluci\u00f3n de nombres de dominio a direcciones IP, sino tambi\u00e9n la resoluci\u00f3n inversa. Es decir, a partir de una IP averiguar el nombre de dominio. </p> <p>El servicio DNS proporciona independencia del nombre de dominio respecto a la IP. As\u00ed un dominio puede cambiar de IP de forma transparente para los usuarios del dominio. Incluso es usual que un dominio se identifique con m\u00e1s de una IP como medida de redundancia contra la ca\u00edda del sistema o como balanceo de cargas. Otros servicios proporcionados por el DNS son la identificaci\u00f3n de los servidores de correo de un dominio, de cada uno de los hosts que pertenecen a la red, servidores de impresi\u00f3n, etc.</p>"},{"location":"dns/#sistemas-de-nombres-planos-y-jerarquicos","title":"Sistemas de nombres planos y jer\u00e1rquicos","text":"<p>El problema de la identificaci\u00f3n de equipos se produce desde el principio de la existencia de las redes de ordenadores y no es algo espec\u00edfico de TCP/IP. Hac\u00eda falta un lenguaje humano para realizar esta identificaci\u00f3n. </p> <p>En los albores de las redes, cuando ARPANET (la red predecesora de Internet), los nombres los equipos se centralizaban en un archivo llamado host.txt (/etc/hosts en Linux), que inclu\u00eda el nombre del equipo y su IP. Esto es lo que se conoce como un sistema de nombres plano. Puede ser adecuado para redes peque\u00f1as pero no es escalable ni pr\u00e1ctico en redes grandes y mucho menos en Internet. </p> <p>Ejemplo de fichero de nombres plano: </p> <p></p>"},{"location":"dns/#elementos-del-sistema-de-nombres-de-dominio","title":"Elementos del sistema de nombres de dominio","text":"<p>El espacio de nombres de dominio est\u00e1 formado por los nombres v\u00e1lidos utilizados para identificar servicios o m\u00e1quinas en una red. Se puede representar mediante una estructura jer\u00e1rquica de topolog\u00eda arb\u00f3rea, es decir, todos los nombres forman un \u00e1rbol invertido donde cada nodo se separa de los otros nodos por un punto <code>.</code>. </p> <p></p>"},{"location":"dns/#nombres-de-dominio","title":"Nombres de dominio","text":"<p>Los nombres de dominio pueden estar formados por una o m\u00e1s cadenas de caracteres separadas por puntos y no se distingue entre may\u00fasculas y min\u00fasculas. Por ejemplo, www.deaw.es. es lo mismo que WWW.deaw.ES.. </p> <p></p> <p>Los nombres de dominio se expresan como secuencias de etiquetas (labels).</p>"},{"location":"dns/#dominios-raiz","title":"Dominios ra\u00edz","text":"<p>En teor\u00eda, todos los dominios deben de terminar con un punto (.). Es as\u00ed porque el \u00e1rbol de nombres de dominio (espacio de nombres de dominio) empieza con el dominio <code>.</code> que se conoce como dominio ra\u00edz (root). En realidad es un elemento nulo de 0 caracteres que se representa con un punto (.). </p> <p>Un dominio se lee de derecha a izquierda, empezando por el punto <code>.</code>, aunque en la pr\u00e1ctica lo hacemos de izquierda a derecha. El punto inicial, generalmente se omite ya que los programas lo a\u00f1aden por defecto y es meramente formal, pero en ocasiones, ser\u00e1 necesario que indiquemos el nombre de dominio completo incluyendo el dominio ra\u00edz, es lo que se conoce como nombres de dominio completos (Fully Qualified Domain Names, FQDN). </p>"},{"location":"dns/#dominios-y-subdominios","title":"Dominios y subdominios","text":"<p>Como consecuencia de la organizaci\u00f3n jer\u00e1rquica del espacio de nombres de dominios, podemos utilizar los t\u00e9rminos dominio y subdominio. Por ejemplo, <code>deaw.es.</code> es un subdominio del dominio <code>es.</code> y <code>www.deaw.es</code>. es un subdominio del dominio <code>deaw.es.</code>. </p> <p>Los dominios o subdominios que cuelgan del dominio ra\u00edz <code>.</code> se conocen como dominios de primer nivel o dominios de nivel superior (Top Level Domains, TLD), los que cuelgan de los dominios TLD se denominan dominios de segundo nivel y as\u00ed sucesivamente</p>"},{"location":"dns/#zonas","title":"Zonas","text":"<p>Una zona es una porci\u00f3n del espacio del espacio de nombre de dominio en el DNS cuya responsabilidad administrativa recae sobre un \u00fanico responsable. </p> <p>Los servidores que gestionan la zona tienen informaci\u00f3n completa sobre ella y se dice que son autorizados para esa zona. </p> <p>Las zonas se almacenan en archivos de texto o en bases de datos, seg\u00fan el tipo de software que se utilice para montar el servidor DNS y de como se configure. </p> <p>Tomemos como ejemplo el dominio deaw.es. y veamos parte de su archivo de zona </p> <p><pre><code>...\ndeaw.es.         IN NS      ns1.deaw.es.\nns1.deaw.es.     IN A       192.168.1.20\nnatos.deaw.es. IN   A       192.168.1.21\nwaor.deaw.es.    IN A       192.168.1.22\nwww.deaw.es.     IN CNAME   natos.deaw.es.\nftp.deaw.es.     IN CNAME   waor.deaw.es.\n...\n</code></pre> A cada una de las l\u00edneas del fichero se las conoce como registros de recurso (RR: Resource Records) y definen los tipos de datos en el Domain Name System (DNS). Se utilizan para almacenar datos sobre nombres de dominio y direcciones IP. Una base de datos o fichero de zona est\u00e1 formada por una serie de registros de recursos. Cada registro de recurso da informaci\u00f3n pertinente sobre un objeto determinado. Por ejemplo, los registros de tipo (A) asocian un nombre de host con una direcci\u00f3n IP, y los registros de puntero de b\u00fasqueda inversa (PTR) asocian una direcci\u00f3n IP con un nombre de host y un registro (NS) define un servidor DNS para la zona. El servidor DNS utiliza estos registros de recurso para resolver las consultas de los hosts de su zona. </p> <p>Cuando un servidor DNS es autorizado para una zona, es el responsable de los nombres de dominio para esa zona. En nuestro ejemplo, ns1.deaw.es es el servidor autorizado para la zona deaw.es. y en \u00e9l se definen los nombres que cuelgan de deaw.es como por ejemplo, www.deaw.es, ftp.deaw.es, natos.deaw.es, etc. </p> <p></p> <p>La organizaci\u00f3n que administra el servidor DNS y por lo tanto la zona, puede delegar o no alguno de sus subdominios. Supongamos que de deaw.es. cuelgan los subdominios teoria.deaw.es. y practicas.deaw.es. y se decide delegar solo el subdominio practicas.deaw.es.. Esto implica que existir\u00e1 otro servidor DNS autorizado para el dominio practicas.deaw.es., que almacenar\u00e1 el fichero de zona para dicho dominio.</p> <p>Una zona no es lo mismo que un dominio. Un dominio es un subarbol del espacio de nombres de dominio y los datos asociados a los nombres de un dominio pueden estar almacenados en una o varias zonas, distribuidas en uno o varios servidores DNS. </p> <p>Info</p> <p>B\u00e1sicamente una zona es una porci\u00f3n de un dominio.</p> <p>Un servidor DNS puede ser autorizado sobre varias zonas, por ejemplo, el mismo servidor DNS puede ser autorizado para la zona deaw.es. y para la zona seguridadinformatica.es..</p> <p></p>"},{"location":"dns/#tipos-de-rr-resource-record","title":"Tipos de RR (Resource Record)","text":"<p>En esta subsecci\u00f3n vamos a ver cu\u00e1les son los registros de recursos o RR m\u00e1s utilizados. Antes debemos aclarar algunos conceptos:</p>"},{"location":"dns/#ttl-time-to-live","title":"$TTL (Time To Live)","text":"<p>El TTL o tiempo de vida determina, en segundos, durante cu\u00e1nto tiempo son validos los RR. Pueden indicarse en semanas ($TTL 1W), d\u00edas ($TTL 7D), horas ($TTL 168H) o minutos (10080M).</p> <p>En otras palabras, el TTL indica cu\u00e1nto tiempo tardar\u00e1n en aplicarse los cambios que le hagamos a un RR desde que los hacemos. En el ejemplo del p\u00e1rrafo anterior, los servidores DNS comprobar\u00e1n cada semana si se ha producido alg\u00fan cambio en esos RR. Debe declararse al inicio del archivo de zona.</p>"},{"location":"dns/#origin","title":"$ORIGIN","text":"<p>La directiva $ORIGIN define el nombre del dominio que ser\u00e1 a\u00f1adido al final de cualquier nombre que no acabe en punto (nombres relativos o no cualificados) en los RR, para as\u00ed transformarlos en nombres FQDN (fully qualified domain name). Si un nombre acaba en punto, se considera un nombre FQDN y no se utilizar\u00eda $ORIGIN.</p> <p>Su sintaxis o forma de escribirlo ser\u00e1:</p> <pre><code>$ORIGIN nombre-dominio\n</code></pre> <p>Por ejemplo:</p> <pre><code>$ORIGIN deaw.es.\n;A partir de aqu\u00ed se a\u00f1ade deaw.es. a todos los nombres relativos\n...\n</code></pre>"},{"location":"dns/#formato-general-de-los-rr","title":"Formato general de los RR","text":"<p>El formato con el que se introducen los RR en los archivos de zona es del siguiente estilo:</p> <p><pre><code>Nombre de dominio       [TTL]       Clase       Tipo        Tipo-Dato\n</code></pre> As\u00ed por ejemplo, un RR quedar\u00eda tal que as\u00ed:</p> <pre><code>profesor.deaw.es    7200        IN      A       192.168.10.254\n</code></pre>"},{"location":"dns/#tipos-de-registros","title":"Tipos de registros","text":"<p>Aclarados los puntos anteriores, ahora s\u00ed vamos a ver los principales tipos de registros:</p> <ul> <li> <p>Registro SOA (Start Of Authority): Especifica informaci\u00f3n autoritaria sobre una zona DNS, incluyendo el servidor de nombre primario, el email del administrador, el n\u00famero de serial o versi\u00f3n de la zona, y varios temporizadores.</p> <p>Ejemplo:</p> <pre><code>    deaw.es.   IN   SOA   ns1.deaw.es.   super.deaw.es. (\n                20190425001 ; serial\n                604800  ; refresh (7 d\u00edas)\n                86400   ; retry (1 d\u00eda)\n                2419200 ; expire (28 d\u00edas)\n                604800 )    ; TTL negativo (7 d\u00edas)\n...\n</code></pre> </li> <li> <p>Registro NS (Name Server):Cuando se delega la administraci\u00f3n de subdominios en otros servidores, este registro indica cu\u00e1les son esos servidores autorizados.</p> <pre><code>...\ndeaw.es.    IN  NS  ns1.deaw.es.    ;Servidor DNS maestro\ndeaw.es.    IN  NS  ns2.deaw.es.    ;Servidor DNS esclavo\ndeaw.es.    IN  NS  dns.deaw.net.   ;Servidor DNS esclavo\nns1.deaw.es.    IN  A   192.168.10.20\nns2.deaw.es.    IN  A   192.168.10.21\n;DELEGACI\u00d3N\npracticas.deaw.es.  IN  NS  ns1.practicas.deaw.es.\nredes.deaw.es.  IN  NS  dns.deaw.net.\n</code></pre> </li> <li> <p>El registro A (Address), tambi\u00e9n conocido como registro de direcci\u00f3n, establece una correspondencia entre un nombre de dominio completamente cualificado (FQDN) y una direcci\u00f3n IP versi\u00f3n 4.</p> <pre><code>...\nns1.deaw.es.        IN  A   192.168.10.20\nns2.deaw.es.        IN  A   192.168.10.21\nnatos.deaw.es.  IN  A   192.168.10.22\n...\n</code></pre> </li> <li> <p>El registro CNAME (Canonical Name) permite crear alias para nombres de dominio especificados en registros A.</p> <pre><code>...\nnatos.deaw.es.  IN  A   192.168.1.22\nwww.deaw.es.        IN  CNAME   natos.deaw.es.\nftp.deaw.es.        IN  CNAME   natos.deaw.es.\n...\n</code></pre> <p>Un registro CNAME tambi\u00e9n puede apuntar a un nombre de otro dominio.</p> <pre><code>...\nwww.deaw.es.    IN  CNAME   www.deaw.com.\n...\n</code></pre> </li> <li> <p>El registro MX (Mail Exchange) permite definir los servidores encargados de la entrega de correo en el dominio y la prioridad entre ellos. Su sint\u00e1xis es la siguiente:</p> <pre><code>...\ndeaw.es.    IN  MX  10  mail1.deaw.es.\ndeaw.es.    IN  MX  20  mail2.deaw.es.\nmail1.deaw.es.  IN  A   192.168.1.100\nmail2.deaw.es.  IN  A   192.168.1.101\n...\n</code></pre> </li> <li> <p>El registro PTR (Pointer Record) establece una correspondencia entre direcciones IPv4 e IPv6 y nombres de dominio. Se utilizan en las zonas de resoluci\u00f3n inversa.</p> <p>En el caso de un bloque IPv4 de prefijo <code>/24</code>, por ejemplo el <code>192.168.1.0/24</code>, los registros PTR ser\u00edan los siguientes:</p> <pre><code>...\n20.1.168.192.in-addr.arpa.    IN    PTR    ns1.deaw.es.\n21.1.168.192.in-addr.arpa.    IN    PTR    ns2.deaw.es.\n22.1.168.192.in-addr.arpa.    IN    PTR    natos.deaw.es.\n...\n</code></pre> <p>o lo que es lo mismo:</p> <pre><code>...\n20    IN    PTR    ns1.deaw.es.\n21    IN    PTR    ns2.deaw.es.\n22    IN    PTR    natos.deaw.es.\n...\n</code></pre> </li> <li> <p>El registro TXT (plaint text) permite asociar informaci\u00f3n adicional a un dominio mediante m\u00faltiples cadenas de texto, con una longitud m\u00e1xima de 255 caracteres cada una de ellas. Por ejemplo, utilizado para almacenar claves de cifrado.</p> <pre><code>...\n@   IN  TXT     \"Servidor maestro de Servicios en Red\"\n@   IN  TXT     \"Servidor maestro de Servicios en Red\"\n</code></pre> </li> </ul>"},{"location":"dns/#tipos-de-servidores-dns","title":"Tipos de servidores DNS","text":""},{"location":"dns/#servidor-maestro-o-primario","title":"Servidor maestro o primario","text":"<p>Un servidor maestro o primario, define una o varias zonas de las que es autorizado. Sus archivos de zona son de lectura y escritura y es en ellos donde el administrador del servidor a\u00f1ade, modifica o elimina nombres de dominio.</p> <ul> <li> <p>Si un cliente DNS u otro servidor DNS le pregunta por alg\u00fan nombre de dominio para el que es autorizado, consulta con los ficheros de zona y responde a la pregunta.</p> </li> <li> <p>Si un cliente DNS u otro servidor DNS le pregunta por alg\u00fan nombre de dominio para el que no es autorizado, tendr\u00e1 que preguntar a otros servidores DNS o responder que no conoce la respuesta.</p> </li> </ul>"},{"location":"dns/#servidor-esclavo-o-secundario","title":"Servidor esclavo o secundario","text":"<p>Un servidor esclavo o secundario define una o varias zonas para las que es autorizado. La diferencia con respecto a un servidor maestro es que los ficheros de zona los obtiene de otro servidor autorizado para la zona, normalmente, de un servidor maestro mediante un procedimiento denominado transferencia de zona. Los ficheros de zona de los servidores esclavos son de solo lectura y por lo tanto, el administrador no tiene que editarlos. La modificaci\u00f3n de los archivos de zona debe realizarla el servidor maestro que transfiere la zona.</p> <p>El funcionamiento de como responden a los clientes DNS o a otros servidores DNS es similar al de un servidor maestro. Un servidor puede ser maestro para una o varias zonas y al mismo tiempo ser esclavo para otras.</p> <p>Pueden existir varios servidores esclavos para una misma zona. Las razones para esto suelen ser:</p> <ul> <li>Reducir y repartir la carga entre varios servidores DNS.</li> <li>Favorecer la tolerancia a fallos.</li> <li>Ofrecer mayor rapidez.</li> </ul> <p>Lo ideal es que los servidores DNS para una misma zona est\u00e9n ubicados en redes y localizaciones diferentes para evitar que, si ocurre alg\u00fan problema no les afecte simult\u00e1neamente y deje sin servicio de resoluci\u00f3n a los nombres de esa zona.</p> <p></p>"},{"location":"dns/#servidor-cache","title":"Servidor cach\u00e9","text":"<p>Los servidores DNS se configuran como servidores cache para mejorar los tiempos de respuesta de las consultas, reducir la carga de los equipos y disminuir el tr\u00e1fico de red.</p> <p>Cuando un servidor DNS recibe una pregunta sobre un dominio para el cual no es autorizado, es decir, de un nombre del cual no tiene informaci\u00f3n, puede preguntar, si as\u00ed est\u00e1 configurado, a otros servidores para obtener la respuesta. Si el servidor act\u00faa como cache, guarda durante un tiempo (TTL: Time To Live) las respuestas a las \u00faltimas preguntas que ha realizado a otros servidores DNS. Cada vez que un cliente DNS u otro servidor DNS le formula una pregunta, comprueba si tiene la respuesta en su memoria cache, si la tiene, no tendr\u00e1 que preguntar a otro servidor DNS por la pregunta.</p> <p>Un servidor DNS es solo cache (cache only server) cuando:</p> <ul> <li>No tiene autoridad sobre ninguna zona.</li> <li>Pregunta a otros servidores DNS para resolver las preguntas de los clientes DNS y las guarda en su memoria cache.</li> </ul> <p>En el siguiente gr\u00e1fico se explica como dos clientes DNS hacen preguntas a un mismo servidor DNS que es autorizado para algunas zonas y adem\u00e1s act\u00faa como cach\u00e9.</p> <p></p>"},{"location":"dns/#servidor-forwarder-reenviador","title":"Servidor forwarder (reenviador)","text":"<p>Cuando a un servidor DNS se le hace una pregunta sobre un nombre de dominio del que no dispone informaci\u00f3n (no es autorizado), este puede preguntar a otros servidores DNS. Simplificando, existen dos formas de procesar las consultas:</p> <ul> <li> <p>El servidor DNS procesa la consulta preguntando a diversos servidores DNS y empezando por los servidores DNS ra\u00edz. Consulta iterativa.</p> <p></p> </li> <li> <p>El servidor DNS reenv\u00eda la consulta a otro servidor DNS, denominado reenviador (forwarder), para que se encargue de resolverla. Consulta recursiva.</p> <p></p> </li> </ul> <p>Visto lo anterior, un reenviador (forwarder) es un servidor DNS que otros servidores DNS designan para reenviarle consultas. Son utilizados para minimizar las consultas y el tr\u00e1fico de peticiones DNS desde una red hacia Internet. Adem\u00e1s permiten a los equipos locales utilizar su cache DNs para minimizar los tiempos de respuesta.</p>"},{"location":"dns/#servidor-solo-autorizado","title":"Servidor s\u00f3lo autorizado","text":"<p>Un Servidor solo autorizado (authoritative only) es aquel que es autorizado para una o varias zonas como servidor maestro y/o esclavo y no responde a preguntas que no sean relativas a sus zonas. Es decir, no tiene activada la recursividad, no es reenviador y no act\u00faa como cache.</p>"},{"location":"dns/#servidores-raiz","title":"Servidores ra\u00edz","text":"<p>En Internet existen un conjunto de servidores DNS autorizados para el dominio ra\u00edz <code>.</code>, conocidos como servidores ra\u00edz (root servers). Contienen el fichero de la zona <code>.</code> que contiene informaci\u00f3n sobre los servidores DNS autorizados para cada uno de los dominios TLD.</p> <p>Los servidores ra\u00edz son una parte fundamental de Internet, son el primer paso en la traducci\u00f3n (resoluci\u00f3n) de los nombres de host en direcciones IP, que se utilizan en la comunicaci\u00f3n entre los hosts de Internet. Son claves en el proceso de resoluci\u00f3n de nombres de dominio en Internet, y deben de ser conocidos por todos los servidores DNS que respondan a preguntas sobre nombres para los que no son autorizados.</p> <p>Existen 13 servidores ra\u00edz en toda Internet y cada uno de ellos tiene m\u00faltiples copias distribuidas por todo el mundo, es decir, que f\u00edsicamente no solo son 13 servidores. Cada conjunto de copias de uno de los 13 servidores se identifica por una misma IP. Cuando un cliente realiza una pregunta a una IP de un servidor ra\u00edz, los routers de Internet encaminan la pregunta hacia la copia m\u00e1s cercana mediante un procedimiento denominado anycasting.</p> <p>Los nombres de los servidores ra\u00edz son de la forma letra.root-servers.net, donde letra va desde la A a la M.</p> <p>Listado de Servidores ra\u00edz</p> <p></p>"},{"location":"dns/#tipos-de-consultas-recursivas-e-iterativas","title":"Tipos de consultas: recursivas e iterativas","text":""},{"location":"dns/#consultas-recursivas","title":"Consultas recursivas","text":"<p>Una consulta recursiva es aquella en la que el servidor DNS da una respuesta completa o exacta. Pueden darse tres tipos de respuesta:</p> <ul> <li>Positivas: se devuelve informaci\u00f3n sobre el dominio consultado</li> <li>Negativas: no se puede resolver el nombre de dominio</li> <li>Error: debido a un fallo en la red</li> </ul>"},{"location":"dns/#consultas-iterativas","title":"Consultas iterativas","text":"<p>Una consulta iterativa es aquella en la que el servidor DNS proporciona una respuesta parcial. Existen cuatro posibles respuestas:</p> <ul> <li>Positivas: se devuelve informaci\u00f3n sobre el dominio consultado</li> <li>Negativas: no se puede resolver el nombre de dominio</li> <li>Referencia: el servidor DNS indica a otros servidores a los que se le puede consultar para resolver la pregunta</li> <li>Error: debido a un fallo en la red</li> </ul>"},{"location":"dns/#ejemplos","title":"Ejemplos","text":"<p>Completando la informaci\u00f3n de la imagen del primer ejemplo del apartado del reenviador forwarder:</p> <p></p> <p>Completando la informaci\u00f3n de la imagen del segundo ejemplo del apartado del reenviador forwarder:</p> <p></p>"},{"location":"dns/#resolucion-inversa","title":"Resoluci\u00f3n inversa","text":"<p>La resoluci\u00f3n inversa consiste en obtener informaci\u00f3n de un nombre de dominio preguntando por la direcci\u00f3n IP en vez de preguntar por el nombre de domino como hemos explicado en apartados anteriores.</p>"},{"location":"dns/#mapeo-de-direcciones-y-el-dominio-arpa","title":"Mapeo de direcciones y el dominio arpa","text":"<p>El funcionamiento de la resoluci\u00f3n de direcciones IP es igual al de la resoluci\u00f3n de nombrres de dominio. Las direcciones IP se tratan como nombres que cuelgan del dominio <code>in-addr.arpa</code> para las direcciones IPv4, y del dominio <code>ip6.arpa</code> para las direcciones IPv6.</p> <p></p> <p>Cuando usamos una direcci\u00f3n IP, por ejemplo <code>192.168.1.21</code>, para realizar una pregunta DNS inversa, en realidad estamos preguntando por el nombre de dominio <code>21.1.168.192.in-addr.arpa</code>. La estructura jer\u00e1rquica de la direcci\u00f3n IP, tratada como nombre de dominio, es de derecha a izquierda, comenzando por el dominio <code>in-addr.arpa</code>.</p> <p><code>.arpa (Address and Routing Parameter Area)</code> es un dominio de nivel superior gen\u00e9rico utilizado s\u00f3lo para la infraestructura de Internet. Los subdominios de .arpa o dominios de segundo nivel \u00abin-addr.arpa\u00bb e \u00abip6.arpa\u00bb son usados por los servidores DNS inversos para la obtenci\u00f3n de direcciones IPv4 e IPv6 respectivamente.</p> <p>Cuando mapeamos una direcci\u00f3n IP estamos asociando la direcci\u00f3n IP al nombre en el dominio .arpa. Por ejemplo la direcci\u00f3n <code>192.168.1.21</code> es mapeada al nombre <code>21.1.168.192.in-addr.arpa</code>.</p>"},{"location":"dns/#zonas-de-resolucion-inversa","title":"Zonas de resoluci\u00f3n inversa","text":"<p>Los servidores DNS almacenan zonas de resoluci\u00f3n inversa con registros de recursos (RR) que asocien nombres de dominio con direcciones IP. Las zonas de resoluci\u00f3n inversa pueden ser maestras o primarias y esclavas o secundarias.</p> <p>Las zonas de resoluci\u00f3n directa e inversa son independientes y es responsabilidad de los administradores de los servidores DNS que dichas zonas contengan informaci\u00f3n coherente y que no existan discrepancias.</p> <p>No es obligatorio que la entidad que administra una zona de resoluci\u00f3n directa de un dominio tenga que administrar la zona de resoluci\u00f3n inversa que se corresponda con las direcciones IPs asociadas a dicho dominio.</p> <pre><code>...\ndeaw.es.            IN  NS      ns1.deaw.es.\nns1.deaw.es.        IN  A       192.168.1.20\nnatos.deaw.es.  IN  A       192.168.1.21\nwaor.deaw.es.       IN  A       192.168.1.22\naltea.deaw.es.      IN  A       192.168.1.23\nwww.deaw.es.        IN  CNAME   natos.deaw.es.\nftp.deaw.es.        IN  CNAME   waor.deaw.es.\n...\n</code></pre> <p>Archivo de zona de resoluci\u00f3n directa del dominio deaw.es.</p> <pre><code>...\n1.168.192.in-addr.arpa.     IN  NS  ns1.deaw.es.\n20.1.168.192.in-addr.arpa.  IN  PTR ns1.deaw.es.\n21.1.168.192.in-addr.arpa.  IN  PTR natos.deaw.es.\n22.1.168.192.in-addr.arpa.  IN  PTR waor.deaw.es.\n123.1.168.192.in-addr.arpa. IN  PTR altea.deaw.es.\n...\n</code></pre> <p>Archivo de zona de resoluci\u00f3n inversa <code>1.168.192.in-addr.arpa</code> que permite resolver consultas inversas sobre direcciones IP de la red <code>192.168.1.0/24</code></p>"},{"location":"dns/#proceso-de-resolucion","title":"Proceso de resoluci\u00f3n","text":"<p>El proceso de resoluci\u00f3n inversa es similar al de resoluci\u00f3n directa. Las direcciones IP se tratan como nombres de dominio. Por lo tanto, existen consultas recursivas, iterativas, cache, TTL...</p> <p>Por ejemplo, si un cliente DNS realiza una consulta recursiva de la IP 192.168.1.21 a un servidor DNS, \u00e9ste, si no lo tiene en cache, iniciar\u00e1 una serie de consultas iterativas a los servidores DNS ra\u00edz, a los servidores autorizados para el dominio 192.in-addr.arpa y as\u00ed sucesivamente. </p>"},{"location":"dns/#herramientas","title":"Herramientas","text":""},{"location":"dns/#nslookup","title":"Nslookup","text":"<p>Es un programa para consultar servidores DNS. Se utiliza para saber si un servidor DNS resuelve correctamente los nombres DNS y las direcciones IP, para solucionar problemas frecuentes de los servidores DNS o, para diagnosticar problemas ocasionales de configuraci\u00f3n en los servidores DNS. </p> <p>Con nslookup podemos obtener la direcci\u00f3n IP asociada a un nombre DNS y viceversa, adem\u00e1s, podemos preguntar a los servidores de nombres informaci\u00f3n relativa a los registros de recursos (RR) de la/s zona/s de las que son autorizados.</p> <p>nslookup se usa de dos modos: interactivo y no interactivo. El modo interactivo permite al usuario consultar los servidores DNS para obtener informaci\u00f3n sobre varios hosts y dominios o para listar los hosts de un dominios. El modo no interactivo se usa para presentar solo el nombre y la informaci\u00f3n solicitada para un host o nombre DNS.</p> <p>Este comando funciona tanto en sistemas operativos UNIX/Linux como en Windows. En su momento se trat\u00f3 a nslookup como una aplicaci\u00f3n \u201cdeprecated\u201d u obsoleta, pero a d\u00eda de  hoy parece que ha vuelto a considerarse apta para su uso normal.</p> <p></p> <p></p> <p></p>"},{"location":"dns/#dig","title":"Dig","text":"<p>Es un programa utilizado para preguntar a los servidores DNS.</p> <p>Herramienta utilizada para solucionar problemas de DNS gracias a su flexibilidad, facilidad de uso y claridad en la presentaci\u00f3n de la informaci\u00f3n. Normalmente, dig se usa pas\u00e1ndole argumentos desde la l\u00ednea de comandos (CLI), pero tambi\u00e9n tiene un modo de operar por lotes, leyendo las consultas desde un archivo.</p> <p>Este comando funciona tanto en sistemas operativos UNIX/Linux como en Windows</p> <p></p>"},{"location":"dns/#host","title":"Host","text":"<p>Host es una herramienta CLI sencilla y f\u00e1cil de usar para realizar consultas DNS, que traducen nombres de dominio a direcciones IP y viceversa. Tambi\u00e9n se utiliza para consultar los registros DNS de las zonas que almacenan los servidores DNS, probar y validar el servidor DNS y la conectividad a Internet, registros de correo no deseado y listas negras, diagn\u00f3stico de problemas en el servidor DNS...</p>"},{"location":"dns/#whois","title":"Whois","text":"<p>Aunque no es una herramienta de diagn\u00f3stico DNS si que nos ofrece informaci\u00f3n sobre el registro del dominio.</p> <p>Whois es un protocolo que permite realizar consultas a bases de datos que contienen informaci\u00f3n; del usuario, empresa u organizaci\u00f3n que registra un nombre de dominio y/o una direcci\u00f3n IP en Internet. El protocolo whois se encapsula en TCP y solo especifica el intercambio de peticiones y respuestas, no el formato de datos a intercambiar. Por eso, los resultados de las consultas whois pueden variar dependiendo de la base de datos whois a la que se pregunte. </p>"},{"location":"dns/#referencias","title":"Referencias","text":""},{"location":"docker-compose/","title":"Levantar un WordPress con Docker Compose","text":"<p>El cliente de Docker es engorroso para crear contenedores, as\u00ed como para crear el resto de objetos y vincularlos entre s\u00ed.</p> <p>Para automatizar la creaci\u00f3n, inicio y parada de un contenedor o un conjunto de ellos, Docker proporciona una herramiento llamada Docker Compose.</p> <p>Para esta parte vamos a detener y borrar lo que hemos creado:</p> <p>Example</p> <p>Borra el trabajo actual: <pre><code>docker container stop wordpress wordpress-db\ndocker container rm wordpress wordpress-db\ndocker volume rm wordpress-db\n</code></pre></p>"},{"location":"docker-compose/#docker-compose","title":"Docker Compose","text":"<p>Compose es una herramienta para definir y ejecutar aplicaciones multi-contenedor. Con un solo comando podremos crear e iniciar todos los servicios que necesitamos para nuestra aplicaci\u00f3n.</p> <p>Los casos de uso m\u00e1s habituales para docker-compose son:</p> <ul> <li>Entornos de desarrollo</li> <li>Entornos de testeo autom\u00e1ticos (integraci\u00f3n cont\u00ednua)</li> <li>Despliegue en host individuales (no clusters)</li> </ul> <p>Compose tiene comandos para manejar todo el ciclo de vida de nuestra aplicaci\u00f3n:</p> <ul> <li>Iniciar, detener y rehacer servicios.</li> <li>Ver el estado de los servicios.</li> <li>Visualizar los logs.</li> <li>Ejecutar un comando en un servicio.</li> </ul>"},{"location":"docker-compose/#creacion-de-contenedores-automatizada","title":"Creaci\u00f3n de contenedores automatizada","text":"<p>En el mismo directorio donde est\u00e1bamos en el paso anterior (<code>~/Sites/wordpress</code>), vamos a crear un fichero llamado <code>docker-compose.yaml</code> con el siguiente contenido:</p> <pre><code>version: '3'\nservices:\ndb:\nimage: mariadb:10.3.9\nvolumes:\n- data:/var/lib/mysql\nenvironment:\n- MYSQL_ROOT_PASSWORD=secret\n- MYSQL_DATABASE=wordpress\n- MYSQL_USER=manager\n- MYSQL_PASSWORD=secret\nweb:\nimage: wordpress:4.9.8\ndepends_on:\n- db\nvolumes:\n- ./target:/var/www/html\nenvironment:\n- WORDPRESS_DB_USER=manager\n- WORDPRESS_DB_PASSWORD=secret\n- WORDPRESS_DB_HOST=db\nports:\n- 8080:80\nvolumes:\ndata:\n</code></pre> <p>Info</p> <p>YAML es un lenguaje de serializaci\u00f3n de datos dise\u00f1ado para ser le\u00eddo y escrito por personas. Se recomienda que sigas alg\u00fan tutorial para entender su formato: Aprende YAML en Y minutos.</p> <p>Los ficheros de Compose est\u00e1n divididos en tres secciones: services, volumes y networks; y deben indicar un n\u00famero de versi\u00f3n. Nos permite realizar practicamente lo mismo que podemos hacer con el cliente de docker, pero de forma autom\u00e1tica.</p> <p>Note</p> <p>En este taller no entramos en el apartado de networks.</p> <p>Con este fichero podemos hacer lo mismo que hemos hecho en el cap\u00edtulo anterior, pero con la ventaja de describir todos nuestros requisitos en un solo archivo.</p>"},{"location":"docker-compose/#iniciar-servicios","title":"Iniciar servicios","text":"<p>Vamos a ejecutar esta aplicaci\u00f3n y luego procederemos a explicarla:</p> <p>Example</p> <p>Arranca la aplicaci\u00f3n con Compose:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Cuando arrancamos la aplicaci\u00f3n, Compose nos informa de los servicios que ha ido levantando:</p> <pre><code>$ docker-compose up -d\nCreating network \"wordpress_default\" with the default driver\nCreating volume \"wordpress_data\" with local driver\nCreating wordpress_db_1 ... \nCreating wordpress_db_1 ... done\nCreating wordpress_web_1 ... \nCreating wordpress_web_1 ... done\n</code></pre> <p>El par\u00e1metro <code>-d</code> es similar al que hemos visto en <code>docker run</code>: nos permite levantar los servicios en segundo plano.</p> <p>Veamos los contenedores activos:</p> <p><pre><code>$ docker container ls\nCONTAINER ID  IMAGE            COMMAND      CREATED         STATUS         PORTS                  NAMES\na07b5d4d3982  wordpress:4.9.8  \"docker.s\u2026\"  10 seconds ago  Up 8 seconds   0.0.0.0:8080-&gt;80/tcp   wordpress_web_1\nd9204884cec5  mariadb:10.3.9   \"docker.s\u2026\"  11 seconds ago  Up 10 seconds  3306/tcp               wordpress_db_1\n</code></pre> Tambi\u00e9n podemos ver los contenedores con Compose:</p> <p><pre><code>$ docker-compose ps\n    Name                    Command               State          Ports        \n-------------------------------------------------------------------------------\nwordpress_db_1    docker-entrypoint.sh mysqld      Up      3306/tcp            \nwordpress_web_1   docker-entrypoint.sh apach ...   Up      0.0.0.0:8080-&gt;80/tcp\n</code></pre> Lo que tenemos que tener en cuenta es lo siguiente:</p> <ul> <li><code>docker-compose ps</code> solo muestra informaci\u00f3n de los servicios que se define en <code>docker-compose.yaml</code>, mientras que <code>docker</code> muestra todos.</li> <li>Cuando creamos contenedores con <code>docker</code> sin indicar un nombre, por defecto asigna uno aleatorio; mientras que en Compose el prefijo es el nombre del directorio y el sufijo el nombre del servicio: wordpress_db_1. El n\u00famero indica el n\u00famero de instancia. Es posible levantar m\u00e1s de una instancia de un mismo servicio.</li> </ul> <p>Si accedemos a la direcci\u00f3n http://localhost:8080/, veremos de nuevo la instalaci\u00f3n de WordPress.</p>"},{"location":"docker-compose/#detener-servicios","title":"Detener servicios","text":"<p>Podemos detener servicios con</p> <pre><code>docker-compose stop\n</code></pre>"},{"location":"docker-compose/#borrar-servicios","title":"Borrar servicios","text":"<p>Podemos borrar servicios con</p> <pre><code>docker-compose down\n</code></pre> <p>Esto borra los contenedores, pero no los vol\u00famenes. As\u00ed que si hemos creado bien la aplicaci\u00f3n nuestros datos est\u00e1n a salvo.</p> <p>Si queremos borrar tambi\u00e9n los vol\u00famenes:</p> <pre><code>docker-compose down -v\n</code></pre>"},{"location":"docker-compose/#estructura-de-la-configuracion","title":"Estructura de la configuraci\u00f3n","text":"<p>Veamos la configuraci\u00f3n por partes:</p> <pre><code>version: '3'\n</code></pre> <p>Compose se actualiza a menudo, con lo que el archivo de configuraci\u00f3n va adquiriendo nuevas funcionalidades. La versi\u00f3n '3' (es una cadena, importante poner comillas) es la \u00faltima y para conocer todas sus caracter\u00edsticas mira la p\u00e1gina de referencia de la versi\u00f3n 3 de Compose.</p> <pre><code>volumes:\ndata:\n</code></pre> <p>Ya hemos indicado que es importante guardar los datos vol\u00e1tiles de las aplicaciones en vol\u00famenes. En este caso hemos creado un volumen llamado <code>data</code>. Recordemos que Compose siempre a\u00f1ade como prefijo el nombre del directorio, con lo que el nombre real del volumen es <code>wordpress_data</code>. Podemos comprobarlo con el cliente de docker como hicimos en el cap\u00edtulo de vol\u00famenes:</p> <p><pre><code>$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               wordpress_data\n</code></pre> Nos saltamos la secci\u00f3n de redes (networks) y vamos a la secci\u00f3n de servicios, que son los contenedores que precisa o componen nuestra aplicaci\u00f3n.</p> <p>Primero la base de datos:</p> <p><pre><code>services:\ndb:\nimage: mariadb:10.3.9\nvolumes:\n- data:/var/lib/mysql\nenvironment:\n- MYSQL_ROOT_PASSWORD=secret\n- MYSQL_DATABASE=wordpress\n- MYSQL_USER=manager\n- MYSQL_PASSWORD=secret\n</code></pre> Despu\u00e9s de abrir la parte de servicios, el primer nivel indica el nombre del servicio <code>db</code>, que genera el contenedor <code>wordpress_db</code>. Lo que vemos a continuaci\u00f3n es lo mismo que hicimos en la secci\u00f3n anterior pero de forma parametrizada. Si recordamos, para levantar nuestra base de datos, indicamos la imagen (l\u00ednea 3), luego montamos los vol\u00famenes (l\u00ednea 4), y despu\u00e9s indicamos las variables de entorno que configuraban el contenedor (l\u00ednea 6).</p> <p>Es decir, lo anterior es equivalente, excepto por el nombre, a:</p> <pre><code>$ docker run -d --name wordpress-db \\\n--mount source=wordpress-db,target=/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=secret \\\n-e MYSQL_DATABASE=wordpress \\\n-e MYSQL_USER=manager \\\n-e MYSQL_PASSWORD=secret mariadb:10.3.9\n</code></pre> <p>Y despu\u00e9s nuestro WordPress:</p> <pre><code>services:\nweb:\nimage: wordpress:4.9.8\ndepends_on:\n- db\nvolumes:\n- ./target:/var/www/html\nenvironment:\n- WORDPRESS_DB_USER=manager\n- WORDPRESS_DB_PASSWORD=secret\n- WORDPRESS_DB_HOST=db\nports:\n- 8080:80\n</code></pre> <p>En este caso la equivalencia es al comando:</p> <p><pre><code>$ docker run -d --name wordpress \\\n--link wordpress-db:mysql \\\n--mount type=bind,source=\"$(pwd)\"/target,target=/var/www/html \\\n-e WORDPRESS_DB_USER=manager \\\n-e WORDPRESS_DB_PASSWORD=secret \\\n-p 8080:80 \\\nwordpress:4.9.8\n</code></pre> La equivalencia de los par\u00e1metros es la siguiente:</p> par\u00e1metro Docker par\u00e1metro Composer --link depends_on --mount volumes -e environment -p, --publish ports image <p>Note</p> <p>Si reiniciamos el ordenador, los contenedores estar\u00e1n detenidos (stop), podremos reiniciarlos con <code>docker start</code> o <code>docker-compose start</code>. Este es el comportamiento predeterminado y el que nos interesa en un entorno de desarrollo.</p> <p>Sin embargo, en otros entornos, o para casos concretos, igual queremos que un contenedor tenga el mismo estado en el que estaba antes de reiniciar la m\u00e1quina (iniciado o parado).</p> <p>Para eso usaremos el par\u00e1metro <code>restart</code>. En el caso de la base de datos de nuestro ejemplo, la configuraci\u00f3n quedar\u00eda como:</p> <p><pre><code>services:\ndb:\nimage: mariadb:10.3.9\nrestart: unless-stopped\nvolumes:\n- data:/var/lib/mysql\nenvironment:\n- MYSQL_ROOT_PASSWORD=secret\n- MYSQL_DATABASE=wordpress\n- MYSQL_USER=manager\n- MYSQL_PASSWORD=secret\n</code></pre> El equivalente en la consola ser\u00eda:</p> <pre><code>$ docker run -d --name wordpress-db \\\n--restart unless-stopped\n    --mount source=wordpress-db,target=/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=secret \\\n-e MYSQL_DATABASE=wordpress \\\n-e MYSQL_USER=manager \\\n-e MYSQL_PASSWORD=secret mariadb:10.3.9\n</code></pre> <p>Otros valores son: <code>no</code> (por defecto), <code>always</code> y <code>on-failure</code>.</p>"},{"location":"dockerfile/","title":"Crear im\u00e1genes propias","text":"<p>Ya hemos visto como usar im\u00e1genes de terceros para crear aplicaciones y servicios. Pero, \u00bfsi no hay ninguna imagen que tenga lo que queremos? \u00bfO si queremos hacer una imagen de nuestra aplicaci\u00f3n para distribuirla?</p> <p>Docker permite crear imagenes propias. Aunque podr\u00edamos hacerla partiendo de cero, es un esfuerzo que no tiene sentido. Existe ya im\u00e1genes base para crear las nuestras y es mucho m\u00e1s f\u00e1cil crear una imagen bas\u00e1ndose en otra que hacerlo todo nosotros.</p> <p>Podemos partir de una imagen base que parte de un lenguaje de programaci\u00f3n (python, php) o de alguna distribuci\u00f3n (ubuntu, debian).</p>"},{"location":"dockerfile/#mi-primer-dockerfile","title":"Mi primer Dockerfile","text":"<p>Los Dockerfile son los archivos que contienen las instrucciones que crean las imagenes. Deben estar guardados dentro de un build context, es decir, un directorio. Este directorio es el que contiene todos los archivos necesarios para construir nuestra imagen, de ah\u00ed lo de build context.</p> <p>Creamos nuestro build context</p> <pre><code>mkdir -p  ~/Sites/hello-world\ncd ~/Sites/hello-world\necho \"hello\" &gt; hello\n</code></pre> <p>Dentro de este directorio crearemos un archivo llamado Dockerfile con este contenido:</p> <pre><code>FROM busybox\nCOPY /hello /\nRUN cat /hello\n</code></pre> Directiva Explicaci\u00f3n FROM Indica la imagen base sobre la que se basa esta imagen COPY Copia un archivo del build context y lo guarda en la imagen RUN Ejecuta el comando indicado durante el proceso de creaci\u00f3n de imagen. <p>Ahora para crear nuestra imagen usaremos <code>docker build</code>.</p> <pre><code>docker build -t helloapp:v1 .\n</code></pre> <p>El par\u00e1metro <code>-t</code> nos permite etiquetar la imagen con un nombre y una versi\u00f3n. El <code>.</code> indica que el build context es el directorio actual.</p> <p>El resultado de ejecutar lo anterior ser\u00eda:</p> <pre><code>$ docker build -t helloapp:v1 .\nSending build context to Docker daemon  3.072kB\nStep 1/3 : FROM busybox\nlatest: Pulling from library/busybox\n8c5a7da1afbc: Pull complete \nDigest: sha256:cb63aa0641a885f54de20f61d152187419e8f6b159ed11a251a09d115fdff9bd\nStatus: Downloaded newer image for busybox:latest\n    ---&gt; e1ddd7948a1c\nStep 2/3 : COPY /hello /\n    ---&gt; 8a092965dbc9\nStep 3/3 : RUN cat /hello\n    ---&gt; Running in 83b5498790ca\nhello\nRemoving intermediate container 83b5498790ca\n    ---&gt; f738f117d4b6\nSuccessfully built f738f117d4b6\nSuccessfully tagged helloapp:v1\n</code></pre> <p>Y podremos ver que una nueva imagen est\u00e1 instalada en nuestro equipo:</p> <pre><code>$ docker images\nREPOSITORY   TAG  IMAGE ID      CREATED         SIZE\nhelloapp     v1   f738f117d4b6  40 seconds ago  1.16MB\n</code></pre>"},{"location":"dockerfile/#creando-aplicaciones-en-contenedores","title":"Creando aplicaciones en contenedores","text":"<p>Vamos a crear un aplicaci\u00f3n en python y la vamos a guardarla en un contenedor. Comenzamos creando un nuevo build context:</p> <pre><code>mkdir -p  ~/Sites/friendlyhello\ncd ~/Sites/friendlyhello\n</code></pre> <p>El c\u00f3digo de la aplicaci\u00f3n es el siguiente, lo guardaremos en un archivo llamado <code>app.py</code>:</p> <pre><code>from flask import Flask\nfrom redis import Redis, RedisError\nimport os\nimport socket\n# Connect to Redis\nredis = Redis(host=\"redis\", db=0, socket_connect_timeout=2, socket_timeout=2)\napp = Flask(__name__)\n@app.route(\"/\")\ndef hello():\ntry:\nvisits = redis.incr(\"counter\")\nexcept RedisError:\nvisits = \"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;\"\nhtml = \"&lt;h3&gt;Hello {name}!&lt;/h3&gt;\" \\\n            \"&lt;b&gt;Hostname:&lt;/b&gt; {hostname}&lt;br/&gt;\" \\\n            \"&lt;b&gt;Visits:&lt;/b&gt; {visits}\"\nreturn html.format(name=os.getenv(\"NAME\", \"world\"), hostname=socket.gethostname(),  visits=visits)\nif __name__ == \"__main__\":\napp.run(host='0.0.0.0', port=80)\nNuestra aplicaci\u00f3n tiene una serie de dependencias (librer\u00edas de terceros) que guardaremos en el archivo _requirements.txt_:\nFlask\nRedis\n</code></pre> <p>Y por \u00faltimo definimos nuestro Dockerfile:</p> <pre><code># Partimos de una base oficial de python\nFROM python:2.7-slim\n# El directorio de trabajo es desde donde se ejecuta el contenedor al iniciarse\nWORKDIR /app\n# Copiamos todos los archivos del build context al directorio /app del contenedor\nCOPY . /app\n\n# Ejecutamos pip para instalar las dependencias en el contenedor\nRUN pip install --trusted-host pypi.python.org -r requirements.txt\n\n# Indicamos que este contenedor se comunica por el puerto 80/tcp\nEXPOSE 80\n# Declaramos una variable de entorno\nENV NAME World\n\n# Ejecuta nuestra aplicaci\u00f3n cuando se inicia el contenedor\nCMD [\"python\", \"app.py\"]\n</code></pre> <p>Para conocer todas las directivas visita la documentaci\u00f3n oficial de Dockerfile.</p> <p>En total debemos tener 3 archivos:</p> <pre><code>$ ls\napp.py  Dockerfile  requirements.txt\n</code></pre> <p>Ahora construimos la imagen de nuestra aplicaci\u00f3n:</p> <pre><code>docker build -t friendlyhello .\n</code></pre> <p>Y comprobamos que est\u00e1 creada:</p> <pre><code>$ docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nfriendlyhello       latest              88a822b3107c        56 seconds ago      132MB\n</code></pre>"},{"location":"dockerfile/#probar-nuestro-contenedor","title":"Probar nuestro contenedor","text":"<p>Vamos a arrancar nuestro contenedor y probar la aplicaci\u00f3n:</p> <pre><code>docker run --rm -p 4000:80 friendlyhello\n</code></pre> <p>Tip</p> <p>Normalmente los contenedores son de usar y tirar, sobre todo cuando hacemos pruebas. El par\u00e1metro <code>--rm</code> borra autom\u00e1ticamente un contenedor cuando se para. Recordemos que los datos vol\u00e1tiles siempre se deben guardar en vol\u00famenes.</p> <p>Lo que arranca la aplicaci\u00f3n Flask:</p> <pre><code>$ docker run --rm -p 4000:80 friendlyhello\n    * Serving Flask app \"app\" (lazy loading)\n    * Environment: production\n    WARNING: Do not use the development server in a production environment.\n    Use a production WSGI server instead.\n    * Debug mode: off\n    * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)\n</code></pre> <p>Comprobamos en el puerto 4000 si efectivamente est\u00e1 iniciada o no: http://localhost:4000.</p> <p>Obtendremos un mensaje como este:</p> <pre><code>Hello World!\n\nHostname: 0367b056e66e\nVisits: cannot connect to Redis, counter disabled\n</code></pre> <p>Ya tenemos una imagen lista para ser usada. Pulsamos <code>Control+C</code> para interrumpir y borrar nuestro contenedor.</p>"},{"location":"dockerfile/#creando-la-aplicacion","title":"Creando la aplicaci\u00f3n","text":"<p>En este caso nuestro contenedor no funciona por s\u00ed mismo. Es muy habitual que dependamos de servicios para poder iniciar la aplicaci\u00f3n, habitualmente bases de datos. En este caso necesitamos una base de datos Redis que no tenemos.</p> <p>Como vimos en el apartado anterior, vamos a aprovechar las caracter\u00edsticas de Compose para levantar nuestra aplicaci\u00f3n.</p> <p>Vamos a crear el siguiente archivo docker-compose.yaml:</p> <pre><code>version: \"3\"\nservices:\nweb:\nbuild: .\nports:\n- \"4000:80\"\nredis:\nimage: redis\nports:\n- \"6379:6379\"\nvolumes:\n- \"./data:/data\"\ncommand: redis-server --appendonly yes\n</code></pre> <p>La principal diferencia con respecto al cap\u00edtulo anterior, es que en un servicio podemos indicar una imagen (par\u00e1metro <code>imagen</code>) o un build context (par\u00e1metro <code>build</code>). </p> <p>Esta es una manera de integrar las dos herramientas que nos proporciona Docker: la creaci\u00f3n de im\u00e1genes y la composici\u00f3n de aplicaciones con servicios.</p>"},{"location":"dockerfile/#balanceo-de-carga","title":"Balanceo de carga","text":"<p>Vamos a modificar nuestro docker-compose.yaml:</p> <pre><code>version: \"3\"\nservices:\nweb:\nbuild: .\nredis:\nimage: redis\nvolumes:\n- \"./data:/data\"\ncommand: redis-server --appendonly yes\nlb:\nimage: dockercloud/haproxy\nports:\n- 4000:80\nlinks:\n- web\nvolumes:\n- /var/run/docker.sock:/var/run/docker.sock </code></pre> <p>En este caso, el servicio web no va a tener acceso al exterior (hemos eliminado el par\u00e1metro <code>ports</code>). En su lugar hemos a\u00f1adido un balanceador de carga (el servicio  <code>lb</code>).</p> <p>Vamos a arrancar esta nueva aplicaci\u00f3n, pero esta vez a\u00f1adiendo varios servicios web:</p> <pre><code>docker-composer up -d --scale web=5\n</code></pre> <p>Esperamos a que terminen de iniciar los servicios:</p> <pre><code>$ docker-compose up -d --scale web=5\nCreating network \"friendlyhello_default\" with the default driver\nCreating friendlyhello_redis_1 ... done\nCreating friendlyhello_web_1   ... done\nCreating friendlyhello_web_2   ... done\nCreating friendlyhello_web_3   ... done\nCreating friendlyhello_web_4   ... done\nCreating friendlyhello_web_5   ... done\nCreating friendlyhello_lb_1    ... done\n</code></pre> <p>Podemos comprobar como del servicio web nos ha iniciado 5 instancias, cada uno con su sufijo num\u00e9rico correspondiente. Si usamos <code>docker ps</code> para ver los contenedores disponibles tendremos:</p> <pre><code>$ docker ps\nCONTAINER ID  IMAGE                [...]   PORTS                                    NAMES\n77acae1d0567  dockercloud/haproxy  [...]   443/tcp, 1936/tcp, 0.0.0.0:4000-&gt;80/tcp  friendlyhello_lb_1\n5f12fb8b80c8  friendlyhello_web    [...]   80/tcp                                   friendlyhello_web_5\nfb0024591665  friendlyhello_web    [...]   80/tcp                                   friendlyhello_web_2\na20d20bdd129  friendlyhello_web    [...]   80/tcp                                   friendlyhello_web_4\n53d7db212df8  friendlyhello_web    [...]   80/tcp                                   friendlyhello_web_3\n41218dbbb882  friendlyhello_web    [...]   80/tcp                                   friendlyhello_web_1\n06f5bf6ed070  redis                [...]   6379/tcp                                 friendlyhello_redis_1\n</code></pre> <p>Vamos a fijarnos en el <code>CONTAINER ID</code> y vamos a volver a abrir nuestra aplicaci\u00f3n: http://localhost:4000.</p> <p>Si en esta ocasi\u00f3n vamos recargando la p\u00e1gina, veremos como cambian los hostnames, que a su vez coinciden con los identificadores de los contenedores anteriores.</p> <p>Info</p> <p>Esta no es la manera adecuada de hacer balanceo de carga, puesto que todos los contenedores est\u00e1n en la misma m\u00e1quina, lo cual no tiene sentido. Solo es una demostraci\u00f3n. Para hacer balanceo de carga real necesitar\u00edamos tener o emular un clustes de m\u00e1quinas y crear un enjambre (swarm).</p>"},{"location":"dockerfile/#compartir-imagenes","title":"Compartir im\u00e1genes","text":"<p>Si tenemos una imagen que queramos compartir, necesitamos usar un registro. Existe incluso una imagen que nos permite crear uno propio, pero vamos a usar el repositorio p\u00fablico de Docker.</p> <p>Los pasos son:</p> <ol> <li>Crear una cuenta de usuario en el repositorio oficial de Docker.</li> <li>Pulsar sobre el bot\u00f3n \"Create Repository +\".</li> <li> <p>En el formulario hay que rellenar solo un dato obligatoriamente: el nombre. Usaremos el de la imagen: friendlyhello.</p> <p>Nuestro nombre de usuario es el namespace y es obligatorio que tenga uno. Si estuvieramos en alguna organizaci\u00f3n podr\u00edamos elegir entre varios. El resto de campos lo dejamos como est\u00e1 por el momento. La cuenta gratuita solo deja tener un repositorio privado, asi que no lo malgastaremos aqu\u00ed.</p> </li> <li> <p>Ahora tenemos que conectar nuestro cliente de Docker con nuestra cuenta en el Hub. Usamos el comando <code>docker login</code>.</p> <pre><code>$\u00a0docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\nUsername: username\nPassword: ********\nWARNING! Your password will be stored unencrypted in /home/sergio/.docker/config.json.\nConfigure a credential helper to remove this warning. See\nhttps://docs.docker.com/engine/reference/commandline/login/#credentials-store\n</code></pre> <p>Danger</p> <p>Las claves se guardan sin cifrar. Hay que configurar un almacen de claves o recordar hacer <code>docker logout</code> para borrarla.</p> <p>Visita la web de referencia para saber como crear un almacen.</p> </li> <li> <p>Para que las im\u00e1genes se puedan guardar, tenemos que etiquetarla con el mismo nombre que tengamos en nuestro repositorio m\u00e1s el namespace. Si nuestra cuenta es 'username' y el repositorio es 'friendlyhello', debemos crear la imagen con la etiqueta 'username/friendlyhello'.</p> <pre><code>$ docker build -t username/friendlyhello .\n</code></pre> <p>Tip</p> <p>Por defecto ya hemos dicho que la etiqueta si no se indica es latest. Podemos indicar m\u00e1s de una etiqueta para indicar versiones:</p> <pre><code>$ docker build -t username/friendlyhello -t username/friendlyhello:0.1.0 .\n</code></pre> <p>En la pr\u00f3xima que hagamos le subimos la versi\u00f3n en la etiqueta:</p> <pre><code>$ docker build -t username/friendlyhello -t username/friendlyhello:0.2.0 .\n</code></pre> <p>De esta manera nuestra imagen aparecer\u00e1 con tres etiquetas: latest y 0.2.0 que ser\u00e1n la misma en realidad, y 0.1.0.</p> </li> <li> <p>Ahora ya podemos enviar nuestra imagen:</p> <pre><code>$ docker push username/friendlyhello\n</code></pre> </li> </ol>"},{"location":"dockerfile/#ejercicios","title":"Ejercicios","text":"<ol> <li>Cambia el docker-compose.yaml para usar tu imagen en vez de hacer build.</li> <li>Cambia el docker-compose.yaml para usar la imagen de alg\u00fan compa\u00f1ero. </li> </ol>"},{"location":"git/","title":"Aspectos b\u00e1sicos de Git","text":""},{"location":"git/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"git/#instalando-en-linux","title":"Instalando en Linux","text":"<p>Si quieres instalar Git en Linux a trav\u00e9s de un instalador binario, en general puedes hacerlo a trav\u00e9s de la herramienta b\u00e1sica de gesti\u00f3n de paquetes que trae tu distribuci\u00f3n. Si est\u00e1s en Fedora, puedes usar yum:</p> <pre><code>$ yum install git-core\n</code></pre> <p>O si est\u00e1s en una distribuci\u00f3n basada en Debian como Ubuntu, prueba con apt-get:</p> <pre><code>$ apt-get install git\n</code></pre>"},{"location":"git/#instalando-en-windows","title":"Instalando en Windows","text":"<p>Instalar Git en Windows es muy f\u00e1cil. El proyecto msysGit tiene uno de los procesos de instalaci\u00f3n m\u00e1s sencillos. Simplemente descarga el archivo exe del instalador desde la p\u00e1gina de GitHub, y ejec\u00fatalo:</p> <p>http://msysgit.github.com/</p> <p>Una vez instalado, tendr\u00e1s tanto la versi\u00f3n de l\u00ednea de comandos (incluido un cliente SSH que nos ser\u00e1 \u00fatil m\u00e1s adelante) como la interfaz gr\u00e1fica de usuario est\u00e1ndar. Se recomienda no modificar las opciones que trae por defecto el instalador.</p>"},{"location":"git/#instalando-en-macos","title":"Instalando en MacOS","text":"<p>En MacOS se recomienda tener instalada la herramienta homebrew. Despu\u00e9s, es tan f\u00e1cil como ejecutar:</p> <pre><code>$ brew install git\n</code></pre>"},{"location":"git/#configuracion","title":"Configuraci\u00f3n","text":""},{"location":"git/#tu-identidad","title":"Tu identidad","text":"<p>Lo primero que deber\u00edas hacer cuando instalas Git es establecer tu nombre de usuario y direcci\u00f3n de correo electr\u00f3nico. Esto es importante porque las confirmaciones de cambios (commits) en Git usan esta informaci\u00f3n, y es introducida de manera inmutable en los commits que env\u00edas:</p> <pre><code>$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n</code></pre> <p>Tambi\u00e9n se recomienda configurar el siguiente par\u00e1metro:</p> <pre><code>$ git config --global push.default simple\n</code></pre>"},{"location":"git/#bash-completion","title":"Bash Completion","text":"<p>Bash completion es una utilidad que permite a bash completar \u00f3rdenes y par\u00e1metros. Por defecto suele venir desactivada en Ubuntu y es necesario modificar el archivo <code>$HOME/.bashrc</code> para poder activarla. Simplemente hay que descomentar las l\u00edneas que lo activan,</p>"},{"location":"gitflow/","title":"Flujo de trabajo con Git (git flow)","text":""},{"location":"gitflow/#la-importancia-de-la-organizacion-del-flujo-de-trabajo","title":"La importancia de la organizaci\u00f3n del flujo de trabajo","text":"<p>En la introducci\u00f3n vimos los diferentes esquemas de organizaci\u00f3n externa de los repositorios (es decir, en lo relativo a los usuarios que componen el equipo de trabajo). </p> <p>Pero el repositorio en s\u00ed tambi\u00e9n tiene su esquema de organizaci\u00f3n.</p> <p>En los ejemplos hemos visto que usabamos una rama m\u00e1ster y cre\u00e1bamos ramas para a\u00f1adir funcionalidades que luego integr\u00e1bamos. Es un forma de trabajar de las muchas que hay propuestas, posiblemente la m\u00e1s simple, pero tiene el inconveniente de dejar la rama m\u00e1ster a expensas de una mala actualizaci\u00f3n y quedarnos sin una rama estable. Por eso, hay otras propuestas mejores que permiten separar el trabajo de desarrollo con el mantenimiento de las versiones estables. Una de las m\u00e1s conocidas es la propuesta por Vincent Driessen y que podemos ver en la figura siguiente.</p> <p></p>"},{"location":"gitflow/#las-ramas-principales","title":"Las ramas principales","text":"<p>En este esquema hay dos ramas principales con un tiempo de vida indefinido:</p> <ul> <li>master (origin/master): el c\u00f3digo apuntado por HEAD siempre contiene un estado listo para producci\u00f3n.</li> <li>develop (origin/develop): el c\u00f3digo apuntado por HEAD siempre contiene los \u00faltimos cambios desarrollados para la pr\u00f3xima versi\u00f3n del software. Tambi\u00e9n se le puede llamar rama de integraci\u00f3n. No es necesariamente estable.</li> </ul> <p>Cuando el c\u00f3digo de la rama de desarrollo es lo suficientemente estable, se integra con la rama master y una nueva versi\u00f3n es lanzada.</p>"},{"location":"gitflow/#las-ramas-auxiliares","title":"Las ramas auxiliares","text":"<p>Para labores concretas, pueden usarse otro tipo de ramas, las cuales tienen un tiempo de vida definido. Es decir, cuando ya no son necesarias se eliminan:</p> <ul> <li>Ramas de funcionalidad (feature branches)</li> <li>Ramas de versi\u00f3n (release branches)</li> <li>Ramas de parches (hotfix branches)</li> </ul>"},{"location":"gitflow/#feature-branches","title":"Feature branches","text":"<ul> <li>Pueden partir de: develop</li> <li>Deben fusionarse con: develop</li> <li>Convenici\u00f3n de nombres: feature-NUMissue-*.</li> </ul>"},{"location":"gitflow/#release-branches","title":"Release branches","text":"<ul> <li>Pueden partir de: develop</li> <li>Deben fusionarse con: develop y master</li> <li>Convenici\u00f3n de nombres: release-*</li> </ul>"},{"location":"gitflow/#hotfix-branches","title":"Hotfix branches","text":"<ul> <li>Pueden partir de: master</li> <li>Deben fusionarse con: develop y master</li> <li>Convenici\u00f3n de nombres: hotfix-*</li> </ul>"},{"location":"gitflow/#la-extension-flow-de-git","title":"La extensi\u00f3n flow de Git","text":"<p>Una de las ventajas de Git es que, adem\u00e1s, es extensible. Es decir, se pueden crear nuevas \u00f3rdenes como si de plugins se tratara. Una de las m\u00e1s usadas es gitflow, que est\u00e1 basada en el art\u00edculo que hablamos al principio de este cap\u00edtulo.</p>"},{"location":"gitflow/#instalacion","title":"Instalaci\u00f3n","text":"<p>Aunque la fuente original de la extensi\u00f3n es del mismo autor del art\u00edculo, el c\u00f3digo no se encuentra ya muy actualizado y hay un fork bastante m\u00e1s activo en petervanderdoes/gitflow. En el wiki del repositorio est\u00e1n las instrucciones de instalaci\u00f3n para distintos sistemas. Una vez instalados tendremos una nueva \u00f3rden: <code>git flow</code>.</p>"},{"location":"gitflow/#uso","title":"Uso","text":"<p>Para cambiar a las ramas master y develop, seguiremos usando <code>git checkout</code>, pero para trabajar con las ramas antes indicadas gitflow nos facilita las siguientes \u00f3rdenes:</p>"},{"location":"gitflow/#-git-flow-init","title":"- git flow init:","text":"<p>Inicializa el espacio de trabajo. De forma autom\u00e1tica, crea las ramas que necesitamos y permite configurar el nombre de las mismas.</p> <pre><code>$ git flow init\nInitialized empty Git repository in ~/project/.git/\nNo branches exist yet. Base branches must be created now.\nBranch name for production releases: [master]\nBranch name for \"next release\" development: [develop]\n\nHow to name your supporting branch prefixes?\nFeature branches? [feature/]\nRelease branches? [release/]\nHotfix branches? [hotfix/]\nSupport branches? [support/]\nVersion tag prefix? []\n\n$ git branch\n* develop\n master\n</code></pre> <p>Podemos ver que por defecto (usando intro en vez de escribir nada) pone nombres por defecto a cada rama. Con <code>git branch</code> comprobamos que ramas existen y en cual nos encontramos.</p>"},{"location":"gitflow/#-git-flow-feature","title":"- git flow feature:","text":"<p>Permite crear y trabajar con ramas de funcionalidades.</p> <pre><code>$ git flow feature start feature_branch\n</code></pre> <p>As\u00ed creamos una rama 'feature/feature_branch' y nos mueve autom\u00e1ticamente a ella. En esta haremos los cambios que queramos en nuestro repositorio. Cuando queramos acabar de usar la rama, haremos un commit y la finalizaremos:</p> <pre><code>$ git flow feature stop feature_branch\n</code></pre> <p>Esto finaliza nuestra rama y la integra autom\u00e1ticamente a la rama develop. Si queremos seguir cambiando nuestro repositorio abriremos una nueva rama feature.</p>"},{"location":"gitflow/#-git-flow-release","title":"- git flow release:","text":"<p>Permite crear y trabajar con ramas de versiones. Cuando entendemos que despues de todas las funcionalidades (features, cambios en nuestro repositorio) nuestro trabajo esta listo para ser publicado, abriremos una rama release, que nacera de nuestra rama develop. </p> <pre><code>$ git flow release start 0.1.0\nSwitched to a new branch 'release/0.1.0'\n</code></pre> <p>Usaremos un tag para identificar de que release se trata. Ahora podemos hacer los cambios que estimemos oportuno para integrar todas las features que el repositorio ha sufrido hasta el momento. Tras hacer commit a todo el proceso, podemos cerrar la rama release.</p> <pre><code>$git flow release finish '0.1.0'\n</code></pre> <p>Esto la integrar\u00e1 de forma autom\u00e1tica con master (con esto finalizamos el proceso de 'subir a producci\u00f3n' nuestro codigo) y con la rama develop, para que las futuras features est\u00e9n al d\u00eda.</p>"},{"location":"gitflow/#-git-flow-hotfix","title":"- git flow hotfix:","text":"<p>Permite crear y trabajar con ramas de parches. Esto lo usaremos para hacer cambios rapidos que no puedan esperar a la proxima integracion de una release.</p> <pre><code>$ git flow hotfix start hotfix_branch\n</code></pre> <p>Tras hacer commit finalizamos la rama hotfix. Esta se fusionar\u00e1 con nuestra rama master y con nuestra rama develop para que esta tambi\u00e9n est\u00e9 al d\u00eda de los \u00faltimos cambios.</p> <pre><code>$ git flow hotfix finish hotfix_branch\n</code></pre>"},{"location":"github-avanzado/","title":"Github avanzado","text":"<p>Esta secci\u00f3n trata de c\u00f3mo colaborar con proyectos de terceros.</p>"},{"location":"github-avanzado/#clonar-un-repositorio","title":"Clonar un repositorio","text":"<p>Nos vamos a la web del proyecto en el que queremos colaborar. En este caso el proyecto se encuentra en https://github.com/sgomez/miniblog. Pulsamos en el bot\u00f3n de fork y eso crear\u00e1 una copia en nuestro perfil.</p> <p></p> <p>Una vez se termine de clonar el repositorio, nos encontraremos con el espacio de trabajo del mismo:</p> <ul> <li>En la parte superior informaci\u00f3n sobre los commits, ramas, etiquetas, etc.</li> <li>Justo debajo un explorador de archivos.</li> <li>En la parte derecha un selector para cambiar de contexto entre: explorador de c\u00f3digo, peticiones de colaboraci\u00f3n (pull request), wiki, configuraci\u00f3n, etc.</li> <li>Justo abajo a la derecha informaci\u00f3n sobre como clonar localmente o descargar un proyecto.</li> </ul> <p></p> <p>Github nos permite clonar localmente un proyecto por tres v\u00edas: HTTPS, SSH y Subversion. Seleccionamos SSH y copiamos el texto que despu\u00e9s a\u00f1adiremos a la orden <code>git clone</code> como en la primera l\u00ednea del siguiente grupo de \u00f3rdenes:</p> <pre><code>$ git clone git@github.com:miusuario/miniblog.git\n$ cd miniblog\n$ composer.phar install\n$ php console create-schema\n</code></pre> <p>Lo que hace el c\u00f3digo anterior es:</p> <ol> <li>Clona el repositorio localmente</li> <li>Entramos en la copia</li> <li>Instalamos las dependencias que la aplicaci\u00f3n tiene</li> <li>Arrancamos un servidor web para pruebas</li> </ol> <p>Y probamos que nuestra aplicaci\u00f3n funciona:</p> <pre><code>$ php -S localhost:9999 -t web/\n</code></pre> <p>Podemos usar dos direcciones para probarla:</p> <ul> <li>Frontend: <code>http://localhost:9999/index_dev.php</code></li> <li>Backend: <code>http://localhost:9999/index_dev.php/admin/</code> con usuario admin y contrase\u00f1a 1234.</li> </ul>"},{"location":"github-avanzado/#sincronizar-con-el-repositorio-original","title":"Sincronizar con el repositorio original","text":"<p>Cuando clonamos un repositorio de otro usuario hacemos una copia del original. Pero esa copia es igual al momento en el que hicimos la copia. Cuando el repositorio original cambie, que lo har\u00e1, nuestro repositorio no se actualizar\u00e1 solo. \u00a1Son dos repositorios diferentes! Necesitamos una manera de poder incorporar los cambios que vaya teniendo el repositorio original en el nuestro. Para eso crearemos una nueva rama remota. Por convenio, y como vimos anteriormente, ya existe una rama remota llamada origin que apunta al repositorio de donde clonamos el proyecto, en este caso apunta a nuestro fork en github:</p> <pre><code>$ git remote show origin\n* remote origin\n  Fetch URL: git@github.com:miusuario/miniblog.git\n  Push  URL: git@github.com:miusuario/miniblog.git\n  HEAD branch (remote HEAD is ambiguous, may be one of the following):\n    develop\n    master\n  Remote branches:\n    develop tracked\n    master  tracked\n  Local branch configured for 'git pull':\n    master merges with remote master\n  Local ref configured for 'git push':\n    master pushes to master (up to date)\n</code></pre> <p>Tambi\u00e9n por convenio, la rama remota que hace referencia al repositorio original se llama upstream y se crea de la siguiente manera:</p> <pre><code>$ git remote add upstream git@github.com:sgomez/miniblog.git\n$ git remote show upstream\n* remote upstream\n  Fetch URL: git@github.com:sgomez/miniblog.git\n  Push  URL: git@github.com:sgomez/miniblog.git\n  HEAD branch: master\n  Remote branches:\n    develop new (next fetch will store in remotes/upstream)\n    master  new (next fetch will store in remotes/upstream)\n  Local ref configured for 'git push':\n    master pushes to master (local out of date)\n</code></pre> <p>En este caso, la URI debe ser siempre la del proyecto original. Y ahora para incorporar actualizaciones, usaremos el merge en dos pasos:</p> <pre><code>$ git fetch upstream\n$ git merge upstream/master\n</code></pre> <p>Recordemos que fetch solo trae los cambios que existan en el repositorio remoto sin hacer ning\u00fan cambio en nuestro repositorio. Es la orden merge la que se encarga de que todo est\u00e9 sincronizado. En este caso decimos que queremos fusionar con la rama master que est\u00e1 en el repositorio upstream.</p>"},{"location":"github-avanzado/#creando-nuevas-funcionalidades","title":"Creando nuevas funcionalidades","text":"<p>Vamos a crear una nueva funcionalidad: vamos a a\u00f1adir una licencia de uso. Para ello preferentemente crearemos una nueva rama.</p> <pre><code>$ git checkout -b add-license\n$ echo \"LICENCIA MIT\" &gt; LICESE\n#\u00a0el error es intencionado\n$ git add LICESE\n$ git commit -m \"Archivo de licencia de uso\"\n</code></pre> <p>En principio habr\u00eda que probar que todo funciona bien y entonces integraremos en la rama master de nuestro repositorio y enviamos los cambios a Github:</p> <pre><code>$ git checkout master\n$ git merge add-license --no-ff\n$ git branch -d add-license\n# Borramos la rama que ya no nos sirve para nada\n$ git push --set-upstream origin add-license\n# Enviamos la rama a nuestro repositorio origin\n</code></pre> <p>Si volvemos a Github, veremos que nos avisa de que hemos subido una nueva rama y si queremos crear un pull request.</p> <p></p> <p>Pulsamos y entramos en la petici\u00f3n de Pull Request. Este es el momento para revisar cualquier error antes de enviar al due\u00f1o del repositorio. Como vemos hemos cometido uno, nombrando el fichero, si lo correguimos debemos hacer otro push para ir actualizando la rama. Cuando est\u00e9 lista volvemos aqu\u00ed y continuamos. Hay que dejar una descripci\u00f3n del cambio que vamos a hacer.</p> <p></p> <p>Una vez hemos terminado y nos aseguramos que todo est\u00e1 correcto, pulsamos Send pull request y le llegar\u00e1 nuestra petici\u00f3n al due\u00f1o del proyecto.</p> <p></p> <p>Sin embargo, para esta prueba, no vamos a cambiar el nombre del archivo y dejaremos el error como est\u00e1. As\u00ed de esta manera al administrador del proyecto le llegar\u00e1 el Pull Request y la lista de cambios. Ahora en principio, cabr\u00eda esperar que el administrador aprobara los cambios, pero podr\u00eda pasar que nos indicara que cambiemos algo. En ese caso solo habr\u00eda que modificar la rama y volverla a enviar.</p> <pre><code>$ git mv LICESE LICENSE\n$ git commit -m \"Fix: Nombre de archivo LICENSE\"\n$ git push\n</code></pre> <p>Ahora s\u00ed, el administrador puede aprobar la fusi\u00f3n y borrar la rama del repositorio. El panel de Github permite aceptar los cambios directamente o informa de como hacer una copia de la rama ofrecida por el usuario para hacer cambios, como puede verse en la siguiente imagen.</p> <p></p> <p>Una vez que se han aceptado los cambios, podemos borrar la rama y actualizar nuestro repositorio con los datos del remoto como hicimos antes. \u00bfPor qu\u00e9 actualizar desde el remoto y no desde nuetra rama add-license? Pues porque usualmente el administrador puede haber modificado los cambios que le hemos propuesto, o incluso una tercera persona. Recordemos el cariz colaborativo que tiene Github.</p> <pre><code>$ git checkout master\n$ git branch -d add-license\n# Esto borra la rama local\n$ git push origin --delete add-license\n# Esto borra la rama remota. Tambi\u00e9n puede hacerse desde la web.\n</code></pre>"},{"location":"github-avanzado/#todo-esto-es-algo-complicado","title":"Todo esto es algo complicado...","text":"<p>S\u00ed, lo es, al menos al principio. Git tiene una parte muy sencilla que es el uso del repositorio local (\u00f3rdenes tales como add, rm, mv y commit). El siguiente nivel de complejidad lo componen las \u00f3rdenes para trabajar con ramas y fusionarlas (checkout, branch, merge, rebase) y por \u00faltimo, las que trabajan con repositorios remotos (pull, push, fetch, remote). Adem\u00e1s hay otra serie de \u00f3rdenes para tener informaci\u00f3n (diff, log, status) o hacer operaciones de mantenimiento (fsck, gc). Lo importante para no perderse en Git, es seguir la siguiente m\u00e1xima:</p> <p>No avanzar al siguiente nivel de complejidad, hasta no haber entendido completamente el anterior.</p> <p>Muy poco sentido tiene ponernos a crear ramas en github si a\u00fan no entendemos c\u00f3mo se crean localmente y para que deben usarse. En la parte de referencias hay varios manuales en l\u00ednea, incluso tutoriales interactivos. Tambi\u00e9n hay mucha documentaci\u00f3n disponible en Github que suele venir muy bien explicada. En caso de que tengamos un problema que no sepamos resolver, una web muy buena es StackOverflow. Es una web de preguntas y respuestas para profesionales; es muy dif\u00edcil que se os plantee una duda que no haya sido ya preguntada y respondida en esa web. Eso s\u00ed, el ingl\u00e9s es imprescindible.</p>"},{"location":"github-avanzado/#ultimo-paso-documentacion","title":"\u00daltimo paso, documentaci\u00f3n.","text":"<p>Github permite crear documentaci\u00f3n. En primer lugar, generando un archivo llamado <code>README.md</code>. Tambi\u00e9n permite crear una web propia para el proyecto y, adem\u00e1s, una wiki. Para marcar el texto, se utiliza un lenguaje de marcado de texto denominado Markdown. En la siguiente web hay un tutorial interactivo: http://www.markdowntutorial.com/. Como en principio, no es necesario saber Markdown para poder trabajar con Git o con Github, no vamos a incidir m\u00e1s en este asunto.</p> <p>En el propio GitHub podemos encontrar algunas plantillas que nos sirvan de referencia.</p> <p>Algunos ejemplos:</p> <ul> <li>Plantilla b\u00e1sica</li> <li>Plantilla avanzada</li> </ul>"},{"location":"github-avanzado/#documentacion-del-curso","title":"Documentaci\u00f3n del curso","text":"<p>Esta documentaci\u00f3n est\u00e1 hecha en Markdown y pasada a HTML gracia a la herramienta mkdocs. La plantilla usada es Material for MkDocs.</p> <p>El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)</p>"},{"location":"github-flow/","title":"Flujo de trabajo en GitHub","text":""},{"location":"github-flow/#paso-0-abrir-una-incidencia-issue","title":"Paso 0. Abrir una incidencia (issue)","text":"<p>Habitualmente el trabajo puede partir a ra\u00edz de una reporte por parte de un miembro del equipo o de una persona externa. Para eso tenemos la secci\u00f3n Issues.</p> <p></p> <p>Una issue cuando se crea se compone de un t\u00edtulo y una descripci\u00f3n en Markdown. Si la persona es miembro del equipo, opcionalmente puede asignarle una serie de metadatos: etiquetas (labels), hitos (milestone), proyecto al que pertenece o responsables encargados de cerrar la incidencia.</p> <p></p> <p>Una vez creado, al mismo se le asignar\u00e1 un n\u00famero.\u00e7</p> <p>Example</p> <p>Vamos a crear una incidencia llamada \"Crear archivo de autores\", donde indiquemos que vamos a crear un archivo <code>AUTHORS.md</code> con la lista de desarrolladores del proyecto.</p>"},{"location":"github-flow/#paso-1-crear-una-rama","title":"Paso 1. Crear una rama","text":"<p>Crearemos una rama cada vez que queramos implementar una nueva caracter\u00edstica al proyecto que estamos realizando. La misma puede estar provocada por una incidencia o no.</p> <p>Tip</p> <p>Es una buena costumbre crear en Issues el listado de casos de uso, requisitos, hostorias de usuario o tareas (como lo queramos llamar), para tener un registro del trabajo que llevamos y el que nos queda.</p> <p>El nombre de la rama puede ser el que creamos conveniente, pero hay que intentar ser coherente y usar siempre el mismo m\u00e9todo, sobre todo si trabajamos en equipo.</p> <p>Un m\u00e9todo puede ser el siguiente:</p> <pre><code>$ # tipo-n\u00famero/descripci\u00f3n\n$ git checkout -b feature-1/create-changelog\n$ git checkout -b hotfix-2/updated-database\n</code></pre> <p>En entornos de trabajo multiusuario se puede usar el siguiente:</p> <pre><code>$ # usuario/tipo-n\u00famero/descripci\u00f3n\n$ git checkout -b sgomez/feature-1/create-changelog\n$ git checkout -b sgomez/hotfix-2/updated-database\n</code></pre> <p>De esa manera, podemos seguir f\u00e1cilmente qui\u00e9n abri\u00f3 la rama, en qu\u00e9 consiste y a qu\u00e9 issues est\u00e1 conectada. Pero como decimos es m\u00e1s un convenio que una imposici\u00f3n, pudi\u00e9ndole poner el nombre que queramos.</p> <p>Vamos a crear la rama y los commits correspondientes y subir la rama con push al servidor.</p> <pre><code>$ git checkout -b sgomez/feature-1/create-changelog\n$ git add AUTHORS.md\n$ git commit -m \"A\u00f1adido fichero de autores\"\n</code></pre> <p>El archivo puede contener, por ejemplo, lo siguiente:</p> <pre><code># AUTHORS\n\n* Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n</code></pre> <p>Hacemos push y obtenemos algo como esto:</p> <pre><code>$ git push\nfatal: The current branch sgomez/feature-1/create-changelog has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin sgomez/feature-1/create-changelog\n</code></pre> <p>Como la rama es nueva, git no sabe d\u00f3nde debe hacer push. Le indicamos que debe hacerla en origin y adem\u00e1s que guarde la vinculaci\u00f3n (equivalente al par\u00e1metro -u que vimos en el cap\u00edtulo anterior). Probamos de nuevo:</p> <pre><code>$ git push -u origin sgomez/feature-1/create-changelog\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 1.03 KiB | 1.03 MiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote:\nremote: Create a pull request for 'sgomez/feature-1/create-changelog' on GitHub by visiting:\nremote:      https://github.com/sgomez/taller-de-git/pull/new/sgomez/feature-1/create-changelog\nremote:\nTo github.com:sgomez/taller-de-git.git\n* [new branch]      sgomez/feature-1/create-changelog -&gt; sgomez/feature-1/create-changelog\nBranch 'sgomez/feature-1/create-changelog' set up to track remote branch 'sgomez/feature-1/create-changelog' from 'origin'.\n</code></pre> <p>Ahora la rama ya se ha subido y nos informa, adem\u00e1s, de que podemos crear un Pull Request (PR). Si vamos al enlace que nos aparece veremos lo siguiente:</p> <p></p> <p>Aqu\u00ed podemos informar de en qu\u00e9 consiste la rama que estamos enviando. Si ya tenemos una issue abierta, no es necesario repetir la misma informaci\u00f3n. Podemos hacer referencia con el siguiente texto:</p> <pre><code>Closes #1\n</code></pre> <p>Esto lo que le indica a GitHub que esta PR cierra el issues n\u00famero 1. Cuando se haga el merge de la rama, autom\u00e1ticamente se cerrar\u00e1 la incidencia.</p> <p>Lo hacemos y le damos a crear.</p> <p></p>"},{"location":"github-flow/#paso-2-crear-commits","title":"Paso 2. Crear commits","text":"<p>A partir de ahora podemos seguir creando commits en local y enviarlos hasta que terminemos de trabajar.</p> <p>Editamos el archivo AUTHORS.md .</p> <pre><code># AUTHORS\n\n* Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n* John Doe\n</code></pre> <p>Y mandamos otro commit</p> <pre><code>$ git commit -am \"Actualizado AUTHORS.md\"\n$ git push\n</code></pre> <p>Si volvemos a la p\u00e1gina de PR, veremos que aparece el nuevo commit que acabamos de enviar.</p>"},{"location":"github-flow/#paso-3-discutir","title":"Paso 3. Discutir","text":"<p>GitHub permite que entre los desarrolladores se pueda abrir una discusi\u00f3n sobre el c\u00f3digo, de tal manera que el trabajo de crear la rama sea colaborativo. Se puede incluso pedir revisiones por parte de terceros y que esas revisiones sean obligatorias antes de aceptar los cambios.</p>"},{"location":"github-flow/#paso-4-desplegar","title":"Paso 4. Desplegar","text":"<p>Una vez que hemos terminado de crear la funci\u00f3n de la rama ya podemos incorporar los cambios a master. Este trabajo ya no es necesario hacerlo en local y GitHub nos proporciona 3 maneras de hacerlo:</p> <p></p>"},{"location":"github-flow/#crear-un-merge-commit","title":"Crear un merge commit","text":"<p>Esta opci\u00f3n es el equivalente a hacer lo siguiente en nuestro repositorio:</p> <pre><code>$ git checkout master\n$ git merge --no-ff sgomez/feature-1/create-changelog\n$ git push\n</code></pre> <p>Es decir, el equivalente a hacer un merge entre nuestra rama y master.</p> <p>Info</p> <p>GitHub siempre desactiva el fast forward.</p>"},{"location":"github-flow/#crear-un-rebase-y-merge","title":"Crear un rebase y merge","text":"<p>Esta opci\u00f3n es el equivalente a hacer lo siguiente en nuestro repositorio</p> <pre><code>$ git rebase master\n$ git checkout master\n$ git merge --no-ff sgomez/feature-1/create-changelog\n$ git push\n</code></pre> <p>Es decir, nos aseguramos de que nuestra rama est\u00e1 al final de master haciendo rebase, como vimos en el cap\u00edtulo de ramas, y posteriormente se hace el merge.</p>"},{"location":"github-flow/#crear-un-squash-commit-y-un-merge","title":"Crear un squash commit y un merge","text":"<p>Esta opci\u00f3n es el equivalente a hacer lo siguiente en nuestro repositorio:</p> <pre><code>$ git checkout master\n$ git merge --squash sgomez/feature-1/create-changelog\n$ git push\n</code></pre> <p>Esta opci\u00f3n es algo especial. En vez de aplicar cada uno de los commits en la rama master, ya sea directamente (fast forward) o no, lo que hace es crear un solo commit con los cambios de todos los commits de la rama. El efecto final es como si en la rama solo hubiera producido un solo commit.</p> <p>Vamos a seleccionar este \u00faltimo (squash and merge) y le damos al bot\u00f3n para activarlo. Nos saldr\u00e1 una caja para que podamos crear una descripci\u00f3n del commit y le damos a confirmar.</p> <p></p> <p>Ya hemos terminado y nos aparecer\u00e1 una opci\u00f3n para borrar la rama, lo m\u00e1s recomendado para no tener ramas obsoletas.</p> <p>Las consecuencias de esta acci\u00f3n son las siguientes:</p> <ol> <li>El PR aparecer\u00e1 como estado merged y en la lista de PR como cerrado.</li> <li>El issue que abrimos se habr\u00e1 cerrado autom\u00e1ticamente.</li> <li>En el listado de commits aparecer\u00e1 solo uno con un enlace al PR (en vez de los dos commits que hicimos).</li> </ol>"},{"location":"github-flow/#paso-5-sincronizar","title":"Paso 5. Sincronizar","text":"<p>Hemos cambiado el repositorio en GitHub, pero nuestra rama master no contiene los mismos cambios que el de origin. As\u00ed que nos toca sincronizar y borrar la rama obsoleta:</p> <pre><code>$ git checkout master\n$ git pull --rebase --autostash\n$ git branch -D sgomez/feature-1/create-changelog\n</code></pre> <p>Info</p> <p>\u00bfPor qu\u00e9 squash and merge y no un merge o rebase? De nuevo depende de los gustos de cada equipo de desarrollo. Las cracter\u00edsticas de squash es que elimina (relativamente) rastros de errores intermedios mientras se implementaba la rama, deja menos commits en la rama master y nos enlace al PR donde se implementaron los cambios.</p> <p>Para algunas personas estas caracter\u00edsticas son unas ventajas, para otras no. Lo mejor es experimentar cada opci\u00f3n y cada uno decida como quiere trabajar.</p>"},{"location":"github-zenodo/","title":"Citar proyectos en GitHub","text":"<p>Extra\u00eddo de la gu\u00eda oficial de GitHub.</p> <p>A trav\u00e9s de una aplicaci\u00f3n de terceros (Zenodo, financiado por el CERN), es posible crear un DOI para uno de nuestros proyectos.</p> <p>Estos son los pasos</p>"},{"location":"github-zenodo/#paso-1-elegir-un-repositorio","title":"Paso 1. Elegir un repositorio","text":"<p>Este repositorio debe ser abierto (p\u00fablico), o de lo contrario Zenodo no podr\u00e1 acceder al mismo. Hay que recordar escoger una licencia para el proyecto. Esta web puede ayudarnos http://choosealicense.com/.</p>"},{"location":"github-zenodo/#paso-2-entrar-en-zenodo","title":"Paso 2. Entrar en Zenodo","text":"<p>Iremos a Zenodo y haremos login con GitHub. Lo \u00fanico que tenemos que hacer en esta parte es autorizar a Zenodo a conectar con nuestra cuenta de GitHub.</p> <p>Important</p> <p>Si deseas archivar un repositorio que pertenece a una organizaci\u00f3n en GitHub, deber\u00e1s asegurarte de que el administrador de la organizaci\u00f3n haya habilitado el acceso de terceros a la aplicaci\u00f3n Zenodo.</p>"},{"location":"github-zenodo/#paso-3-seleccionar-los-repositorios","title":"Paso 3. Seleccionar los repositorios","text":"<p>En este punto, hemos autorizado a Zenodo para configurar los permisos necesarios para permitir el archivado y la emisi\u00f3n del DOI. Para habilitar esta funcionalidad, simplemente haremo clic en el bot\u00f3n que est\u00e1 junto a cada uno de los repositorios que queremos archivar.</p> <p>Important</p> <p>Zenodo solo puede acceder a los repositorios p\u00fablicos, as\u00ed que debemos asegurarnos de que el repositorio que deseamos archivar sea p\u00fablico.</p>"},{"location":"github-zenodo/#paso-4-crear-una-nueva-release","title":"Paso 4. Crear una nueva release","text":"<p>Por defecto, Zenodo realiza un archivo de nuestro repositorio de GitHub cada vez que crea una nueva versi\u00f3n. Como a\u00fan no tenemos ninguna, tenemos que volver a la vista del repositorio principal y hacer clic en el elemento del encabezado de versiones (releases).</p>"},{"location":"github-zenodo/#paso-5-acunar-un-doi","title":"Paso 5. Acu\u00f1ar un DOI","text":"<p>Antes de que Zenodo pueda emitir un DOI para nuestro repositorio, deberemos proporcionar cierta informaci\u00f3n sobre el repositorio de GitHub que acaba de archivar.</p> <p>Una vez que estemos satisfechos con la descripci\u00f3n, heremos clic en el bot\u00f3n publicar.</p>"},{"location":"github-zenodo/#paso-6-publicar","title":"Paso 6. Publicar","text":"<p>De vuelta a nuestra p\u00e1gina de Zenodo, ahora deber\u00edamos ver el repositorio listado con una nueva insignia que muestra nuestro nuevo DOI.</p> <p>Tip</p> <p>Podemos colocar la insigna en nuestro proyecto. Para eso haremos clic en la imagen DOI gris y azul. Se abrir\u00e1 una ventana emergente y el texto que aparece como Markdown es el que deberemos copiar en nuestro archivo README.md.</p>"},{"location":"github/","title":"Github","text":"<p>Github es lo que se denomina una forja, un repositorio de proyectos que usan Git como sistema de control de versiones. Es la forja m\u00e1s popular, ya que alberga m\u00e1s de 10 millones de repositorios. Debe su popularidad a sus funcionalidades sociales, principalmente dos: la posibilidad de hacer forks de otros proyectos y la posibilidad de cooperar aportando c\u00f3digo para arreglar errores o mejorar el c\u00f3digo. Si bien, no es que fuera una novedad, s\u00ed lo es lo f\u00e1cil que resulta hacerlo. A ra\u00edz de este proyecto han surgido otros como Gitorius o Gitlab, pero Github sigue siendo el m\u00e1s popular y el que tiene mejores y mayores caracter\u00edsticas. algunas de estas son:</p> <ul> <li>Un wiki para documentar el proyecto, que usa MarkDown como lenguaje de marca.</li> <li>Un portal web para cada proyecto.</li> <li>Funcionalidades de redes sociales como followers.</li> <li>Gr\u00e1ficos estad\u00edsticos.</li> <li>Revisi\u00f3n de c\u00f3digo y comentarios.</li> <li>Sistemas de seguimiento de incidencias.</li> </ul> <p>Lo primero es entrar en el portal (https://github.com/) para crearnos una cuenta si no la tenemos a\u00fan.</p>"},{"location":"github/#tu-clave-publicaprivada","title":"Tu clave p\u00fablica/privada","text":"<p>Muchos servidores Git utilizan la autentificaci\u00f3n a trav\u00e9s de claves p\u00fablicas SSH. Y, para ello, cada usuario del sistema ha de generarse una, si es que no la tiene ya. El proceso para hacerlo es similar en casi cualquier sistema operativo. Ante todo, asegurarte que no tengas ya una clave. (comprueba que el directorio <code>$HOME/usuario/.ssh</code> no tiene un archivo id_dsa.pub o id_rsa.pub).</p> <p>Para crear una nueva clave usamos la siguiente orden:</p> <pre><code>$ ssh-keygen -t rsa -C \"Cuenta Thinstation\"\n</code></pre> <p>Warning</p> <p>Tu clave RSA te identifica contra los repositorios remotos, aseg\u00farate de no compartir la clave privada con nadie. Por defecto la clave se crea como solo lectura.</p>"},{"location":"github/#configuracion","title":"Configuraci\u00f3n","text":"<p>Vamos a aprovechar para a\u00f1adir la clave RSA que generamos antes, para poder acceder desde git a los repositorios. Para ellos nos vamos al men\u00fa de configuraci\u00f3n de usuario (Settings)</p> <p></p> <p>Nos vamos al men\u00fa 'SSH and GPG Keys' y a\u00f1adimos una nueva clave. En Title indicamos una descripci\u00f3n que nos ayude a saber de d\u00f3nde procede la clave y en key volcamos el contenido del archivo <code>~/.ssh/id_rsa.pub</code>. Y guardamos la clave.</p> <p></p> <p>Con esto ya tendriamos todo nuestro entorno para poder empezar a trabajar desde nuestro equipo.</p>"},{"location":"github/#clientes-graficos-para-github","title":"Clientes gr\u00e1ficos para GitHub","text":"<p>Adem\u00e1s, para Github existe un cliente propio tanto para Windows como para MacOSX:</p> <ul> <li> <p>Cliente Windows: http://windows.github.com/</p> </li> <li> <p>Cliente MacOSX: http://mac.github.com/</p> </li> </ul> <p>Para Linux no hay cliente propio, pero s\u00ed hay plugin para la mayor\u00eda de editores de texto como atom, netbeans, eclipe o los editores de jetbrains.</p> <p>De todas maneras, estos clientes solo tienen el fin de facilitar el uso de Github, pero no son necesarios para usarlo. Es perfectamente v\u00e1lido usar el cliente de consola de Git o cualquier otro cliente gen\u00e9rico para Git. Uno de los m\u00e1s usados actualmente es GitKraken.</p>"},{"location":"github/#crear-un-repositorio","title":"Crear un repositorio","text":"<p>Vamos a crear un repositorio donde guardar nuestro proyecto. Para ello pulsamos el signo <code>+</code> que hay en la barra superior y seleccionamos <code>New repository</code>.</p> <p>Ahora tenemos que designar un nombre para nuestro repositorio, por ejemplo: 'taller-de-git'.</p> <p></p> <p>Nada m\u00e1s crear el repositorio nos saldr\u00e1 una pantalla con instrucciones precisas de como proceder a continuaci\u00f3n.</p> <p>B\u00e1sicamente podemos partir de tres situaciones:</p> <ol> <li>Todav\u00eda no hemos creado ning\u00fan repositorio en nuestro equipo.</li> <li>Ya tenemos un repositorio creado y queremos sincronizarlo con Github.</li> <li>Queremos importar un repositorio de otro sistema de control de versiones distinto.</li> </ol> <p></p> <p>Nuestra situaci\u00f3n es la segunda, as\u00ed que nos aseguramos de que hemos elegido SSH como protocolo. A continuaci\u00f3n pulsamos el icono del portapapeles y ejecutamos las dos ordenes que nos indica la web en nuestro terminal.</p> <pre><code>$ git remote add origin git@github.com:sgomez/taller-de-git.git\n$ git push -u origin master\nCounting objects: 33, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (24/24), done.\nWriting objects: 100% (33/33), 3.35 KiB | 1.12 MiB/s, done.\nTotal 33 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), done.\nTo github.com:sgomez/taller-de-git.git\n * [new branch]      master -&gt; master\nBranch master set up to track remote branch master from origin by rebasing.\n</code></pre> <p>Si recargamos la p\u00e1gina veremos que ya aparece nuestro proyecto.</p> <p></p>"},{"location":"github/#clonar-un-repositorio","title":"Clonar un repositorio","text":"<p>Una vez que ya tengamos sincronizado el repositorio contra Github, eventualmente vamos a querer descargarlo en otro de nuestros ordenadores para poder trabajar en \u00e9l. Esta acci\u00f3n se denomina clonar y para ello usaremos la orden <code>git clone</code>.</p> <p>En la p\u00e1gina principal de nuestro proyecto podemos ver un bot\u00f3n que indica <code>Clone or download</code>. Si la pulsamos nos da, de nuevo, la opci\u00f3n de elegir entre clonar con ssh o https. Recordad que si est\u00e1is en otro equipo y quer\u00e9is seguir utilizando ssh deber\u00e9is generar otra para de claves privada/p\u00fablica como hicimos en la secci\u00f3n de Aspectos b\u00e1sicos de Git y instalarla en nuestro perfil de Github, como vimos anteriormente.</p> <p>Para clonar nuestro repositorio y poder trabajar con \u00e9l todo lo que debemos hacer es lo siguiente:</p> <pre><code>$ git clone git@github.com:sgomez/taller-de-git.git\n$ cd taller-de-git\n</code></pre>"},{"location":"github/#ramas-remotas","title":"Ramas remotas","text":"<p>Si ahora vemos el estado de nuestro proyecto veremos algo similar a esto:</p> <pre><code>$ git hist --all\n* 2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola (HEAD -&gt; master, origin/master) [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Aparece que hay una nueva rama llamada <code>origin/master</code>. Esta rama indica el estado de sincronizaci\u00f3n de nuestro repositorio con un repositorio remoto llamado origin. En este caso el de Github.</p> <p>Info</p> <p>Por norma se llama autom\u00e1ticamente origin al primer repositorio con el que sincronizamos nuestro repositorio.</p> <p>Podemos ver la configuraci\u00f3n de este repositorio remoto con la orden <code>git remote</code>:</p> <pre><code>$ git remote show origin\n* remote origin\n  Fetch URL: git@github.com:sgomez/taller-de-git.git\n  Push  URL: git@github.com:sgomez/taller-de-git.git\n  HEAD branch: master\n  Remote branch:\n    master tracked\n  Local ref configured for 'git push':\n    master pushes to master (up to date)\n</code></pre> <p>De la respuesta tenemos que fijarnos en las l\u00edneas que indican fetch y push puesto que son las acciones de sincronizaci\u00f3n de nuestro repositorio con el remoto. Mientras que fetch se encarga de traer los cambios desde el repositorio remoto al nuestro, push los env\u00eda.</p>"},{"location":"github/#enviando-actualizaciones","title":"Enviando actualizaciones","text":"<p>Vamos a a\u00f1adir una licencia a nuestra aplicaci\u00f3n. Creamos un fichero LICENSE con el siguiente contenido:</p> <pre><code>MIT License\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> <p>Y a\u00f1adidos y confirmamos los cambios:</p> <pre><code>$ git add LICENSE\n$ git commit -m \"A\u00f1adida licencia\"\n[master 3f5cb1c] A\u00f1adida licencia\n 1 file changed, 21 insertions(+)\n create mode 100644 LICENSE\n$ git hist --all\n* 3f5cb1c 2013-06-16 | A\u00f1adida licencia (HEAD -&gt; master) [Sergio G\u00f3mez]\n* 2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola (origin/master) [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Viendo la historia podemos ver como nuestro master no est\u00e1 en el mismo punto que <code>origin/master</code>. Si vamos a la web de Github veremos que <code>LICENSE</code> no aparece a\u00fan. As\u00ed que vamos a enviar los cambios con la primera de las acciones que vimos <code>git push</code>:</p> <pre><code>$ git push -u origin master\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 941 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@github.com:sgomez/taller-de-git.git\n   2eab8ca..3f5cb1c  master -&gt; master\nBranch master set up to track remote branch master from origin.\n</code></pre> <p>Info</p> <p>La orden <code>git push</code> necesita dos par\u00e1metros para funcionar: el repositorio y la rama destino. As\u00ed que realmente lo que ten\u00edamos que haber escrito es:</p> <pre><code>$ git push origin master\n</code></pre> <p>Para ahorrar tiempo escribiendo git nos deja vincular nuestra rama local con una rama remota, de tal manera que no tengamos que estar siempre indic\u00e1ndolo. Eso es posible con el par\u00e1metro <code>--set-upstream</code> o <code>-u</code> en forma abreviada.</p> <pre><code>$ git push -u origin master\n</code></pre> <p>Si repasas las \u00f3rdenes que te indic\u00f3 Github que ejecutaras ver\u00e1s que el par\u00e1metro <code>-u</code> estaba presente y por eso no ha sido necesario indicar ning\u00fan par\u00e1metro al hacer push.</p>"},{"location":"github/#recibiendo-actualizaciones","title":"Recibiendo actualizaciones","text":"<p>Si trabajamos con m\u00e1s personas, o trabajamos desde dos ordenadores distintos, nos encontraremos con que nuestro repositorio local es m\u00e1s antiguo que el remoto. Necesitamos descargar los cambios para poder incorporarlos a nuestro directorio de trabajo.</p> <p>Para la prueba, Github nos permite editar archivos directamente desde la web. Pulsamos sobre el archivo <code>README.md</code>. En la vista del archivo, veremos que aparece el icono de un l\u00e1piz. Esto nos permite editar el archivo.</p> <p></p> <p>Info</p> <p>Los archivos con extensi\u00f3n <code>.md</code> est\u00e1n en un formato denominado MarkDown. Se trata de un lenguaje de marca que nos permite escribir texto enriquecido de manera muy sencilla.</p> <p>Dispones de un tutorial aqu\u00ed: https://www.markdowntutorial.com/</p> <p>Modificamos el archivo como queramos, por ejemplo, a\u00f1adiendo nuestro nombre:</p> <pre><code># Curso de GIT\n\nEste proyecto contiene el curso de introducci\u00f3n a GIT\n\nDesarrollado por Sergio G\u00f3mez.\n</code></pre> <p></p> <p>El cambio quedar\u00e1 incorporado al repositorio de Github, pero no al nuestro. Necesitamos traer la informaci\u00f3n desde el servidor remoto. La orden asociada es <code>git fetch</code>:</p> <pre><code>$ git fetch\n$ git hist --all\n* cbaf831 2013-06-16 | Actualizado README.md (origin/master) [Sergio G\u00f3mez]\n* 3f5cb1c 2013-06-16 | A\u00f1adida licencia (HEAD -&gt; master) [Sergio G\u00f3mez]\n* 2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Ahora vemos el caso contrario, tenemos que <code>origin/master</code> est\u00e1 por delante que <code>HEAD</code> y que la rama <code>master</code> local.</p> <p>Ahora necesitamos incorporar los cambios de la rama remota en la local. La forma de hacerlo lo vimos en el cap\u00edtulo anterior usando <code>git merge</code> o <code>git rebase</code>.</p> <p>Habitualmente se usa <code>git merge</code>:</p> <pre><code>$ git merge origin/master\nUpdating 3f5cb1c..cbaf831\nFast-forward\n README.md | 2 ++\n 1 file changed, 2 insertions(+)\n$ git hist --all\n* cbaf831 2013-06-16 | Actualizado README.md (HEAD -&gt; master, origin/master) [Sergio G\u00f3mez]\n* 3f5cb1c 2013-06-16 | A\u00f1adida licencia [Sergio G\u00f3mez]\n* 2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Como las operaciones de traer cambios (<code>git fetch</code>) y de mezclar ramas (<code>git merge</code> o <code>git rebase</code>) est\u00e1n muy asociadas, git nos ofrece una posibilidad para ahorrar pasos que es la orden <code>git pull</code> que realiza las dos acciones simult\u00e1neamente.</p> <p>Para probar, vamos a editar de nuevo el archivo README.md y a\u00f1adimos algo m\u00e1s:</p> <pre><code># Curso de GIT\n\nEste proyecto contiene el curso de introducci\u00f3n a GIT del Aula de Software Libre.\n\nDesarrollado por Sergio G\u00f3mez.\n</code></pre> <p>Como mensaje del commit: 'Indicado que se realiza en el ASL'.</p> <p>Y ahora probamos a actualizar con <code>git pull</code>:</p> <pre><code>$ git pull\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom github.com:sgomez/taller-de-git\n   cbaf831..d8922e4  master     -&gt; origin/master\nFirst, rewinding head to replay your work on top of it...\nFast-forwarded master to d8922e4ffa4f87553b03e77df6196b7e496bfec4.\n$ git hist --all\n* d8922e4 2013-06-16 | Indicado que se realiza en el ASL (HEAD -&gt; master, origin/master) [Sergio G\u00f3mez]\n* cbaf831 2013-06-16 | Actualizado README.md [Sergio G\u00f3mez]\n* 3f5cb1c 2013-06-16 | A\u00f1adida licencia [Sergio G\u00f3mez]\n* 2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Vemos que los cambios se han incorporado y que las ramas remota y local de master est\u00e1n sincronizadas.</p>"},{"location":"github/#problemas-de-sincronizacion","title":"Problemas de sincronizaci\u00f3n","text":""},{"location":"github/#no-puedo-hacer-push","title":"No puedo hacer push","text":"<p>Al intentar subir cambios nos podemos encontrar un mensaje como este:</p> <pre><code>$ git push\ngit push\nTo git@github.com:sgomez/taller-de-git.git\n ! [rejected]        master -&gt; master (fetch first)\nerror: failed to push some refs to 'git@github.com:sgomez/taller-de-git.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n</code></pre> <p>La causa es que el repositorio remoto tambi\u00e9n se ha actualizado y nosotros a\u00fan no hemos recibido esos cambios. Es decir, ambos repositorios se han actualizado y el remoto tiene preferencia. Hay un conflicto en ciernes y se debe resolver localmente antes de continuar.</p> <p>Vamos a provocar una situaci\u00f3n donde podamos ver esto en acci\u00f3n. Vamos a modificar el archivo <code>README.md</code> tanto en local como en remoto a trav\u00e9s del interfaz web.</p> <p>En el web vamos a cambiar el t\u00edtulo para que aparezca de la siguiente manera.</p> <pre><code>Curso de GIT, 2020\n</code></pre> <p>En local vamos a cambiar el t\u00edtulo para que aparezca de la siguiente manera.</p> <pre><code>Curso de GIT, febrero\n</code></pre> <p>Question</p> <p>Haz el commit para guardar el cambio en local.</p> Respuesta al ejercicio anterior <p>A\u00f1adimos el fichero actualizado:</p> <pre><code>$ git commit -am \"A\u00f1adido el mes al README\"\n[master 1e8c0b7] A\u00f1adido el mes al README\n1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre> <p>La forma de proceder en este caso es hacer un <code>git fetch</code> y un <code>git rebase</code>. Si hay conflictos deber\u00e1n resolverse. Cuando est\u00e9 todo solucionado ya podremos hacer <code>git push</code>.</p> <p>Info</p> <p>Por defecto <code>git pull</code> lo que hace es un <code>git merge</code>, si queremos hacer <code>git rebase</code> deberemos especificarlos con el par\u00e1metro <code>-r</code>:</p> <pre><code>$ git pull --rebase\n</code></pre> <p>Vamos a hacer el pull con rebase y ver qu\u00e9 sucede.</p> <pre><code>$ git pull --rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: A\u00f1adido el mes al README\nUsing index info to reconstruct a base tree...\nM   README.md\nFalling back to patching base and 3-way merge...\nAuto-merging README.md\nCONFLICT (content): Merge conflict in README.md\nerror: Failed to merge in the changes.\nPatch failed at 0001 A\u00f1adido el mes al README\nhint: Use 'git am --show-current-patch' to see the failed patch\n\nResolve all conflicts manually, mark them as resolved with\n\"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nYou can instead skip this commit: run \"git rebase --skip\".\nTo abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\n</code></pre> <p>Evidentemente hay un conflicto porque hemos tocado el mismo archivo. Se deja como ejercicio resolverlo.</p> Respuesta al ejercicio anterior <p>El contenido del fichero final podr\u00eda ser:</p> <pre><code>Curso de GIT, febrero, 2020\n</code></pre> <p>A continuaci\u00f3n confirmamos los cambios y los enviamos al servidor</p> <pre><code>$ git add README.md\n$ git rebase --continue\n$ git push\n</code></pre> <p>Warning</p> <p>\u00bfPor qu\u00e9 hemos hecho rebase en master si a lo largo del curso hemos dicho que no se debe cambiar la linea principal?</p> <p>B\u00e1sicamente hemos dicho que lo que no debemos hacer es modificar la l\u00ednea temporal compartida. En este caso nuestros cambios en master solo estaban en nuestro repositorio, porque al fallar el env\u00edo nadie m\u00e1s ha visto nuestras actualizaciones. Al hacer rebase estamos deshaciendo nuestros cambios, bajarnos la \u00faltima actualizaci\u00f3n compartida de master y volvi\u00e9ndolos a aplicar. Con lo que realmente la historia compartida no se ha modificado.</p> <p>Este es un problema que debemos evitar en la medida de lo posible. La menor cantidad de gente posible debe tener acceso de escritura en master y las actualizaciones de dicha rama deben hacerse a trav\u00e9s de ramas secundarias y haciendo merge en master como hemos visto en el cap\u00edtulo de ramas.</p>"},{"location":"github/#no-puedo-hacer-pull","title":"No puedo hacer pull","text":"<p>Al intentar descargar cambios nos podemos encontrar un mensaje como este:</p> <pre><code>$ git pull\nerror: Cannot pull with rebase: You have unstaged changes.\n</code></pre> <p>O como este:</p> <pre><code>$ git pull\nerror: Cannot pull with rebase: Your index contains uncommitted changes.\n</code></pre> <p>B\u00e1sicamente lo que ocurre es que tenemos cambios sin confirmar en nuestro espacio de trabajo. Una opci\u00f3n es confirmar (commit) y entonces proceder como el caso anterior.</p> <p>Pero puede ocurrir que a\u00fan estemos trabajando todav\u00eda y no nos interese confirmar los cambios, solo queremos sincronizar y seguir trabajando. Para casos como estos git ofrece una pila para guardar cambios temporalmente. Esta pila se llama stash y nos permite restaurar el espacio de trabajo al \u00faltimo commit.</p> <p>De nuevo vamos a modificar nuestro proyecto para ver esta situaci\u00f3n en acci\u00f3n.</p> <p>Example</p> <p>En remoto borra el a\u00f1o de la fecha y en local borra el mes. Pero esta vez no hagas commit en local. El archivo solo debe quedar modificado.</p> <p>La forma de proceder es la siguiente:</p> <pre><code>$ git stash save # Guardamos los cambios en la pila\n$ git pull # Sincronizamos con el repositorio remoto, -r para hacer rebase puede ser requerido\n$ git stash pop # Sacamos los cambios de la pila\n</code></pre> <p>Info</p> <p>Como ocurre habitualmente, git nos proporciona una forma de hacer todos estos pasos de una sola vez. Para ello tenemos que ejecutar lo siguiente:</p> <pre><code>$ git pull --autostash\n</code></pre> <p>En general no es mala idea ejecutar lo siguiente si somos conscientes, adem\u00e1s, de que tenemos varios cambios sin sincronizar:</p> <pre><code>$ git pull --autostash --rebase\n</code></pre> <p>Podr\u00eda darse el caso de que al sacar los cambios de la pila hubiera alg\u00fan conflicto. En ese caso actuamos como con el caso de merge o rebase.</p> <p>De nuevo este tipo de problemas no deben suceder si nos acostumbramos a trabajar en ramas.</p>"},{"location":"images/","title":"Im\u00e1genes","text":"<p>Las im\u00e1genes son la base de Docker. Nuestros contenedores se iniciar\u00e1n a partir de ellas. Como se indic\u00f3 en la introducci\u00f3n, es una plantilla de solo lectura, que se crea incorporando los requisitos necesarios para cumplir el objetivo para el cual fue creada.</p> <p>Por ejemplo, si estamos creando un proyecto con PHP, incorporar\u00e1 el int\u00e9rprete del lenguaje de PHP. Si es una p\u00e1gina web, incorporar\u00e1 el servidor web (apache, nginx, etc.).</p>"},{"location":"images/#buscar-imagenes","title":"Buscar im\u00e1genes","text":"<p>Crear una imagen desde cero supone un esfuerzo demasiado grande, as\u00ed que lo normal es partir o usar una ya creada.</p> <p>Para ellos buscaremos en los registros, el lugar donde se almacenan. Hay un registro oficial (https://hub.docker.com), pero nada impide a otras organizaciones, o a nosotros mismo, tener un registro propio. Estos registros pueden ser privados o p\u00fablicos.</p> <p>Imaginemos que queremos crear una web con WordPress. Si buscamos en el registro encontraremos una imagen llamada wordpress, con la etiqueta oficial. La recomendaci\u00f3n es que siempre busquemos im\u00e1genes oficiales, est\u00e1n mantenidas y bien documentadas.</p> <p>En la p\u00e1gina encontraremos las diferentes opciones que tiene esta imagen para configurarla, aunque las veremos con m\u00e1s detalle m\u00e1s adelante.</p> <p>Por ahora iniciemos la imagen como se indica:</p> <p>Example</p> <p>Iniciar una imagen de WordPress:</p> <pre><code>docker run -p 8080:80 wordpress\n</code></pre> <p>Y comprobaremos como se inicia el contenedor:</p> <pre><code>$ docker run -p 8080:80 wordpress\nUnable to find image 'wordpress:latest' locally\nlatest: Pulling from library/wordpress\n802b00ed6f79: Pull complete \n59f5a5a895f8: Pull complete \n6898b2dbcfeb: Pull complete \n8e0903aaa47e: Pull complete \n2961af1e196a: Pull complete \n71f7016f79a0: Pull complete \n5e1a48e5719c: Pull complete \n7ae5291984f3: Pull complete \n725b65166f31: Pull complete \ne90b121f9520: Pull complete \nb5a272809bbd: Pull complete \nf045f3ae0e2b: Pull complete \n7f51c9ea2d8e: Pull complete \n5aa9d0ed164a: Pull complete \n8eea44e2bfc7: Pull complete \n48918885026e: Pull complete \n8ac3e8ada01a: Pull complete \nd3da911b920f: Pull complete \n94c7e0af5b20: Pull complete \ne1f39ac90dec: Pull complete \nDigest: sha256:7121cdf8e9f01816653a3b2d2f4fc7bfe1dab956f00db5c7e7689e5f1454029a\nStatus: Downloaded newer image for wordpress:latest\nWordPress not found in /var/www/html - copying now...\nComplete! WordPress has been successfully copied to /var/www/html\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name,     using 10.17.0.1. Set the 'ServerName' directive globally to suppress this message\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name,     using 10.17.0.1. Set the 'ServerName' directive globally to suppress this message\n[DDD mmm dd hh:mm:ss.iiiiii yyyy] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.25     (Debian) PHP/7.2.10 configured -- resuming normal operations\n[DDD mmm dd hh:mm:ss.iiiiii yyyy] [core:notice] [pid 1] AH00094: Command line: 'apache2     -D FOREGROUND'\n</code></pre> <p>Vemos en la l\u00ednea nueva un nuevo par\u00e1metro: <code>-p 8080:80</code>. Por defecto, un contenedor est\u00e1 totalmente aislado. Pero si estamos montando un blog con WordPress vamos a necesitar acceder a \u00e9l desde el navegador.</p> <p>Con el par\u00e1metro <code>-p</code>, versi\u00f3n corta de <code>--publish</code>, podemos indicar que estamos enlazando un puerto de la m\u00e1quina anfitri\u00f3n con el contenedor. En este caso estamos enlazando el puerto 8080 de la m\u00e1quina anfitri\u00f3n con el 80 del contenedor.</p> <p>Info</p> <p>No vamos a explicar todas las opciones posibles, el tutorial ser\u00eda demasiado largo. Puedes consultar la p\u00e1gina del manual con <code>man docker-run</code> o llamando a la ayuda desde el cliente con <code>docker run --help</code>.</p> <p>En este caso, el formato de <code>publish</code> es:</p> <pre><code>    -p, --publish ip:[hostPort]:containerPort | [hostPort:]containerPort\n        Publish a container's port, or range of ports, to the host.\n\n    Both hostPort and containerPort can be specified as a range.  When specifying ranges for both, the number of ports in ranges should be equal.\n\n    Examples: -p 1234-1236:1222-1224, -p 127.0.0.1:$HOSTPORT:$CONTAINERPORT.\n\n    Use docker port(1) to see the actual mapping, e.g. docker port CONTAINER $CONTAINERPORT.\n</code></pre> <p>Vamos a abrir la siguiente p\u00e1gina web en nuestro navegador:</p> <p>http://localhost:8080</p> <p>La cual nos mostrar\u00e1 el asistente de instalaci\u00f3n de WordPress, el cual no vamos a instalar porque necesitamos una base de datos que a\u00fan no tenemos.</p> <p></p> <p>En su lugar vamos a la consola e interrumpimos la ejecuci\u00f3n del contenedor con <code>Control+C</code>:</p> <pre><code>^C[DDD mmm dd hh:mm:ss.iiiiii yyyy] [mpm_prefork:notice] [pid 1] AH00169: caught SIGTERM, shutting down\n</code></pre>"},{"location":"images/#gestion-de-imagenes","title":"Gesti\u00f3n de im\u00e1genes","text":""},{"location":"images/#descarga","title":"Descarga","text":"<p>Las imagenes que nos descargamos se identifican, adem\u00e1s de por el nombre, por una versi\u00f3n. De esa manera podemos tener distintas versiones de una misma imagen. En la p\u00e1gina del registro de WordPress veremos una pesta\u00f1a con el nombre Tags, con las versiones disponibles.</p> <p>Para usar una en concreto se usa dos puntos seguido del nombre de la versi\u00f3n. Si no se indica nada, como hasta ahora, por defecto se descarga la etiquetada como latest.</p> <p>Podemos descargar im\u00e1genes con la orden <code>docker pull</code>:</p> <pre><code>$ docker pull wordpress:latest\nlatest: Pulling from library/wordpress\nDigest: sha256:7121cdf8e9f01816653a3b2d2f4fc7bfe1dab956f00db5c7e7689e5f1454029a\nStatus: Image is up to date for wordpress:latest\n$ \u00a0docker pull wordpress:php7.1\nphp7.1: Pulling from library/wordpress\n802b00ed6f79: Already exists \n59f5a5a895f8: Already exists \n6898b2dbcfeb: Already exists \n8e0903aaa47e: Already exists \n2961af1e196a: Already exists \n71f7016f79a0: Already exists \n5e1a48e5719c: Already exists \n7ae5291984f3: Already exists \n725b65166f31: Already exists \na2d738459b49: Pull complete \n24830994a3eb: Pull complete \nb3807dc98c17: Pull complete \n59365c2968b5: Pull complete \n36bea53859bb: Pull complete \na777908b01b4: Pull complete \nbd3efa4fff20: Pull complete \n662f2add84f7: Pull complete \n4340a5e4d9f8: Pull complete \n2dbeaf456768: Pull complete \nDigest: sha256:2cc529d3d4ac538f8565d18a893bd1308d6f5522422f4696d87267695f69702c\nStatus: Downloaded newer image for wordpress:php7.1\n</code></pre> <p>En el primer caso no hay descarga porque esa versi\u00f3n ya estaba descargada, en la segunda nos descargamos la versi\u00f3n de la imagen que usa php7.1 en vez de php7.2</p>"},{"location":"images/#listado","title":"Listado","text":"<p>Para ver el listado de images disponibles usamos <code>docker images</code>:</p> <pre><code>$\u00a0docker images\nREPOSITORY   TAG     IMAGE ID      CREATED      SIZE\nwordpress    latest  ca0fefec932b  7 days ago   409MB\nwordpress    php7.1  37664bd9863e  7 days ago   400MB\nhello-world  latest  4ab4c602aa5e  2 weeks ago  1.84kB\n</code></pre>"},{"location":"images/#borrado","title":"Borrado","text":"<p>Si queremos dejar de usar alguna imagen usaremos <code>docker rmi</code>:</p> <pre><code>$\u00a0docker rmi wordpress:php7.1 Untagged: wordpress:php7.1\nUntagged: wordpress@sha256:2cc529d3d4ac538f8565d18a893bd1308d6f5522422f4696d87267695f69702c\nDeleted: sha256:37664bd9863efe67a83cb2ff293f1816a9b5f918668ae19ca36b2af3d3b9f62d\nDeleted: sha256:77c97f008777c89455c8e5f248a626b192b62cf07ed1993c9acdfab73be210ee\nDeleted: sha256:14f58345b0bb2efaede03f9424412dce141ea275343305a79952c9c8bda3d1ba\nDeleted: sha256:5902e2becea5be6d672e8a6a84cc66a2f3b8e1b209302a9995de2b9afac8535f\nDeleted: sha256:a5b592bce0a767eed15cce29e5e4a941341a0b8de1633ab8836079c03af31b9e\nDeleted: sha256:6cc2318a4f6975aa87358d9f2852d8b91b335515a1d42ef141af368ee0b6fc05\nDeleted: sha256:c3c8b98ead26315e76cd9625fd59f67cab81afa7810b84a229f4e612097a3db4\nDeleted: sha256:a641d6d5a4f43b035946f9a82c9f126189e8502567bb17c41d25e922a5b314a3\nDeleted: sha256:a7338078acb6f6e8b1a152dabd6e7e47b3e530e1f2e2169b8b69127c9578f8fe\nDeleted: sha256:8f416a21cdea7d5b42d6b799ab4ade2dffe1f6a3b9d83dd02be47a82699922de\nDeleted: sha256:53862f425fbc706f70bd1238a0e929bf6d648547481acfad4910c4c1bde39b95\n</code></pre> <p>Warning</p> <p>Si una imagen est\u00e1 en uso por alg\u00fan contenedor, no nos dejar\u00e1 eliminarla.</p> <pre><code>$\u00a0docker rmi hello-world:latest\nError response from daemon: conflict: unable to remove repository reference \"hello-world:latest\" (must force) - container 5ae8bbb8768d is using its referenced image 4ab4c602aa5e\n</code></pre>"},{"location":"index_docker/","title":"Reconocimiento","text":"<p>Aviso</p> <p>Los apuntes del Tema 6 - Contenedores est\u00e1n basados \u00edntegramente en el taller m\u00e1s abajo nombrado y es justo su reconocimiento.</p> <p>Se reproduce pr\u00e1cticamente \u00edntegro (salvo cuestiones ajenas al objetivo del m\u00f3dulo) porque su licencia as\u00ed lo permite.</p> <p>Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba.</p> <p>Info</p> <p>Se recomienda acudir al evento con tu propio port\u00e1til y con una distribuci\u00f3n GNU/Linux compatible con Docker: Ubuntu, Debian, Fedora o CentOS. Si no dispones de ordenador propio notif\u00edcalo a los organizaci\u00f3n en la web de la actividad.</p> <p>Warning</p> <p>Para evitar demoras innecesarias en el inicio de la actividad es necesario traer ya de casa Docker instalado. Para ello lee el cap\u00edtulo de Instalaci\u00f3n.</p>"},{"location":"index_git/","title":"Inicio","text":"<p>Atenci\u00f3n</p> <p>Los contenidos del Tema 5 - Control de versiones est\u00e1n basados integramente en el curso que se menciona a continuaci\u00f3n.</p> <p>Su licencia original permite la reutilizaci\u00f3n y difusi\u00f3n del mismo.</p> <p></p> <p>Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba.</p> <p>El contenido del mismo es en parte de producci\u00f3n propia, en parte de otros manuales libres que pueden encontrarse en la secci\u00f3n de Referencias.</p>"},{"location":"index_git/#contenido","title":"Contenido","text":"<ul> <li>Inicio</li> <li>Sistemas de control de versiones</li> <li>Introducci\u00f3n a Git</li> <li>Aspectos b\u00e1sicos de Git</li> <li>Uso b\u00e1sico</li> <li>Uso avanzado</li> <li>Ramas</li> <li>Administraci\u00f3n de repositorios</li> <li>Flujo de trabajo con Git (git flow)</li> <li>Github</li> <li>Referencias</li> </ul>"},{"location":"index_git/#agradecimientos","title":"Agradecimientos","text":"<p>Este curso ha sido impartido por las siguientes personas:</p> <ul> <li>Adri\u00e1n L\u00f3pez</li> <li>H\u00e9ctor Romero</li> <li>Javier de Santiago</li> <li>Jos\u00e9 M\u00e1rquez</li> <li>Sergio G\u00f3mez</li> </ul>"},{"location":"index_git/#licencia","title":"Licencia","text":"<p>El material est\u00e1 publicado con licencia Atribuci\u00f3n-NoComercial 4.0 Internacional (CC BY-NC 4.0)</p>"},{"location":"installation/","title":"Instalaci\u00f3n","text":"<p>Existe dos versiones de Docker, una libre y otra que no lo es. Nos ocuparemos exclusivamente de la primera: Docker CE (Community Edition).</p>"},{"location":"installation/#disponibilidad","title":"Disponibilidad","text":"<p>Docker CE est\u00e1 disponible para los siguientes sistemas GNU/Linux: CentOS, Debian, Fedora y Ubuntu. No todas est\u00e1n en m\u00faltiples arquitecturas, pero s\u00ed todas soportan x86_64/amd64. Si tienes otra arquitectura u otro sistema es mejor que uses una m\u00e1quina virtual para arrancar una distribuci\u00f3n compatible.</p> <p>Para m\u00e1s informaci\u00f3n sobre sistemas privativos soportados, leer la secci\u00f3n de plataformas soportadas de la documentaci\u00f3n oficial.</p>"},{"location":"installation/#instalacion_1","title":"Instalaci\u00f3n","text":"<p>Debido a que, dependiendo de la distribuci\u00f3n, la forma de instalarlo difiere, es mejor consultar la documentaci\u00f3n oficial para saber como instalar Docker en tu m\u00e1quina.</p> <ul> <li>Ubuntu: https://docs.docker.com/install/linux/docker-ce/ubuntu/</li> <li>Debian: https://docs.docker.com/install/linux/docker-ce/debian/</li> <li>CentOS: https://docs.docker.com/install/linux/docker-ce/centos/</li> <li>Fedora: https://docs.docker.com/install/linux/docker-ce/fedora/</li> </ul> <p>Si quieres instalar y probar Linux por primera vez, te recomendamos que uses una versi\u00f3n LTS de Ubuntu, por ser f\u00e1cil de instalar y tener un ciclo de mantenimiento de seguridad ampliado. Obviamente necesitas tener conexi\u00f3n a Internet para instalar y probar Docker.</p> <p>Para saber si tienes Docker bien instalado, los tutoriales oficiales siempre te indican inicies un contenedor de ejemplo. Esto es lo que sucede:</p> <p>Example</p> <p>Los c\u00f3digos de ejemplo ir\u00e1n acompa\u00f1ados de una caja como esta para poder copiar y pegar los comandos.</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>El resultado es el siguiente:</p> <pre><code>$ sudo docker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\nd1725b59e92d: Pull complete Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n1. The Docker client contacted the Docker daemon.\n2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n$ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\nhttps://hub.docker.com/\n\nFor more examples and ideas, visit:\nhttps://docs.docker.com/get-started/\n</code></pre> <p>En la l\u00ednea 1 estamos ejecutando el cliente de Docker, y estamos indicando que queremos ejecutar un contenedor a partir de la imagen hello-world del registro p\u00fablico de Docker.</p> <p>Si es la primera vez que hemos ejecutado esa imagen, nos aparecer\u00e1 la l\u00ednea 2, que indica que la imagen no puede ser encontrada y va a proceder a buscarla, por defecto, en el registro p\u00fablico. Si tenemos conexi\u00f3n a Internet se descargar\u00e1 la imagen  (l\u00ednea 6) y autom\u00e1ticamente crear\u00e1 un contenedor.</p> <p>Tanto si se ha descargado la imagen o ya estaba descargada, el contenedor se ejecutar\u00e1, obteniendo el texto de bienvenida que se ve en el cuadro anterior.</p>"},{"location":"installation/#configuracion-del-usuario","title":"Configuraci\u00f3n del usuario","text":"<p>Si estamos usando Docker en nuestro ordenador personal, podemos configurar nuestro usuario para usar el cliente sin tener que poner sudo delante. Para ello ejecuta lo siguiente:</p> <p>Example</p> <p>A\u00f1ade tu usuario al grupo de docker.</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>Para que los nuevos permisos surtan efecto, debes cerrar y volver a abrir la sesi\u00f3n. Para problemas relacionados con los permisos visitad la p\u00e1gina del manual oficial.</p>"},{"location":"installation/#requisitos-del-curso","title":"Requisitos del curso","text":""},{"location":"installation/#imagenes","title":"Im\u00e1genes","text":"<p>Es necesario traer ya instaladas ciertas im\u00e1genes de contenedores. Ejecuta los siguientes comandos en tu equipo (si te da error de permisos aseg\u00farate que has hecho el apartado anterior y abierto y cerrado la sesi\u00f3n).</p> <p>Example</p> <p>Instalar WordPress:</p> <pre><code>docker pull wordpress:latest\n</code></pre> <p>Example</p> <p>Instalar MariaDB:</p> <pre><code>docker pull mariadb:latest\n</code></pre>"},{"location":"installation/#herramientas","title":"Herramientas","text":"<p>Tambi\u00e9n es necesario traer una herramienta llamada <code>Docker Compose</code>. Puedes instalarla con las instrucciones que hay en la p\u00e1gina de Instalaci\u00f3n de Docker Compose.</p> <p>Sin embargo, si usas Ubuntu o Debian puedes instalarlo de forma m\u00e1s f\u00e1cil con apt:</p> <p>Example</p> <p>Instalaci\u00f3n de Docker Compose:</p> <pre><code>sudo apt install docker-compose\n</code></pre>"},{"location":"introduccion/","title":"Introducci\u00f3n a git","text":"<p>Git es un sistema de control de versiones distribuido que se diferencia del resto en el modo en que modela sus datos. La mayor\u00eda de los dem\u00e1s sistemas almacenan la informaci\u00f3n como una lista de cambios en los archivos, mientras que Git modela sus datos m\u00e1s como un conjunto de instant\u00e1neas de un mini sistema de archivos.</p> <p></p> <p></p>"},{"location":"introduccion/#los-tres-estados","title":"Los tres estados","text":"<p>Git tiene tres estados principales en los que se pueden encontrar tus archivos: confirmado (committed), modificado (modified), y preparado (staged). Confirmado significa que los datos est\u00e1n almacenados de manera segura en tu base de datos local. Modificado significa que has modificado el archivo pero todav\u00eda no lo has confirmado a tu base de datos. Preparado significa que has marcado un archivo modificado en su versi\u00f3n actual para que vaya en tu pr\u00f3xima confirmaci\u00f3n.</p> <p>Esto nos lleva a las tres secciones principales de un proyecto de Git: el directorio de Git (Git directory), el directorio de trabajo (working directory), y el \u00e1rea de preparaci\u00f3n (staging area).</p> <p></p>"},{"location":"introduccion/#flujos-de-trabajo-distribuidos-con-git","title":"Flujos de trabajo distribuidos con git","text":"<p>Hemos visto en qu\u00e9 consiste un entorno de control de versiones distribuido, pero m\u00e1s all\u00e1 de la simple definici\u00f3n, existe m\u00e1s de una manera de gestionar los repositorios. Estos son los flujos de trabajo m\u00e1s comunes en Git.</p>"},{"location":"introduccion/#flujo-de-trabajo-centralizado","title":"Flujo de trabajo centralizado","text":"<p>Existe un \u00fanico repositorio o punto central que guarda el c\u00f3digo y todo el mundo sincroniza su trabajo con \u00e9l. Si dos desarrolladores clonan desde el punto central, y ambos hacen cambios; tan solo el primero de ellos en enviar sus cambios de vuelta lo podr\u00e1 hacer limpiamente. El segundo desarrollador deber\u00e1 fusionar previamente su trabajo con el del primero, antes de enviarlo, para evitar el sobreescribir los cambios del primero</p> <p></p>"},{"location":"introduccion/#flujo-de-trabajo-del-gestor-de-integraciones","title":"Flujo de trabajo del Gestor-de-Integraciones","text":"<p>Al permitir m\u00faltiples repositorios remotos, en Git es posible tener un flujo de trabajo donde cada desarrollador tenga acceso de escritura a su propio repositorio p\u00fablico y acceso de lectura a los repositorios de todos los dem\u00e1s. Habitualmente, este escenario suele incluir un repositorio can\u00f3nico, representante \"oficial\" del proyecto.</p> <p></p> <p>Info</p> <p>Este modelo se puso muy de moda a ra\u00edz de la forja GitHub que se ver\u00e1 m\u00e1s adelante.</p>"},{"location":"introduccion/#flujo-de-trabajo-con-dictador-y-tenientes","title":"Flujo de trabajo con Dictador y Tenientes","text":"<p>Es una variante del flujo de trabajo con m\u00faltiples repositorios. Se utiliza generalmente en proyectos muy grandes, con cientos de colaboradores. Un ejemplo muy conocido es el del kernel de Linux. Unos gestores de integraci\u00f3n se encargan de partes concretas del repositorio; y se denominan tenientes. Todos los tenientes rinden cuentas a un gestor de integraci\u00f3n; conocido como el dictador benevolente. El repositorio del dictador benevolente es el repositorio de referencia, del que recuperan (pull) todos los colaboradores.</p> <p></p>"},{"location":"introduction/","title":"Introducci\u00f3n","text":"<p>Seg\u00fan la Wikipedia: \"Docker es un proyecto de c\u00f3digo abierto que automatiza el despliegue de aplicaciones dentro de contenedores de software, proporcionando una capa adicional de abstracci\u00f3n y automatizaci\u00f3n de virtualizaci\u00f3n de aplicaciones en m\u00faltiples sistemas operativos. Docker utiliza caracter\u00edsticas de aislamiento de recursos del kernel Linux, tales como cgroups y espacios de nombres (namespaces) para permitir que 'contenedores' independientes se ejecuten dentro de una sola instancia de Linux, evitando la sobrecarga de iniciar y mantener m\u00e1quinas virtuales.\"1.</p> <p>Esto es una descripci\u00f3n formal, pero para enterarte de qu\u00e9 es docker sigue leyendo:</p>"},{"location":"introduction/#a-quien-le-puede-interesar-usar-docker","title":"\u00bfA qui\u00e9n le puede interesar usar docker?","text":"<p>Docker es \u00fatil a administradores de sistemas, pero tambi\u00e9n a desarrolladores. Uno de los problemas que se presentan durante el desarrollo y despliegue de aplicaciones es encontrarnos con sistemas heterog\u00e9neos, no ya entre los desarrolladores, tambi\u00e9n entre los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n. Es decir, que los desarrolladores y los sistemas donde se ejecuta la aplicaci\u00f3n tienen librer\u00edas y sistemas operativos diferentes. \u00bfY por qu\u00e9 es un problema? Pues porque la aplicaci\u00f3n puede funcionar bien en una distribuci\u00f3n de GNU/Linux pero no bien en otra, o ejecutarse bien con la versi\u00f3n de un lenguaje pero no con otra. Para asegurar la calidad de desarrollo tenemos que asegurar que todo el mundo usa las mismas versiones de todas las aplicaciones y librer\u00edas necesarios.</p> <p>Esto es m\u00e1s complicado de lo que parece, porque hay desarrolladores que prefieron una distribuci\u00f3n concreta, o incluso sistemas privativos. Incluso los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n suelen ser distintos. Los sistemas de producci\u00f3n suelen ser m\u00e1s nuevos y potentes y los antiguos se dejan para pruebas y pre-producci\u00f3n.</p> <p>Otro problema es que un mismo desarrollador o un mismo sistema de despliegue tenga que trabajar en m\u00e1s de un proyecto que requiera versiones distintas de librer\u00edas, complic\u00e1ndolo a\u00fan m\u00e1s.</p> <p>Docker viene a solucionar todos estos problemas, tanto para los desarrolladores como para los administradores de sistemas. Con Docker podemos crear entornos aislados con configuraciones que ser\u00e1n exactamente igual siempre.</p>"},{"location":"introduction/#docker-es-virtualizacion","title":"\u00bfDocker es virtualizaci\u00f3n?","text":"<p>En GNU/Linux Docker no es virtualizado, no hay un hipervisor. Los procesos que corren dentro de un contenedor de docker se ejecutan con el mismo kernel que la m\u00e1quina anfitri\u00f3n. Linux lo que hace es aislar esos procesos del resto de procesos del sistema, ya sean los propios de la m\u00e1quina anfitri\u00f3n o procesos de otros contenedores. Adem\u00e1s, es capaz de controlar los recursos que se le asignan a esos contenedores (cpu, memoria, red, etc.). Internamente, el contenedor no sabe que lo es y a todos los efectos es una distribuci\u00f3n GNU/Linux independiente, pero sin la penalizaci\u00f3n de rendimiento que tienen los sistemas virtualizados.</p> <p>As\u00ed que, cuando ejecutamos un contenedor, estamos ejecutando un servicio dentro de una distribuci\u00f3n construida a partir de una \"receta\". Esa receta permite que el sistema que se ejecuta sea siempre el mismo, independientemente de si estamos usando Docker en Ubuntu, Fedora o, incluso, sistemas privativos compatibles con Docker. De esa manera podemos garantizar que estamos desarrollando o desplegando nuestra aplicaci\u00f3n, siempre con la misma versi\u00f3n de todas las dependencias.</p> <p>Obviamente, si ejecutamos contenedores GNU/Linux dentro de sistemas privativos, s\u00ed habr\u00e1 virtualizaci\u00f3n.</p>"},{"location":"introduction/#conceptos-basicos","title":"Conceptos b\u00e1sicos","text":"<p>Antes de comenzar a instalar y usar docker es importante tener una serie de conceptos claros2:</p> <p>Demonio de docker (docker daemon) : Es el proceso principal de docker. Escucha peticiones a la API y maneja los objetos de docker: im\u00e1genes, contenedores, redes, vol\u00famenes. Tambi\u00e9n es capaz de comunicarse con otros demonios para controlar servicios docker.</p> <p>Cliente de docker (docker client) : Es la principal herramienta que usan los administradores de sistema para interaccionar con el sistema Docker.</p> <p>Registro de docker (docker registry) : Es el lugar donde se almacenan las im\u00e1genes de Docker y poder descargarlas para reutilizarlas. Docker Hub es el principal registro p\u00fablico de Docker y contiene ya un mont\u00f3n de im\u00e1genes listas para ser usadas de multitud de servicios (mysql, wordpress, etc).</p>"},{"location":"introduction/#objetos-de-docker","title":"Objetos de docker","text":"<p>Cuando usamos Docker, estamos creando y usando im\u00e1genes, contenedores, redes o vol\u00famenes, entre otros. A todo esto se le denominan objetos. Veamos los m\u00e1s importantes:</p> <p>Imagen (image) : Plantilla de solo lectura que contiene las instrucciones para crear un contenedor Docker. Pueden estar basadas en otras imagenes, lo cual es habitual.</p> <p>Contenedor (container) : Es una instancia ejecutable de una imagen. Esta instancia puede ser creada, iniciada, detenida, movida o eliminada a trav\u00e9s del cliente de Docker o de la API. Las instancias se pueden conectar a una o m\u00e1s redes, sistemas de almacenamiento, o incluso se puede crear una imagen a partir del estado de un contenedor. Se puede controlar c\u00f3mo de aislado est\u00e1 el contenedor del sistema anfitri\u00f3n y del resto de contenedores.     El contenedor est\u00e1 definido tanto por la imagen de la que procede como de las opciones de configuraci\u00f3n que permita. Por ejemplo, la imagen oficial de MariaDb permite configurar a trav\u00e9s de opciones la contrase\u00f1a del administrador, de la primera base de datos que se cree, del usuario que la maneja, etc.</p> <p>Servicios (services) : Los servicios permiten escalar contenedor a trav\u00e9s de m\u00faltiples demonios de Docker, los cuales trabajar\u00e1n conjuntamente como un enjambre (swarm).</p>"},{"location":"introduction/#objetivos-del-taller","title":"Objetivos del taller","text":"<p>En este taller aprenderemos:</p> <ul> <li>A usar el registro oficial de Docker, a descargar y usar im\u00e1genes del mismo creando contenedores que nos puedan ser \u00fatiles.</li> <li>A crear una imagen a partir de otra.</li> <li>A automatizar la creaci\u00f3n de un conjunto de contenedores que interaccionan entre s\u00ed.</li> </ul> <p>En este taller no aprenderemos:</p> <ul> <li>A crear un cluster con Docker (Docker Swarm).</li> <li>A administrar sistemas. Se dar\u00e1n ya las instrucciones necesarias para crear servicios pero explicarlos est\u00e1 m\u00e1s alla del \u00e1mbito de este taller. Se recomienda cursar la asignatura: \"Programaci\u00f3n y Administraci\u00f3n de Sistemas\" del Grado de Ingenier\u00eda Inform\u00e1tica.</li> </ul> <ol> <li> <p>Wikipedia: https://es.wikipedia.org/wiki/Docker_(software) \u21a9</p> </li> <li> <p>Official Docker Documentation: Docker overview.\u00a0\u21a9</p> </li> </ol>"},{"location":"ramas/","title":"Ramas","text":""},{"location":"ramas/#administracion-de-ramas","title":"Administraci\u00f3n de ramas","text":""},{"location":"ramas/#crear-una-nueva-rama","title":"Crear una nueva rama","text":"<p>Cuando vamos a trabajar en una nueva funcionalidad, es conveniente hacerlo en una nueva rama, para no modificar la rama principal y dejarla inestable. Aunque la orden para manejar ramas es <code>git branch</code> podemos usar tambi\u00e9n <code>git checkout</code>.</p> <p>Vamos a crear una nueva rama:</p> <pre><code>git branch hola\n</code></pre> <p>Info</p> <p>Si usamos <code>git branch</code> sin ning\u00fan argumento, nos devolver\u00e1 la lista de ramas disponibles.</p> <p>La orden anterior no devuelve ning\u00fan resultado y tampoco nos cambia de rama, para eso debemos usar checkout:</p> <pre><code>$ git checkout hola\nSwitched to branch 'hola'\n</code></pre> <p>Tip</p> <p>Hay una forma m\u00e1s rapida de hacer ambas acciones en un solo paso. Con el par\u00e1metro <code>-b</code> de <code>git checkout</code> podemos cambiarnos a una rama que, si no existe, se crea instant\u00e1neamente.</p> <pre><code>$ git checkout -b hola\nSwitched to a new branch 'hola'\n</code></pre>"},{"location":"ramas/#modificaciones-en-la-rama-secundaria","title":"Modificaciones en la rama secundaria","text":"<p>A\u00f1adimos un nuevo archivo en el directorio <code>lib</code> llamado <code>HolaMundo.php</code>:</p> <pre><code>&lt;?php\nclass HolaMundo\n{\nprivate $nombre;\nfunction __construct($nombre)\n{\n$this-&gt;nombre = $nombre;\n}\nfunction __toString()\n{\nreturn sprintf (\"Hola, %s.\\n\", $this-&gt;nombre);\n}\n}\n</code></pre> <p>Y modificamos <code>hola.php</code>:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n// El nombre por defecto es Mundo\nrequire('HolaMundo.php');\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\nprint new HolaMundo($nombre);\n</code></pre> <p>Podr\u00edamos confirmar los cambios todos de golpe, pero lo haremos de uno en uno, con su comentario.</p> <pre><code>$ git add lib/HolaMundo.php\n$ git commit -m \"A\u00f1adida la clase HolaMundo\"\n[hola 6932156] A\u00f1adida la clase HolaMundo\n 1 file changed, 16 insertions(+)\n create mode 100644 lib/HolaMundo.php\n$ git add lib/hola.php\n$ git commit -m \"hola usa la clase HolaMundo\"\n[hola 9862f33] hola usa la clase HolaMundo\n 1 file changed, 3 insertions(+), 1 deletion(-)\n</code></pre> <p>Y ahora con la orden <code>git checkout</code> podemos movernos entre ramas:</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n$ git checkout hola\nSwitched to branch 'hola'\n</code></pre>"},{"location":"ramas/#modificaciones-en-la-rama-master","title":"Modificaciones en la rama master","text":"<p>Podemos volver y a\u00f1adir un nuevo archivo a la rama principal:</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n</code></pre> <p>Creamos un archivo llamado <code>README.md</code> en la ra\u00edz de nuestro proyecto con el siguiente contenido:</p> <pre><code># Curso de GIT\nEste proyecto contiene el curso de introducci\u00f3n a GIT\n</code></pre> <p>Y lo a\u00f1adimos a nuestro repositorio en la rama en la que estamos:</p> <pre><code>$ git add README.md\n$ git commit -m \"A\u00f1adido README.md\"\n[master c3e65d0] A\u00f1adido README.md\n 1 file changed, 3 insertions(+)\n create mode 100644 README.md\n$ git hist --all\n* c3e65d0 2013-06-16 | A\u00f1adido README.md (HEAD, master) [Sergio G\u00f3mez]\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Y vemos como <code>git hist</code> muestra la bifurcaci\u00f3n en nuestro c\u00f3digo.</p>"},{"location":"ramas/#fusion-de-ramas-y-resolucion-de-conflictos","title":"Fusi\u00f3n de ramas y resoluci\u00f3n de conflictos","text":""},{"location":"ramas/#mezclar-ramas","title":"Mezclar ramas","text":"<p>Podemos incorporar los cambios de una rama a otra con la orden <code>git merge</code></p> <pre><code>$ git checkout hola\nSwitched to branch 'hola'\n$ git merge master\nMerge made by the 'recursive' strategy.\n README.md | 3 +++\n 1 file changed, 3 insertions(+)\n create mode 100644 README.md\n$ git hist --all\n*   9c6ac06 2013-06-16 | Merge commit 'c3e65d0' into hola (HEAD, hola) [Sergio G\u00f3mez]\n|\\\n* | 9862f33 2013-06-16 | hola usa la clase HolaMundo [Sergio G\u00f3mez]\n* | 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n| |\n| * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>De esa forma se puede trabajar en una rama secundaria incorporando los cambios de la rama principal o de otra rama.</p>"},{"location":"ramas/#resolver-conflictos","title":"Resolver conflictos","text":"<p>Un conflicto es cuando se produce una fusi\u00f3n que Git no es capaz de resolver. Vamos a modificar la rama master para crear uno con la rama hola.</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n</code></pre> <p>Modificamos nuestro archivo hola.php de nuevo:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\n@print \"Hola, {$nombre}\\n\";\n</code></pre> <p>Y guardamos los cambios:</p> <pre><code>$ git add lib/hola.php\n$ git commit -m \"Programa interactivo\"\n[master 9c85275] Programa interactivo\n 1 file changed, 2 insertions(+), 2 deletions(-)\n$ git hist --all\n*   9c6ac06 2013-06-16 | Merge commit 'c3e65d0' into hola (hola) [Sergio G\u00f3mez]\n|\\\n* | 9862f33 2013-06-16 | hola usa la clase HolaMundo [Sergio G\u00f3mez]\n* | 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n| | * 9c85275 2013-06-16 | Programa interactivo (HEAD, master) [Sergio G\u00f3mez]\n| |/\n| * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Volvemos a la rama hola y fusionamos:</p> <pre><code>$ git checkout hola\nSwitched to branch 'hola'\n$ git merge master\nAuto-merging lib/hola.php\nCONFLICT (content): Merge conflict in lib/hola.php\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre> <p>Si editamos nuestro archivo <code>lib/hola.php</code> obtendremos algo similar a esto:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// El nombre por defecto es Mundo\nrequire('HolaMundo.php');\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\nprint new HolaMundo($nombre);\n=======\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\n@print \"Hola, {$nombre}\\n\";\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\n</code></pre> <p>La primera parte marca el c\u00f3digo que estaba en la rama donde trabaj\u00e1bamos (HEAD) y la parte final el c\u00f3digo de donde fusion\u00e1bamos. Resolvemos el conflicto, dejando el archivo como sigue:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nrequire('HolaMundo.php');\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\nprint new HolaMundo($nombre);\n</code></pre> <p>Y resolvemos el conflicto confirmando los cambios:</p> <pre><code>$ git add lib/hola.php\n$ git commit -m \"Solucionado el conflicto al fusionar con la rama master\"\n[hola a36af04] Solucionado el conflicto al fusionar con la rama master\n</code></pre>"},{"location":"ramas/#rebasing-vs-merging","title":"Rebasing vs Merging","text":"<p>Rebasing es otra t\u00e9cnica para fusionar distinta a merge y usa la orden <code>git rebase</code>. Vamos a dejar nuestro proyecto como estaba antes del fusionado. Para ello necesitamos anotar el hash anterior al de la acci\u00f3n de merge. El que tiene la anotaci\u00f3n \"hola usa la clase HolaMundo\".</p> <p>Para ello podemos usar la orden <code>git reset</code> que nos permite mover HEAD donde queramos.</p> <pre><code>$ git checkout hola\nSwitched to branch 'hola'\n$ git hist\n*   a36af04 2013-06-16 | Solucionado el conflicto al fusionar con la rama master (HEAD, hola) [Sergio G\u00f3mez]\n|\\\n| * 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* |   9c6ac06 2013-06-16 | Merge commit 'c3e65d0' into hola [Sergio G\u00f3mez]\n|\\ \\\n| |/\n| * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* | 9862f33 2013-06-16 | hola usa la clase HolaMundo [Sergio G\u00f3mez]\n* | 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n$ git reset --hard 9862f33\nHEAD is now at 9862f33 hola usa la clase HolaMundo\n</code></pre> <p>Y nuestro estado ser\u00e1:</p> <pre><code>$ git hist --all\n* 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD, hola) [Sergio G\u00f3mez]\n* 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n| * 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n| * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Hemos desecho todos los merge y nuestro \u00e1rbol est\u00e1 \"limpio\". Vamos a probar ahora a hacer un rebase. Continuamos en la rama <code>hola</code> y ejecutamos lo siguiente:</p> <pre><code>$ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: A\u00f1adida la clase HolaMundo\nApplying: hola usa la clase HolaMundo\nUsing index info to reconstruct a base tree...\nM   lib/hola.php\nFalling back to patching base and 3-way merge...\nAuto-merging lib/hola.php\nCONFLICT (content): Merge conflict in lib/hola.php\nerror: Failed to merge in the changes.\nPatch failed at 0002 hola usa la clase HolaMundo\nThe copy of the patch that failed is found in: .git/rebase-apply/patch\n\nWhen you have resolved this problem, run \"git rebase --continue\".\nIf you prefer to skip this patch, run \"git rebase --skip\" instead.\nTo check out the original branch and stop rebasing, run \"git rebase --abort\".\n</code></pre> <p>El conflicto, por supuesto, se sigue dando. Resolvemos guardando el archivo <code>hola.php</code> como en los casos anteriores:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nrequire('HolaMundo.php');\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\nprint new HolaMundo($nombre);\n</code></pre> <p>A\u00f1adimos los cambios en staging y en esta ocasi\u00f3n, y tal como nos indicaba en el mensaje anterior, no tenemos que hacer <code>git commit</code> sino continuar con el rebase:</p> <pre><code>$ git add lib/hola.php\n$ git status\nrebase in progress; onto 269eaca\nYou are currently rebasing branch 'hola' on '269eaca'.\n  (all conflicts fixed: run \"git rebase --continue\")\n\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    modified:   lib/hola.php\n$ git rebase --continue\nApplying: hola usa la clase HolaMundo\n</code></pre> <p>Y ahora vemos que nuestro \u00e1rbol tiene un aspecto distinto, mucho m\u00e1s limpio:</p> <pre><code>$ git hist --all\n* 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD -&gt; hola) [Sergio G\u00f3mez]\n* 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Lo que hace rebase es volver a aplicar todos los cambios a la rama m\u00e1ster, desde su nodo m\u00e1s reciente. Eso significa que se modifica el orden o la historia de creaci\u00f3n de los cambios. Por eso rebase no debe usarse si el orden es importante o si la rama es compartida.</p>"},{"location":"ramas/#mezclando-con-la-rama-master","title":"Mezclando con la rama master","text":"<p>Ya hemos terminado de implementar los cambios en nuestra rama secundaria y es hora de llevar los cambios a la rama principal. Usamos <code>git merge</code> para hacer una fusi\u00f3n normal:</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n$ git merge hola\nUpdating c3e65d0..491f1d2\nFast-forward\n lib/HolaMundo.php | 16 ++++++++++++++++\n lib/hola.php      |  4 +++-\n 2 files changed, 19 insertions(+), 1 deletion(-)\n create mode 100644 lib/HolaMundo.php\n $ git hist --all\n * 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD -&gt; master, hola) [Sergio G\u00f3mez]\n * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n * 9c85275 2013-06-16 | Programa interactivo [Sergio G\u00f3mez]\n * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Vemos que indica que el tipo de fusi\u00f3n es fast-forward. Este tipo de fusi\u00f3n tiene el problema que no deja rastro de la fusi\u00f3n, por eso suele ser recomendable usar el par\u00e1metro <code>--no-ff</code> para que quede constancia siempre de que se ha fusionado una rama con otra.</p> <p>Vamos a volver a probar ahora sin hacer fast-forward. Reseteamos master al estado \"Programa interactivo\".</p> <pre><code>$ git reset --hard 9c85275\n$ git hist --all\n* 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD -&gt; hola) [Sergio G\u00f3mez]\n* 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Vemos que estamos como en el final de la secci\u00f3n anterior, as\u00ed que ahora mezclamos:</p> <pre><code>$ git merge -m \"Aplicando los cambios de la rama hola\" --no-ff hola\nMerge made by the 'recursive' strategy.\n lib/HolaMundo.php | 16 ++++++++++++++++\n lib/hola.php      |  4 +++-\n 2 files changed, 19 insertions(+), 1 deletion(-)\n create mode 100644 lib/HolaMundo.php\n$ git hist --all\n*   2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola (HEAD -&gt; master) [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>En la siguiente imagen se puede ver la diferencia:</p> <p></p>"},{"location":"referencias/","title":"Referencias","text":"<ul> <li>Documentaci\u00f3n oficial en ingl\u00e9s.</li> <li>Documentaci\u00f3n oficial en espa\u00f1ol (quiz\u00e1s incompleta).</li> <li>Curso de Git (ingl\u00e9s). La mayor\u00eda de la documentaci\u00f3n de este manual est\u00e1 basada en este curso.</li> <li>Curso interactivo de Git (ingl\u00e9s).</li> <li>P\u00e1gina de referencia de todas las \u00f3rdenes de Git (ingl\u00e9s).</li> <li>Chuleta con las \u00f3rdenes m\u00e1s usuales de Git.</li> <li>Gitmagic (ingles y espa\u00f1ol). Otro manual de Git</li> <li>Art\u00edculo t\u00e9cnico: Un modelo exitoso de ramificaci\u00f3n en Git .</li> <li>Curso detallado y gratuito sobre Git y github</li> <li>Otra guia r\u00e1pida de git</li> <li>Gu\u00eda de estilos seg\u00fan Udacity</li> <li>Flujo de trabajo de Gitflow</li> </ul>"},{"location":"tips/","title":"Trucos","text":""},{"location":"tips/#portainer","title":"Portainer","text":"<p>Portainer es una gestor de contenedores a trav\u00e9s de una interfaz web. Para usarlo creamos un directorio donde guardar nuestro docker-compose.yaml.</p> <pre><code>mkdir -p ~/Sites/portainer\ncd ~/Sites/portainer\n</code></pre> <p>Guardamos el siguiente fichero como docker-compose.yaml en nuestro directorio:</p> <pre><code>version: '2'\nservices:\nportainer:\nimage: portainer/portainer\ncommand: -H unix:///var/run/docker.sock\nvolumes:\n- /var/run/docker.sock:/var/run/docker.sock\n- portainer_data:/data\nports:\n- 127.0.0.1:9000:9000\nvolumes:\nportainer_data:\n</code></pre> <p>Y ejecutamos el contenedor:</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"tips/#limpieza","title":"Limpieza","text":"<p>Para borrar objetos que no est\u00e1n en uso:</p> <p><pre><code>docker system prune\n</code></pre> Para borrar vol\u00famenes que no est\u00e1n asociados a ning\u00fan contenedor:</p> <pre><code>docker volume rm $(docker volume ls -q -f \"dangling=true\")\n</code></pre> <p>Para borrar contenedores que han terminado su ejecuci\u00f3n:</p> <pre><code>docker rm $(docker ps -q -f \"status=exited\")\n</code></pre> <p>Para borrar im\u00e1genes que no est\u00e1n etiquetadas:</p> <pre><code>docker rmi $(docker images -q -f \"dangling=true\")\n</code></pre>"},{"location":"tips/#copias-de-seguridad","title":"Copias de seguridad","text":"<p>Para hacer una copia de seguridad:</p> <pre><code>docker run --rm -v /tmp:/backup \\\n    --volumes-from &lt;container-name&gt; \\\n    busybox tar -cvf /backup/backup.tar &lt;path-to-data&gt;\n</code></pre> <p>Para restaurar:</p> <pre><code>docker run --rm -v /tmp:/backup \\\n    --volumes-from &lt;container-name&gt; \n    busybox tar -xvf /backup/backup.tar &lt;path-to-data&gt;\n</code></pre>"},{"location":"tips/#fuentes-de-esta-pagina","title":"Fuentes de esta p\u00e1gina:","text":"<ol> <li>https://codefresh.io/docker-tutorial/everyday-hacks-docker/</li> <li>http://blog.labianchin.me/2016/02/15/docker-tips-and-tricks</li> </ol>"},{"location":"tips/#imagenes-base","title":"Im\u00e1genes base","text":"<p>Son las im\u00e1genes m\u00e1s conocidas por las que podemos usar para no partir desde cero para crear la nuestra.</p> <ul> <li>phusion/baseimage: 209mb</li> <li>centos: 200mb</li> <li>debian: 101mb</li> <li>ubuntu: 84mb</li> <li>alpine: 4.4mb</li> <li>busybox: 1.16mb</li> </ul>"},{"location":"usoavanzado/","title":"Uso avanzado de Git","text":""},{"location":"usoavanzado/#deshacer-cambios","title":"Deshacer cambios","text":""},{"location":"usoavanzado/#deshaciendo-cambios-antes-de-la-fase-de-staging","title":"Deshaciendo cambios antes de la fase de staging.","text":"<p>Volvemos a la rama m\u00e1ster y vamos a modificar el comentario que pusimos:</p> <pre><code>$ git checkout master\nPrevious HEAD position was 3283e0d... Se a\u00f1ade un par\u00e1metro por defecto\nSwitched to branch 'master'\n</code></pre> <p>Modificamos hola.php de la siguiente manera:</p> <pre><code>&lt;?php\n// Este comentario est\u00e1 mal y hay que borrarlo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n</code></pre> <p>Y comprobamos:</p> <pre><code>$ git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add &lt;file&gt;...\" to update what will be committed)\n#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n#\n#   modified:   hola.php\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>El mismo Git nos indica que debemos hacer para a\u00f1adir los cambios o para deshacerlos:</p> <pre><code>$ git checkout hola.php\n$ git status\n# On branch master\nnothing to commit, working directory clean\n$ cat hola.php\n&lt;?php\n// El nombre por defecto es Mundo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n</code></pre>"},{"location":"usoavanzado/#deshaciendo-cambios-antes-del-commit","title":"Deshaciendo cambios antes del commit","text":"<p>Vamos a hacer lo mismo que la vez anterior, pero esta vez s\u00ed a\u00f1adiremos el cambio al staging (sin hacer commit). As\u00ed que volvemos a modificar hola.php igual que la anterior ocasi\u00f3n:</p> <pre><code>&lt;?php\n// Este comentario est\u00e1 mal y hay que borrarlo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n</code></pre> <p>Y lo a\u00f1adimos al staging</p> <pre><code>$ git add hola.php\n$ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n#\n#   modified:   hola.php\n#\n</code></pre> <p>De nuevo, Git nos indica qu\u00e9 debemos hacer para deshacer el cambio:</p> <pre><code>$ git reset HEAD hola.php\nUnstaged changes after reset:\nM   hola.php\n$ git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add &lt;file&gt;...\" to update what will be committed)\n#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n#\n#   modified:   hola.php\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git checkout hola.php\n</code></pre> <p>Y ya tenemos nuestro repositorio limpio otra vez. Como vemos hay que hacerlo en dos pasos: uno para borrar los datos del staging y otro para restaurar la copia de trabajo.</p>"},{"location":"usoavanzado/#deshaciendo-commits-no-deseados","title":"Deshaciendo commits no deseados.","text":"<p>Si a pesar de todo hemos hecho un commit y nos hemos equivocado, podemos deshacerlo con la orden <code>git revert</code>. Modificamos otra vez el archivo como antes:</p> <pre><code>&lt;?php\n// Este comentario est\u00e1 mal y hay que borrarlo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n</code></pre> <p>Pero ahora s\u00ed hacemos commit:</p> <pre><code>$ git add hola.php\n$ git commit -m \"Ups... este commit est\u00e1 mal.\"\nmaster 5a5d067] Ups... este commit est\u00e1 mal\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre> <p>Bien, una vez confirmado el cambio, vamos a deshacer el cambio con la orden <code>git revert</code>:</p> <pre><code>$ git revert HEAD --no-edit\n[master 817407b] Revert \"Ups... este commit est\u00e1 mal\"\n1 file changed, 1 insertion(+), 1 deletion(-)\n$ git hist\n* 817407b 2013-06-16 | Revert \"Ups... este commit est\u00e1 mal\" (HEAD, master) [Sergio G\u00f3mez]\n* 5a5d067 2013-06-16 | Ups... este commit est\u00e1 mal [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre>"},{"location":"usoavanzado/#borrar-commits-de-una-rama","title":"Borrar commits de una rama","text":"<p>El anterior apartado revierte un commit, pero deja huella en el historial de cambios. Para hacer que no aparezca hay que usar la orden <code>git reset</code>.</p> <pre><code>$ git reset --hard v1\nHEAD is now at fd4da94 Se a\u00f1ade un comentario al cambio del valor por defecto\n$ git hist\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (HEAD, tag: v1, master) [Sergio G\u00f3me\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>El resto de cambios no se han borrado (a\u00fan), simplemente no est\u00e1n accesibles porque git no sabe como referenciarlos. Si sabemos su hash podemos acceder a\u00fan a ellos. Pasado un tiempo, eventualmente Git tiene un recolector de basura que los borrar\u00e1. Se puede evitar etiquetando el estado final.</p> <p>Danger</p> <p>La orden reset es una operaci\u00f3n delicada. Debe evitarse si no se sabe bien lo que se est\u00e1 haciendo, sobre todo cuando se trabaja en repositorios compartidos, porque podr\u00edamos alterar la historia de cambios lo cual puede provocar problemas de sincronizaci\u00f3n.</p>"},{"location":"usoavanzado/#modificar-un-commit","title":"Modificar un commit","text":"<p>Esto se usa cuando hemos olvidado a\u00f1adir un cambio a un commit que acabamos de realizar. Tenemos nuestro archivo hola.php de la siguiente manera:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez\n// El nombre por defecto es Mundo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n</code></pre> <p>Y lo confirmamos:</p> <pre><code>$ git commit -a -m \"A\u00f1adido el autor del programa\"\n[master cf405c1] A\u00f1adido el autor del programa\n 1 file changed, 1 insertion(+)\n</code></pre> <p>Tip</p> <p>El par\u00e1metro <code>-a</code> hace un <code>git add</code> antes de hacer commit de todos los archivos modificados  o borrados (de los nuevos no), con lo que nos ahorramos un paso.</p> <p>Ahora nos percatamos que se nos ha olvidado poner el correo electr\u00f3nico. As\u00ed que volvemos a modificar nuestro archivo:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n// El nombre por defecto es Mundo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n</code></pre> <p>Y en esta ocasi\u00f3n usamos <code>commit --amend</code> que nos permite modificar el \u00faltimo estado confirmado, sustituy\u00e9ndolo por el estado actual:</p> <pre><code>$ git add hola.php\n$ git commit --amend -m \"A\u00f1adido el autor del programa y su email\"\n[master 96a39df] A\u00f1adido el autor del programa y su email\n 1 file changed, 1 insertion(+)\n$ git hist\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email (HEAD, master) [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Danger</p> <p>Nunca modifiques un commit que ya hayas sincronizado con otro repositorio o que hayas recibido de \u00e9l. Estar\u00edas alterando la historia de cambios y provocar\u00edas problemas de sincronizaci\u00f3n.</p>"},{"location":"usoavanzado/#moviendo-y-borrando-archivos","title":"Moviendo y borrando archivos","text":""},{"location":"usoavanzado/#mover-un-archivo-a-otro-directorio-con-git","title":"Mover un archivo a otro directorio con git","text":"<p>Para mover archivos usaremos la orden <code>git mv</code>:</p> <pre><code>$ mkdir lib\n$ git mv hola.php lib\n$ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n#\n#   renamed:    hola.php -&gt; lib/hola.php\n#\n</code></pre>"},{"location":"usoavanzado/#mover-y-borrar-archivos","title":"Mover y borrar archivos.","text":"<p>Pod\u00edamos haber hecho el paso anterior con la \u00f3rden del sistema mv y el resultado hubiera sido el mismo. Lo siguiente es a modo de ejemplo y no es necesario que lo ejecutes:</p> <pre><code>$ mkdir lib\n$ mv hola.php lib\n$ git add lib/hola.php\n$ git rm hola.php\n</code></pre> <p>Y, ahora s\u00ed, ya podemos guardar los cambios:</p> <pre><code>$ git commit -m \"Movido hola.php a lib.\"\n[master 8c2a509] Movido hola.php a lib.\n 1 file changed, 0 insertions(+), 0 deletions(-)\n rename hola.php =&gt; lib/hola.php (100%)\n</code></pre>"},{"location":"usobasico/","title":"Uso b\u00e1sico de Git","text":""},{"location":"usobasico/#crear-un-proyecto","title":"Crear un proyecto","text":""},{"location":"usobasico/#crear-un-programa-hola-mundo","title":"Crear un programa \"Hola Mundo\"","text":"<p>Creamos un directorio donde colocar el c\u00f3digo</p> <pre><code>$ mkdir curso-de-git\n$ cd curso-de-git\n</code></pre> <p>Creamos un fichero <code>hola.php</code> que muestre Hola Mundo.</p> <pre><code>&lt;?php\necho \"Hola Mundo\\n\";\n</code></pre>"},{"location":"usobasico/#crear-el-repositorio","title":"Crear el repositorio","text":"<p>Para crear un nuevo repositorio se usa la orden <code>git init</code></p> <pre><code>$ git init\nInitialized empty Git repository in /home/cc0gobas/git/curso-de-git/.git/\n</code></pre>"},{"location":"usobasico/#anadir-la-aplicacion","title":"A\u00f1adir la aplicaci\u00f3n","text":"<p>Vamos a almacenar el archivo que hemos creado en el repositorio para poder trabajar, despu\u00e9s explicaremos para qu\u00e9 sirve cada orden.</p> <pre><code>$ git add hola.php\n$ git commit -m \"Creaci\u00f3n del proyecto\"\n[master (root-commit) e19f2c1] Creaci\u00f3n del proyecto\n 1 file changed, 2 insertions(+)\n create mode 100644 hola.php\n</code></pre>"},{"location":"usobasico/#comprobar-el-estado-del-repositorio","title":"Comprobar el estado del repositorio","text":"<p>Con la orden <code>git status</code> podemos ver en qu\u00e9 estado se encuentran los archivos de nuestro repositorio.</p> <pre><code>$ git status\n# On branch master\nnothing to commit (working directory clean)\n</code></pre> <p>Si modificamos el archivo <code>hola.php</code>:</p> <pre><code>&lt;?php\n@print \"Hola {$argv[1]}\\n\";\n</code></pre> <p>Y volvemos a comprobar el estado del repositorio:</p> <pre><code>$ git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add &lt;file&gt;...\" to update what will be committed)\n#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n#\n#   modified:   hola.php\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre>"},{"location":"usobasico/#anadir-cambios","title":"A\u00f1adir cambios","text":"<p>Con la orden <code>git add</code> indicamos a git que prepare los cambios para que sean almacenados.</p> <pre><code>$ git add hola.php\n$ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n#\n#   modified:   hola.php\n#\n</code></pre>"},{"location":"usobasico/#confirmar-los-cambios","title":"Confirmar los cambios","text":"<p>Con la orden <code>git commit</code> confirmamos los cambios definitivamente, lo que hace que se guarden permanentemente en nuestro repositorio.</p> <pre><code>$ git commit -m \"Parametrizaci\u00f3n del programa\"\n[master efc252e] Parametrizaci\u00f3n del programa\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git status\n# On branch master\nnothing to commit (working directory clean)\n</code></pre>"},{"location":"usobasico/#diferencias-entre-workdir-y-staging","title":"Diferencias entre workdir y staging.","text":"<p>Modificamos nuestra aplicaci\u00f3n para que soporte un par\u00e1metro por defecto y a\u00f1adimos los cambios.</p> <pre><code>&lt;?php\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n</code></pre> <p>Este vez a\u00f1adimos los cambios a la fase de staging pero sin confirmarlos (commit).</p> <pre><code>git add hola.php\n</code></pre> <p>Volvemos a modificar el programa para indicar con un comentario lo que hemos hecho.</p> <pre><code>&lt;?php\n// El nombre por defecto es Mundo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n</code></pre> <p>Y vemos el estado en el que est\u00e1 el repositorio</p> <pre><code>$ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n#\n#   modified:   hola.php\n#\n# Changes not staged for commit:\n#   (use \"git add &lt;file&gt;...\" to update what will be committed)\n#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n#\n#   modified:   hola.php\n#\n</code></pre> <p>Podemos ver como aparecen el archivo hola.php dos veces. El primero est\u00e1 preparado para ser confirmado y est\u00e1 almacenado en la zona de staging. El segundo indica que el directorio hola.php est\u00e1 modificado otra vez en la zona de trabajo (workdir).</p> <p>Warning</p> <p>Si volvieramos a hacer un <code>git add hola.php</code> sobreescribir\u00edamos los cambios previos que hab\u00eda en la zona de staging.</p> <p>Almacenamos los cambios por separado:</p> <pre><code>$ git commit -m \"Se a\u00f1ade un par\u00e1metro por defecto\"\n[master 3283e0d] Se a\u00f1ade un par\u00e1metro por defecto\n 1 file changed, 2 insertions(+), 1 deletion(-)\n$ git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add &lt;file&gt;...\" to update what will be committed)\n#   (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n#\n#   modified:   hola.php\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git add .\n$ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n#\n#   modified:   hola.php\n#\n$ git commit -m \"Se a\u00f1ade un comentario al cambio del valor por defecto\"\n[master fd4da94] Se a\u00f1ade un comentario al cambio del valor por defecto\n 1 file changed, 1 insertion(+)\n</code></pre> <p>Info</p> <p>El valor \".\" despues de <code>git add</code> indica que se a\u00f1adan todos los archivos de forma recursiva.</p> <p>Warning</p> <p>Cuidado cuando uses <code>git add .</code> aseg\u00farate de que no est\u00e1s a\u00f1adiendo archivos que no quieres a\u00f1adir.</p>"},{"location":"usobasico/#ignorando-archivos","title":"Ignorando archivos","text":"<p>La orden <code>git add .</code> o <code>git add nombre_directorio</code> es muy c\u00f3moda, ya que nos permite a\u00f1adir todos los archivos del proyecto o todos los contenidos en un directorio y sus subdirectorios. Es mucho m\u00e1s r\u00e1pido que tener que ir a\u00f1adi\u00e9ndolos uno por uno. El problema es que, si no se tiene cuidado, se puede terminar por a\u00f1adir archivos innecesarios o con informaci\u00f3n sensible.</p> <p>Por lo general se debe evitar a\u00f1adir archivos que se hayan generado como producto de la compilaci\u00f3n del proyecto, los que generen los entornos de desarrollo (archivos de configuraci\u00f3n y temporales) y aquellos que contentan informaci\u00f3n sensible, como contrase\u00f1as o tokens de autenticaci\u00f3n. Por ejemplo, en un proyecto de <code>C/C++</code>, los archivos objeto no deben incluirse, solo los que contengan c\u00f3digo fuente y los make que los generen.</p> <p>Para indicarle a git que debe ignorar un archivo, se puede crear un fichero llamado .gitignore, bien en la ra\u00edz del proyecto o en los subdirectorios que queramos. Dicho fichero puede contener patrones, uno en cada l\u00ednea, que especiquen qu\u00e9 archivos deben ignorarse. El formato es el siguiente:</p> <pre><code># .gitignore\ndir1/           # ignora todo lo que contenga el directorio dir1\n!dir1/info.txt  # El operador ! excluye del ignore a dir1/info.txt (s\u00ed se guardar\u00eda)\ndir2/*.txt      # ignora todos los archivos txt que hay en el directorio dir2\ndir3/**/*.txt   # ignora todos los archivos txt que hay en el dir3 y sus subdirectorios\n*.o             # ignora todos los archivos con extensi\u00f3n .o en todos los directorios\n</code></pre> <p>Cada tipo de proyecto genera sus ficheros temporales, as\u00ed que para cada proyecto hay un <code>.gitignore</code> apropiado. Existen repositorios que ya tienen creadas plantillas. Pod\u00e9is encontrar uno en https://github.com/github/gitignore</p>"},{"location":"usobasico/#ignorando-archivos-globalmente","title":"Ignorando archivos globalmente","text":"<p>Si bien, los archivos que hemos metido en <code>.gitignore</code>, deben ser aquellos ficheros temporales o de configuraci\u00f3n que se pueden crear durante las fases de compilaci\u00f3n o ejecuci\u00f3n del programa, en ocasiones habr\u00e1 otros ficheros que tampoco debemos introducir en el repositorio y que son recurrentes en todos los proyectos. En dicho caso, es m\u00e1s \u00fatil tener un gitignore que sea global a todos nuestros proyectos. Esta configuraci\u00f3n ser\u00eda complementaria a la que ya tenemos. Ejemplos de lo que se puede ignorar de forma global son los ficheros temporales del sistema operativo (<code>*~</code>, <code>.nfs*</code>) y los que generan los entornos de desarrollo.</p> <p>Para indicar a git que queremos tener un fichero de gitignore global, tenemos que configurarlo con la siguiente orden:</p> <pre><code>git config --global core.excludesfile $HOME/.gitignore_global\n</code></pre> <p>Ahora podemos crear un archivo llamado <code>.gitignore_global</code> en la ra\u00edz de nuestra cuenta con este contenido:</p> <pre><code># Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n# Logs and databases #\n######################\n*.log\n*.sql\n*.sqlite\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n*~\n*.swp\n\n# IDEs               #\n######################\n.idea\n.settings/\n.classpath\n.project\n</code></pre>"},{"location":"usobasico/#trabajando-con-el-historial","title":"Trabajando con el historial","text":""},{"location":"usobasico/#observando-los-cambios","title":"Observando los cambios","text":"<p>Con la orden <code>git log</code> podemos ver todos los cambios que hemos hecho:</p> <pre><code>$ git log\ncommit fd4da946326fbe8b24e89282ad25a71721bf40f6\nAuthor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nDate:   Sun Jun 16 12:51:01 2013 +0200\n\n    Se a\u00f1ade un comentario al cambio del valor por defecto\n\ncommit 3283e0d306c8d42d55ffcb64e456f10510df8177\nAuthor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nDate:   Sun Jun 16 12:50:00 2013 +0200\n\n    Se a\u00f1ade un par\u00e1metro por defecto\n\ncommit efc252e11939351505a426a6e1aa5bb7dc1dd7c0\nAuthor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nDate:   Sun Jun 16 12:13:26 2013 +0200\n\n    Parametrizaci\u00f3n del programa\n\ncommit e19f2c1701069d9d1159e9ee21acaa1bbc47d264\nAuthor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nDate:   Sun Jun 16 11:55:23 2013 +0200\n\n    Creaci\u00f3n del proyecto\n</code></pre> <p>Tambi\u00e9n es posible ver versiones abreviadas o limitadas, dependiendo de los par\u00e1metros:</p> <pre><code>$ git log --oneline\nfd4da94 Se a\u00f1ade un comentario al cambio del valor por defecto\n3283e0d Se a\u00f1ade un par\u00e1metro por defecto\nefc252e Parametrizaci\u00f3n del programa\ne19f2c1 Creaci\u00f3n del proyecto\ngit log --oneline --max-count=2\ngit log --oneline --since='5 minutes ago'\ngit log --oneline --until='5 minutes ago'\ngit log --oneline --author=sergio\ngit log --oneline --all\n</code></pre> <p>Una versi\u00f3n muy \u00fatil de <code>git log</code> es la siguiente, pues nos permite ver en que lugares est\u00e1 master y HEAD, entre otras cosas:</p> <pre><code>$ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (HEAD, master) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre>"},{"location":"usobasico/#crear-alias","title":"Crear alias","text":"<p>Como estas \u00f3rdenes son demasiado largas, Git nos permite crear alias para crear nuevas \u00f3rdenes parametrizadas. Para ello podemos configurar nuestro entorno con la orden <code>git config</code> de la siguiente manera:</p> <pre><code>git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n</code></pre> <p>Example</p> <p>Puedes configurar incluso alias para abreviar comandos. Algunos ejemplos de alias \u00fatiles:</p> <pre><code>git config --global alias.br branch\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.st \"status -u\"\ngit config --global alias.cane \"commit --amend --no-edit\"\n</code></pre>"},{"location":"usobasico/#recuperando-versiones-anteriores","title":"Recuperando versiones anteriores","text":"<p>Cada cambio es etiquetado por un hash, para poder regresar a ese momento del estado del proyecto se usa la orden <code>git checkout</code>.</p> <pre><code>$ git checkout e19f2c1\nNote: checking out 'e19f2c1'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n  git checkout -b new_branch_name\n\nHEAD is now at e19f2c1... Creaci\u00f3n del proyecto\n$ cat hola.php\n&lt;?php\necho \"Hello, World\\n\";\n</code></pre> <p>El aviso que nos sale nos indica que estamos en un estado donde no trabajamos en ninguna rama concreta. Eso significa que los cambios que hagamos podr\u00edan \"perderse\" porque si no son guardados en una nueva rama, en principio no podr\u00edamos volver a recuperarlos. Hay que pensar que Git es como un \u00e1rbol donde un nodo tiene informaci\u00f3n de su nodo padre, no de sus nodos hijos, con lo que siempre necesitar\u00edamos informaci\u00f3n de d\u00f3nde se encuentran los nodos finales o de otra manera no podr\u00edamos acceder a ellos.</p>"},{"location":"usobasico/#volver-a-la-ultima-version-de-la-rama-master","title":"Volver a la \u00faltima versi\u00f3n de la rama master.","text":"<p>Usamos <code>git checkout</code> indicando el nombre de la rama:</p> <pre><code>$ git checkout master\nPrevious HEAD position was e19f2c1... Creaci\u00f3n del proyecto\n</code></pre>"},{"location":"usobasico/#etiquetando-versiones","title":"Etiquetando versiones","text":"<p>Para poder recuperar versiones concretas en la historia del repositorio, podemos etiquetarlas, lo cual es m\u00e1s facil que usar un hash. Para eso usaremos la orden <code>git tag</code>.</p> <pre><code>$ git tag v1\n</code></pre> <p>Ahora vamos a etiquetar la versi\u00f3n inmediatamente anterior como v1-beta. Para ello podemos usar los modificadores <code>^</code> o <code>~</code> que nos llevar\u00e1n a un ancestro determinado. Las siguientes dos \u00f3rdenes son equivalentes:</p> <pre><code>$ git checkout v1^\n$ git checkout v1~1\n$ git tag v1-beta\n</code></pre> <p>Si ejecutamos la orden sin par\u00e1metros nos mostrar\u00e1 todas las etiquetas existentes.</p> <pre><code>$ git tag\nv1\nv1-beta\n</code></pre> <p>Y para verlas en el historial:</p> <pre><code>$ git hist master --all\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1, master) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (HEAD, tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre>"},{"location":"usobasico/#borrar-etiquetas","title":"Borrar etiquetas","text":"<p>Para borrar etiquetas:</p> <pre><code>git tag -d nombre_etiqueta\n</code></pre>"},{"location":"usobasico/#visualizar-cambios","title":"Visualizar cambios","text":"<p>Para ver los cambios que se han realizado en el c\u00f3digo usamos la orden <code>git diff</code>. La orden sin especificar nada m\u00e1s, mostrar\u00e1 los cambios que no han sido a\u00f1adidos a\u00fan, es decir, todos los cambios que se han hecho antes de usar la orden <code>git add</code>. Despu\u00e9s se puede indicar un par\u00e1metro y dar\u00e1 los cambios entre la versi\u00f3n indicada y el estado actual. O para comparar dos versiones entre s\u00ed, se indica la m\u00e1s antigua y la m\u00e1s nueva. Ejemplo:</p> <pre><code>$ git diff v1-beta v1\ndiff --git a/hola.php b/hola.php\nindex a31e01f..25a35c0 100644\n--- a/hola.php\n+++ b/hola.php\n@@ -1,3 +1,4 @@\n &lt;?php\n+// El nombre por defecto es Mundo\n $nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n @print \"Hola, {$nombre}\\n\";\n</code></pre>"},{"location":"wordpress/","title":"Levantar un WordPress con Docker","text":"<p>Para crear un blog con WordPress necesitamos tener una base de datos d\u00f3nde almacenar las entradas. As\u00ed que empezaremos cre\u00e1ndola y despu\u00e9s crearemos el contenedor de nuestro blog.</p>"},{"location":"wordpress/#crear-un-contenedor-con-mariadb","title":"Crear un contenedor con MariaDB.","text":"<p>WordPress soporta los motores relaciones MySQL y MariaDB. Usaremos este \u00faltimo.</p> <p>Example</p> <p>Vamos a crear nuestra base de datos usando este volumen.</p> <pre><code>docker run -d --name wordpress-db \\\n--mount source=wordpress-db,target=/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=secret \\\n-e MYSQL_DATABASE=wordpress \\\n-e MYSQL_USER=manager \\\n-e MYSQL_PASSWORD=secret mariadb:10.3.9\n</code></pre> <p>La imagen se descargar\u00e1, si no lo estaba ya, y se iniciar\u00e1 nuestro contenedor de MariaDB:</p> <p><pre><code>$ docker run -d --name wordpress-db \\\n--mount source=wordpress-db,target=/var/lib/mysql \\\n-e MYSQL_ROOT_PASSWORD=secret \\\n-e MYSQL_DATABASE=wordpress \\\n-e MYSQL_USER=manager \\\n-e MYSQL_PASSWORD=secret mariadb:10.3.9\nUnable to find image 'mariadb:10.3.9' locally\n10.3.9: Pulling from library/mariadb\n124c757242f8: Pull complete \n9d866f8bde2a: Pull complete \nfa3f2f277e67: Pull complete \n398d32b153e8: Pull complete \nafde35469481: Pull complete \n31f2ae82b3e3: Pull complete \n3eeaf7e45ea6: Pull complete \n716982328e17: Pull complete \n34ce605c9036: Pull complete \n4502ed9073c0: Pull complete \n2afafbdf5a96: Pull complete \n43d52b11dd31: Pull complete \n30c7b70556f3: Pull complete \n8b1b39f2f89a: Pull complete \n41480b9319d7: Pull complete \nDigest: sha256:b7894bd08e5752acdd41fea654cb89467c99e67b8293975bb5d787b27e66ce1a\nStatus: Downloaded newer image for mariadb:10.3.9\n30634831d17108aa553a5774e27f398760bdbdf32debc3179843e73aa5957956\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n30634831d171        mariadb:10.3.9      \"docker-entrypoint.s\u2026\"   20 seconds ago      Up 16 seconds       3306/tcp            wordpress-db\n</code></pre> El principal cambio en <code>docker run</code> con respecto a la \u00faltima vez es que no hemos usado <code>-p</code> (el par\u00e1metro para publicar puertos) y hemos a\u00f1adido el par\u00e1metro <code>-d</code>.</p> <p>Lo primero que habremos notado es que el contenedor ya no se queda en primer plano. El par\u00e1metro <code>-d</code> indica que debe ejecutarse como un proceso en segundo plano. As\u00ed no podremos pararlo por accidente con <code>Control+C</code>.</p> <p>Lo segundo es que vemos que el contenedor usa un puerto, el <code>3306/tcp</code>, pero no est\u00e1 linkado a la m\u00e1quina anfitri\u00f3n. No tenemos forma de acceder a la base de datos directamente. Nuestra intenci\u00f3n es que solo el contenedor de WordPress pueda acceder.</p> <p>Luego una serie de par\u00e1metros <code>-e</code> que nos permite configurar nuestra base de datos.</p> <p>Info</p> <p>Los contenedores se configuran a trav\u00e9s de variables de ambiente, que podemos configurar con el par\u00e1metro <code>-e</code> que vemos en la orden anterior. Gracias a ellos hemos creado una base de datos, un usuario y configurado las contrase\u00f1as.</p> <p>Se recomienda buscar en el registro de Docker la imagen oficial de MariaDB para entender el uso de los par\u00e1metros.</p> <p>Por \u00faltimo, el par\u00e1metro <code>--mount</code> nos permite enlazar el volumen que creamos en el paso anterior con el directorio <code>/var/lib/mysql</code> del contenedor. Ese directorio es donde se guardan los datos de MariaDB. Eso significa que si borramos el contenedor, o actualizamos el contenedor a una nueva versi\u00f3n, no perderemos los datos porque ya no se encuentran en \u00e9l, si no en el volumen. Solo lo perder\u00edamos si borramos expl\u00edcitamente el volumen.</p> <p>Warning</p> <p>Cada contendor que usemos tendr\u00e1 uno o varios directorios donde se deben guardar los datos no vol\u00e1tiles. Nos corresponde a nosotros conocer la herramienta y saber de qu\u00e9 directorios se tratan. Usualmente est\u00e1n en la documentaci\u00f3n del contenedor, pero no siempre.</p> <p>Info</p> <p>El par\u00e1metro <code>--mount</code> se empez\u00f3 a utilizar desde la versi\u00f3n <code>17.06</code> para contenedores independientes (los que no pertenecen a un enjambre o swarm). Los que conozcan Docker de versiones m\u00e1s antiguas estar\u00e1n m\u00e1s acostumbrados a usar el par\u00e1metro <code>--volume</code> que hace algo similar. Sin embargo la documentaci\u00f3n aconseja usar ya <code>--mount</code>, sobre todo para nuevos usuarios.</p> <p>Nosotros somos muy obedientes as\u00ed que en este taller usaremos <code>--mount</code>.</p>"},{"location":"wordpress/#creando-nuestro-blog","title":"Creando nuestro blog","text":"<p>Vamos a crear otra vez nuestro contenedor de WordPress, pero esta vez vamos a conectarlo con nuestra base de datos. Adem\u00e1s, queremos poder editar los ficheros de las plantillas, por si tenemos que modificar algo, as\u00ed que necesitaremos montar el directorio del contenedor donde est\u00e1 instalado WordPress con nuestra cuenta de usuario en la m\u00e1quina anfitri\u00f3n.</p> <p>Example</p> <p>Vamos a crear el espacio de trabajo:</p> <pre><code>mkdir -p ~/Sites/wordpress/target &amp;&amp; cd ~/Sites/wordpress\n</code></pre> <p>Example</p> <p>Y dentro de este directorio arrancamos el contenedor:</p> <pre><code>docker run -d --name wordpress \\\n--link wordpress-db:mysql \\\n--mount type=bind,source=\"$(pwd)\"/target,target=/var/www/html \\\n-e WORDPRESS_DB_USER=manager \\\n-e WORDPRESS_DB_PASSWORD=secret \\\n-p 8080:80 \\\nwordpress:4.9.8\n</code></pre> <p>Cuando termine la ejecuci\u00f3n, si accedemos a la direcci\u00f3n http://localhost:8080/, ahora s\u00ed podremos acabar el proceso de instalaci\u00f3n de nuestro WordPress. Si listamos el directorio target comprobaremos que tenemos todos los archivos de instalaci\u00f3n accesibles desde el directorio anfitri\u00f3n.</p> <p>Note</p> <p>Ejercicios:</p> <ol> <li>Para los contenedores, tanto el de WordPress como el MariaDB.</li> <li>Borra ambos.</li> <li>Vuelve a crearlos y mira como ya no es necesario volver a instalar WordPress.</li> <li>Vuelve a borrarlos y borra tambi\u00e9n el volumen.</li> <li>Vuelve a crear el volumen y los contenedores y comprueba que ahora s\u00ed hay que volver a instalar WordPress.</li> </ol>"}]}